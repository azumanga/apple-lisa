{ E ERR1.TEXT}
UNIT International; INTRINSIC;
INTERFACE

USES     {$U libsm/UnitStd   }  UnitStd;

{ S INTRCold}
CONST
    MaximumCharsMatching= 10;   {Maximum number of characters returned by CharsMatching}

    {Market Codes}
    MCodeNil=       0;
    MCodeUS=        1;
    MCodeUK=        2;
    MCodeGermany=   3;
    MCodeFrance=    4;
    MCodeItaly=     5;
    MCodeSweden=    6;
    MCodeSpain=     7;

TYPE
    KindOfCompare= (CompAbsolute, CompStrong, CompWeak, CompVeryWeak);
    CompChrP=      ^CompChr;
    CompChr=        PACKED ARRAY[0..0] OF CHAR;
    CompStrP=      ^CompStr;
    CompStr=        STRING[255];


{------------------------------------------ Initialization ------------------------------------------------}

PROCEDURE InitInternational(VAR errnum: INTEGER);

{------------------------------------------ Case shift ----------------------------------------------------}

PROCEDURE UpStrShift(sP: CompStrP);
PROCEDURE UpChrShift(pc: CompChrP; length: INTEGER);

PROCEDURE DownStrShift(sP: CompStrP);
PROCEDURE DownChrShift(pc: CompChrP; length: INTEGER);

{------------------------------------------ Magnitude compare ---------------------------------------------}

FUNCTION  CompStrMagnitude(string1, string2: CompStrP; veryWeak: BOOLEAN): INTEGER;
FUNCTION  CompChrMagnitude(char1, char2: CompChrP;
                           length1, length2: INTEGER; veryWeak: BOOLEAN): INTEGER;

{------------------------------------------ Identity compare ----------------------------------------------}

FUNCTION  CompareChar(ch1, ch2: CHAR; kind: KindOfCompare): BOOLEAN;

PROCEDURE CharsMatching(ch: CHAR; kind: KindOfCompare;
                        matchingChars: CompChrP; VAR nOfMatchigChars: INTEGER);

FUNCTION  CompStrIdentity(string1, string2: CompStrP; kind: KindOfCompare): BOOLEAN;
FUNCTION  CompChrIdentity(char1, char2: CompChrP;
                          length1, length2: INTEGER; kind: KindOfCompare): BOOLEAN;

IMPLEMENTATION
{$IFC fDbgOk}
{$R+}
{$ELSEC}
{$R-}
{$ENDC}

{$IFC fSymOk}
{$D+}
{$ELSEC}
{$D-}
{$ENDC}

{$SETC doTraceIN := TRUE}
{$SetC fTraceIN := doTraceIN AND fTRACE}

{$S INcold}

{$I libin/INTRLib2.TEXT}

END.
ÿ