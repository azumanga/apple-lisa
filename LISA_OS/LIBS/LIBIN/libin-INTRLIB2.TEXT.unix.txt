{$S INcold}
{========================================== IMPLEMENTATION ================================================}


{========================================== InitInternational =============================================}

PROCEDURE InitInternational{(VAR errnum: INTEGER)};
BEGIN
{$IFC fTraceIN}    LogCall;     {$ENDC}
    errnum := 0;
END;

{========================================== UpShift =======================================================}

PROCEDURE UpStrShift{(sP: CompStrP)};
EXTERNAL;

PROCEDURE UpChrShift{(pc: CompChrP; length: INTEGER)};
EXTERNAL;


{========================================== DownShift =====================================================}

PROCEDURE  DownStrShift{(sP: CompStrP)};
EXTERNAL;

PROCEDURE DownChrShift{(pc: CompChrP; length: INTEGER)};
EXTERNAL;

{========================================== Compare Magnitude =============================================}

FUNCTION  CompStrMagnitude{(string1, string2: CompStrP; veryWeak: BOOLEAN): INTEGER};
EXTERNAL;

FUNCTION  CompChrMagnitude{(char1, char2: CompChrP;
                            length1, length2: INTEGER; veryWeak: BOOLEAN): INTEGER};
EXTERNAL;

{========================================== Compare Identity ==============================================}

FUNCTION  CompareChar{(ch1, ch2: CHAR; kind: KindOfCompare): BOOLEAN};
EXTERNAL;


PROCEDURE CharsMatching{(ch: CHAR; kind: KindOfCompare;
                         matchingChars: CompChrP; VAR nOfMatchigChars: INTEGER)};
VAR
    index:  INTEGER;
BEGIN
{$IFC fTraceIN}    LogCall;     {$ENDC}
    nOfMatchigChars := 0;
    index := 0;

    WHILE index < 256 DO
        BEGIN
        IF CompareChar(ch, CHR(index), kind) THEN
            BEGIN
            IF nOfMatchigChars < MaximumCharsMatching THEN
                BEGIN
                {$R-}
                matchingChars^[nOfMatchigChars] := CHR(index);
                {$R+}
                END;
            nOfMatchigChars := nOfMatchigChars + 1;
            END;
        index := index + 1;
        END;

    IF nOfMatchigChars >= MaximumCharsMatching THEN
        nOfMatchigChars := 0;
END;

FUNCTION  CompChrIdentity{(char1, char2: CompChrP;
                           length1, length2: INTEGER; kind: KindOfCompare): BOOLEAN};
EXTERNAL;

FUNCTION  CompStrIdentity{(string1, string2: CompStrP; kind: KindOfCompare): BOOLEAN};
EXTERNAL;
ÿ