{ ==========================================================================}
{                                                                           }
{                     Copyright 1983, Apple Computer, Inc.                  }
{                                                                           }
{ ==========================================================================}

UNIT WmlCrs;

INTRINSIC;

{ bas  2/14/83 -- icrsGeCross mask to ccWhiteMask }
{ bas 11/15/82 -- icrsGEIbeam, icrsHidden }
{ jwp  11/3/82 -- replaced fontmgr const ccLC & ccLCMask with values }
{ bas  11/1/82 -- segmentation }
{ bas 10/11/82 -- icrsGECross, icrsLFinger }
{ bas  9/30/82 -- icrsInactive from lisagraf arrow, rather than font }
{ bas 05/28/82 -- add check box cursor (icrsCheck) }
{ bas 05/18/82 -- add cError var parm to InitWmlCrs }
{ jwp 05/03/82 -- USES for FmgrUtil, version 4.5, convert to use FontMgr}
{ bas 03/29/82 -- USES for FontMgr, version 4.0 }
{ bas 02/25/82 -- hourglass cursor (from Rod); segment  SegWml }
{ bas 01/08/82 -- add cursors XIBeam and LCCross (courtesy of Janis Baron) }
{ edited by bas 11/15/81 }


INTERFACE

USES
     {$U libsm/Unitstd   }  UnitStd,
     {$U libsm/UnitHz    }  UnitHz,
     {$U libqd/Storage   }  Storage,
     {$U libqd/QuickDraw }  QuickDraw,
     {$U libfm/FontMgr   }  FontMgr,
     {$U libfm/FmgrUtil  }  FmgrUtil,
     {$U libsb/WmlStd    }  WmlStd;




CONST
    icrsFirst    = -1;
    icrsHidden   = -1;
    icrsEscape   =  0;
    icrsInactive =  1;
    icrsUpDwn    =  2;
    icrsLftRt    =  3;
    icrsGrow     =  4;
    icrsIbeam    =  5;
    icrsMenu     =  6;
    icrsVSkewer  =  7;
    icrsHSkewer  =  8;
    icrsLCcross  =  9;
    icrsXIBeam   = 10;
    icrsHrGlass  = 11;
    icrsCheck    = 12;
    icrsGECross  = 13;
    icrsLFinger  = 14;
    icrsGEIbeam  = 15;
    icrsLast     = 15;


PROCEDURE InitWmlCrs      (VAR cError: TC);
PROCEDURE SetStdCursor    (icrs: TC);
FUNCTION  IcrsCurrent:    TC;


IMPLEMENTATION

{$IFC WmlDebug }   {$R+} {$ELSEC } {$R-} {$ENDC }

{$IFC WmlSymbols } {$D+} {$ELSEC } {$D-} {$ENDC }

VAR argcrs: ARRAY [1..icrsLast] OF Cursor;
    icrsCur: TC;



{$S SBwork}
PROCEDURE SetStdCursor { (icrs: TC) } ;
BEGIN
{$IFC fTraceSB}    LogCall;     {$ENDC}
  IF (icrsCur <> icrs) AND (icrsFirst <= icrs) AND (icrs <= icrsLast) THEN BEGIN
      IF icrs = icrsHidden THEN HideCursor
      ELSE BEGIN
          IF icrs <> icrsEscape THEN SetCursor(argcrs[icrs]);
          IF icrsCur = icrsHidden THEN ShowCursor;
      END;
      icrsCur := icrs;
  END;
END;


{$S SBcold}
FUNCTION IcrsCurrent { :TC } ;
BEGIN
{$IFC fTraceSB}    LogCall;     {$ENDC}
IcrsCurrent := icrsCur;
END;



{$S SBopen1}
PROCEDURE InitWmlCrs {(VAR cError: TC)};
VAR i: TC;
BEGIN
{$IFC fTraceSB}    LogCall;     {$ENDC}
    argcrs[icrsInactive] := arrow;
    GetCursor (syscursor, 21, 21, argcrs[icrsUpDwn], cError);
    GetCursor (syscursor, 22, 22, argcrs[icrsLftRt], cError);
    GetCursor (syscursor, 23, 23, argcrs[icrsGrow], cError);
    GetCursor (syscursor, 24, 24, argcrs[icrsIbeam], cError);
    GetCursor (syscursor, 26, 26, argcrs[icrsMenu], cError);
    GetCursor (syscursor, 28, 28, argcrs[icrsHSkewer], cError);
    GetCursor (syscursor, 29, 29, argcrs[icrsVSkewer], cError);
    GetCursor (syscursor, 57, 58, argcrs[icrsLCcross], cError);
    GetCursor (syscursor, 24, 59, argcrs[icrsXIBeam], cError);
    GetCursor (syscursor, 8, 8, argcrs[icrsHrGlass], cError);
    GetCursor (syscursor, 38, 38, argcrs[icrsCheck], cError);
    GetCursor (syscursor, 26, ccWhiteMask, argcrs[icrsGECross], cError);
    GetCursor (syscursor, 82, 83, argcrs[icrsLFinger], cError);
    GetCursor (syscursor, 25, 59, argcrs[icrsGEIbeam], cError);

{$IFC  WmlDebug}
    IF cError <> 0 THEN BEGIN
        WRITELN ('Error in call to GetCursor.  Error #', cError:3);
    END;
{$ENDC}

    icrsCur := icrsInactive;
    SetCursor(argcrs[icrsCur]);
    ShowCursor;
END; { InitWmlCrs }

END. { Unit WmlCrs }


ÿ