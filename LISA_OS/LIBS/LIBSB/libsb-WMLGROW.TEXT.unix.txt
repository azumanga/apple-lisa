{ ==========================================================================}
{                                                                           }
{                     Copyright 1983, Apple Computer, Inc.                  }
{                                                                           }
{ ==========================================================================}


UNIT WmlGrow;

INTRINSIC;

{ bas 1/4/83  -- drag-ahead fix for DragFrame }
{ bas 11/1/82 -- segmentation }
{ bkd 8/30/82 -- Grow symbol drawn from WMFont }
{ bas 8/24/82 -- DragFrame fix }
{ bas 7/29/82 -- eliminate Globalize/LocalizePt }
{ bas 3/29/82 -- USES for FontMgr, version 4.0 }
{ edited by bas 12/22/81 }


INTERFACE

USES {$U libsm/UnitStd       } UnitStd,
     {$U libsm/UnitHz        } UnitHz,
     {$U libqd/Storage       } Storage,
     {$U libqd/QuickDraw     } QuickDraw,
     {$U libfm/FontMgr       } FontMgr,
     {$U libsb/WmlStd        } WmlStd,
     {$IFC FWMLOS }
          {$U libos/SysCall  } SysCall,
     {$ELSEC }
          {$U obj:OSStub   } SysCall,
     {$ENDC}
     {$U libwm/Events        } Events,
     {$U libwm/Folders       } Folders;




CONST
    dhGrow = 24;    dvGrow = 16;     { must be dhSbox, dvSbox }

PROCEDURE GetGrowRect (VAR rGrow: TR);
PROCEDURE PaintGrow;
FUNCTION  FGrowHit (pt: TPt): TF;
PROCEDURE DragFrame (ptMouse: TPt; fDrawScrolls: TF; VAR ptNewBR: TPt);
PROCEDURE InitXorFrame;
PROCEDURE XorFrame(ptFrameBR: TPt; fDrawScrolls: TF);
PROCEDURE EndXorFrame;

IMPLEMENTATION

{$IFC WmlDebug }   {$R+} {$ELSEC } {$R-} {$ENDC }

{$IFC WmlSymbols } {$D+} {$ELSEC } {$D-} {$ENDC }

CONST
     GrowCh = 'L';

VAR rFrame: TR; portOld: TPort; cdTabBot: TCd;


{$S SBothrwk }
PROCEDURE GetGrowRect { (VAR rGrow: TR) } ;
BEGIN
{$IFC fTraceSB}    LogCall;     {$ENDC}
    rGrow.right := thePort^.portRect.right+1;
    rGrow.bottom := thePort^.portRect.bottom+1;
    rGrow.left := rGrow.right - dhGrow;
    rGrow.top := rGrow.bottom - dvGrow;
END; { GetGrowRect }


{$S SBscrol }
PROCEDURE PaintGrow;
VAR rGrow: TR;
BEGIN
{$IFC fTraceSB}    LogCall;     {$ENDC}
    WmlTxtSave;
    GetGrowRect(rGrow);
    EraseRect(rGrow);
    MoveTo (rGrow.Left, rGrow.Top);
    DrawChar (GrowCh); { draw inside box }
    WmlTxtRestore;
END; { PaintGrow }



{$S SBothrwk }
FUNCTION FGrowHit { (pt: TPt): TF } ;
VAR rGrow: TR;
BEGIN
{$IFC fTraceSB}    LogCall;     {$ENDC}
    GetGrowRect(rGrow);
    FGrowHit := PtInRect(pt, rGrow);
END;



{$S SBmovrs }
PROCEDURE InitXorFrame;
VAR wInfo: WindowInfo;
BEGIN
{$IFC fTraceSB}    LogCall;     {$ENDC}
    rFrame := thePort^.portRect;
    InsetRect(rFrame, -1, -1);
    cdTabBot := rFrame.top;
    GetWindInfo(thePort, wInfo);
    IF wInfo.hasTab THEN rFrame.top := rFrame.top - 15;
    WITH thePort^.portBits.bounds DO BEGIN
        OffsetRect(rFrame, -left, -top);
        cdTabBot := cdTabBot - top;
    END;
    portOld := thePort;
    SetPort(deskPort);
    PenPat(gray);  PenMode(14); { pnSize = (1,1) }
END;


{$S SBmovrs }
PROCEDURE XorFrame { (ptFrameBR: TPt; fDrawScrolls: TF) } ;
 { ptFrameBR is global coordinate of frame's bottom right }
BEGIN
{$IFC fTraceSB}    LogCall;     {$ENDC}
    rFrame.botRight := ptFrameBR;
    FrameRect(rFrame);
    IF rFrame.top <> cdTabBot THEN BEGIN
        MoveTo(rFrame.left, cdTabBot);
        LineTo(rFrame.right-1, cdTabBot);
    END;
    IF fDrawScrolls THEN BEGIN
        MoveTo(rFrame.left, ptFrameBR.v - dvGrow);    { v = grow.top  }
        LineTo(rFrame.right-1, ptFrameBR.v - dvGrow);
        MoveTo(ptFrameBR.h - dhGrow, cdTabBot);       { h = grow.left }
        LineTo(ptFrameBR.h - dhGrow, rFrame.bottom-1);
    END;
END;


{$S SBmovrs }
PROCEDURE EndXorFrame;
BEGIN
{$IFC fTraceSB}    LogCall;     {$ENDC}
    PenNormal;
    SetPort(portOld);
END;


{$S SBmovrs }
PROCEDURE DragFrame { (ptMouse: TPt; fDrawScrolls: TF; VAR ptNewBR: TPt) } ;
 { Drag an xor frame while the mouse button is down.  ptMouseDwn is the
   reference point -- all changes are relative to it.  ptNewBR is the
   proposed bottom right corner of the portRect after frame dragging is done. }
   VAR dh, dv: TCd; ptOldMouse, ptMouseMin : TPt; event: EventRecord;

{$S SBmovrs }
   PROCEDURE DoDragFrame;
   BEGIN
{$IFC fTraceSB}    LogCall;     {$ENDC}
        ptMouse.h := CMax(ptMouse.h, ptMouseMin.h);
        ptMouse.v := CMax(ptMouse.v, ptMouseMin.v);
        dh := ptMouse.h - ptOldMouse.h;
        dv := ptMouse.v - ptOldMouse.v;
        IF ((dh <> 0) OR (dv <> 0)) THEN BEGIN
            XorFrame(ptNewBR, fDrawScrolls);  { hide old }
            ptNewBR.h := ptNewBR.h+dh;
            ptNewBR.v := ptNewBR.v+dv;
            XorFrame(ptNewBR, fDrawScrolls);  { draw new }
        END;
    END;
{$S SBmovrs }
BEGIN
{$IFC fTraceSB}    LogCall;     {$ENDC}
    LocalToGlobal(ptMouse);
    InitXorFrame;  { sets rFrame, changes to deskPort }
    ptMouseMin.h := ptMouse.h - (rFrame.right-rFrame.left) + dhGrow;
    ptMouseMin.v := ptMouse.v - (rFrame.bottom-cdTabBot) + dvGrow;

    ptNewBR := rFrame.botRight;
    XorFrame(ptNewBR, fDrawScrolls);
    WHILE StillDown DO BEGIN
        ptOldMouse := ptMouse;
        GetMouse(ptMouse);
        DoDragFrame;
    END;
    IF PeekEvent(event) AND (event.what = buttonUp) THEN BEGIN
        ptOldMouse := ptMouse;
         { convert event.where to global coords }
        ptMouse := event.where;
        Subpt(event.who^.portBits.bounds.topLeft, ptMouse);
        DoDragFrame;
    END;
    XorFrame(ptNewBR, fDrawScrolls);          { hide last }
    EndXorFrame;                              { restores port }
    ptNewBR.h := ptNewBR.h - 1;
    ptNewBR.v := ptNewBR.v - 1;
    GlobalToLocal(ptNewBR);
END; { Drag Frame }

END.

ÿ