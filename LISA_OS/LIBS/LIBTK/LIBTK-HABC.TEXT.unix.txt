(*  HABC -- INCLUDE file from UABC, for storing preliminary comments  *)

{changed 02/01/84 1427  RELEASE TK8D}
{changed 02/01/84 1427  TWindow.cmdDone changed to TCommand.doing}
{changed 02/01/84 0030  TWindow.RevealSelection added doHilite parameter}
{changed 01/30/83 0122  RELEASE TK8D pre-release to Compugraphic}
{changed 09/21/83 1924  RELEASE TK8A}

{Whosoever may USE this UNIT must also USE UObject, UFont, and QuickDraw, and may use SysCall}
{Probably UFont won't be needed by Tool Kit Release}
{The main program of every application is:
    TProcess.InitClass;
    process := TxxProcess.CREATE;
    process.Commence(phraseVersion);
    process.Run;
    process.Complete(TRUE);
 where TxxProcess is a subclass of TProcess whose methods call TProcess methods and may do additional things
}

{Ordering and Inclusion of Methods...

    In the Interface:       Listed by class; by category within the class; alphabetically within the category.
                            Abstract methods are included.
                            Implemented inherited methods are shown in braces (except 'Fields' is omitted).
                            Categories: Creation/Destruction-Debugging, then the rest alphabetically.

    In the Implementation:  Listed by class; CREATE-Free-Clone-Debug-Field,
                                the rest alphabetically.
                            Abstract methods are omitted.  All implemented methods are included.
}


{--------CLASSES----------  ------------------------VARIABLES------------------------

  TProcess                  ( global variables )
  TDocDirectory             window classList
  TDocManager               files dataSegment docHeap window pendingNote openedAsTool
     TClipboard             hasView hasPicture hasUniversalText cuttingTool cuttingProcessID
  TCommand                  cmdNumber view undoable revelation unHiliteBefore hiliteAfter
     TCutCopyCommand        isCut
     TPasteCommand
  TImage                    extentLRect view
     TView                  panel clickLPt printManager hRes vRes minExtentLRect isPrintable isMainView
        TPaginatedView      unpaginatedView pageSize workingInMargins
        TPageView
     THeading               printManager pageAlignment offsetFromAlignment oddOnly evenOnly minPage maxPage
  TPrintManager             view pageView breaks pageMargins headings canEditPages layoutDialogBox
                                    frameBody paperLRect printableLRect contentLRect printerMetrics
                                    pageRiseDirection (reserve)
  TSelection                window panel view kind anchorLPt currLPt boundLRect coSelection canCrossPanels
  TArea*                    innerRect outerRect parentBranch
     TWindow                panels panelTree dialogBox selectPanel undoSelPanel clickPanel undoClickPanel
                                    selectWindow wmgrID isResizable maxInnerSize
                                    changes lastCmd cmdDone printerMetrics pgSzOK
        TDialogBox          keyResponse menuResponse downInMainWindowResponse
     TBand                  window panes panel scroller scrollDir
     TPanel                 window panes currentView view paginatedView selection undoSelection bands
                                    scrollBars abilities minInnerDiagonal resizeBranch
                                    zoomed zoomFactor previewMode clickPane
     TBranchArea*           arrangement oldBeforeYoung resizability olderChild youngerChild
     TPad*                  port viewedLRect visLRect availLRect scrollOffset zoomed zoomFactor
                                    padHRes padVRes viewedHRes viewedVRes
        TPane               currentView panel
        TMarginPad          view pageNumber bodyPad
        TBodyPad            marginPad nonNullBody
  TScroller                 scrollBar band sBoxID
  TScrollBar                firstBox isVisible
  TMenuBar                  isLoaded mapping numMenus numCommands

NOTE: '*' means declared in Unit UDRAW}

{  ------------------- activeWindowID, currentDocument, currentWindow ----------------
    A window is active IFF (window.wmgrID = activeWindowID)
    A window is running in the background IFF (window = currentWindow) AND NOT window.IsActive
    The process has no active windows and no windows running in the background
        IFF currentWindow = currentDocument = NIL
    IF activeWindowID <> 0 THEN currentWindow.wmgrID = activeWindowID (is this true???)

   ------------------- PROPER ORDER OF ALLOCATION -----------------

        document := TDocManager.CREATE(...);
        window := TWindow.CREATE(...document...);              document -> window
        panel := TPanel.CREATE(...window...);                  window <-> panel;
        view := TView.CREATE(...panel...);                     (panel & panes) <-> (view & subviews)
        selection := TSelection.CREATE(...view...);            panel <-> selection -> (view & window)
        window.selectPanel := panel;                        window -> ... -> selection

    ---------- THE WAY NEW WINDOWS ARE MADE IS THUS ------------

    1. TxxxProcess.NewDocManager, which should return TxxxDocManager.CREATE(...);
    2. TxxxDocManager.NewWindow, which should return TxxxWindow.CREATE(...SELF...);
    3. TxxxWindow.BlankStationery, which should call:
        a. panel := TyyyPanel.CREATE(...);
        b. xxxView := TxxxView.CREATE(...panel...);
        c. xxxSelection := panel.selection.FreedAndReplacedBy(TxxxSelection.CREATE(...));
                         (* you can omit step c if you want to start with no selection *)
}

                        { TProcess.AbortRequest
                          returns FALSE iff allowAbort is FALSE, else it returns the window
                            manager's Abort flag.  To write an abortable operation, you should just
                            call TProcess.AbortRequest at convenient times and gracefully exit the
                            operation.  Users who want to do the operation WITHOUT aborting can simply
                            set allowAbort to FALSE before starting the operation.

                        NOTES:
                            allowAbort should be TRUE normally; it should be set to FALSE only when needed
                                and for as short a time as possible
                            Programmers should indicate all abortable operations
                            The current abortable operations are:
                                TDocManager.Open
                                TDocManager.OpenBlank
                                TDocManager.OpenSaved
                                TDocManager.OpenSuspended
                                TDocManager.SaveVersion
                                TDocManager.Suspend}
                        { TProcess.AbortXferSequential
                          should be used for file operations that can be abortable, instead of
                            TFileStream.XferSequential.  ChunkSize is the number of bytes to transfer
                            between calls to AbortRequest.  If an Abort is detected fs.error will be
                            erAborted.  If allowAbort is FALSE, then this does a standard
                            fs.XferSequential. }

          { If the application detects command period, he can exit his BlankStationery method at that
            point.  The ToolKit will then detect the command period and abort the document pull. }


ÿ