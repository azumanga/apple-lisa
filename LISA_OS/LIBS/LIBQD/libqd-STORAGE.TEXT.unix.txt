
{$S SegHz}

UNIT Storage;

INTRINSIC;

INTERFACE

USES {$U libsm/UnitStd  }  UnitStd,
     {$U libsm/UnitHz   }  UnitHz;

TYPE
     Ptr        = TP;      { blind pointer }
     Handle     = TH;      { pointer to a master ptr }
     RelHandle  = INTEGER; { 16 bit offset from heap start to a master ptr }
     ProcPtr    = TProc;   { pointer to a procedure }

VAR theHeap: THz;
    ordHeap: LongInt;

PROCEDURE InitHeap(startPtr,limitPtr: Ptr; errorProc: ProcPtr);
PROCEDURE SetHeap(hz: Thz);
PROCEDURE GetHeap(VAR hz: Thz);
FUNCTION  NewPtr(byteCount: INTEGER): Ptr;
PROCEDURE DisposePtr(p: Ptr);
FUNCTION  NewHandle(byteCount: INTEGER): Handle;
PROCEDURE DisposeHandle(h: Handle);
PROCEDURE SetSize(h: Handle; newSize: INTEGER);
FUNCTION  GetSize(h: Handle): INTEGER;



IMPLEMENTATION

{$S SMopen1}
PROCEDURE InitHeap(* startPtr,limitPtr: Ptr; errorProc ProcPtr *);
BEGIN
{$IFC fTraceSM}   LogCall;   {$ENDC}
  {$IFC fDbgOk} fTstStd := FALSE; {$ENDC}
  {$IFC fDbgOk} fTstHz  := FALSE; {$ENDC}
  theHeap:=HzInit(startPtr,limitPtr,startPtr,500,0,errorProc,Nil,Nil,Nil);
  ordHeap:=ORD(theHeap);
END;


{$S SMgraf}
PROCEDURE SetHeap(* hz: Thz *);
BEGIN
{$IFC fTraceSM}   LogCall;   {$ENDC}
  theHeap:=hz;
  ordHeap:=ORD(theHeap);
END;


{$S SMgraf}
PROCEDURE GetHeap(* VAR hz: Thz *);
BEGIN
{$IFC fTraceSM}   LogCall;   {$ENDC}
  hz:=theHeap;
END;


{$S SMcold}
FUNCTION NewPtr(* byteCount: INTEGER *);
VAR p: Ptr;
BEGIN
{$IFC fTraceSM}   LogCall;   {$ENDC}
  AllocBk(theHeap,@p,byteCount,tybkNRel);
  NewPtr:=p;
END;


{$S SMcold}
PROCEDURE DisposePtr(* p: Ptr *);
BEGIN
{$IFC fTraceSM}   LogCall;   {$ENDC}
  FreeBk(theHeap,@p,tybkNRel);
END;


{$S SMgraf}
FUNCTION NewHandle(* byteCount: INTEGER *);
BEGIN
{$IFC fTraceSM}   LogCall;   {$ENDC}
  NewHandle:=HAllocate(theHeap,byteCount);
END;


{$S SMgraf}
PROCEDURE DisposeHandle(* h: Handle *);
BEGIN
{$IFC fTraceSM}   LogCall;   {$ENDC}
  IF h <> NIL THEN
        FreeBk(HzFromH(h),h,tybkStd);
END;


{$S SMgraf}
PROCEDURE SetSize(* h: Handle; newSize: INTEGER *);
BEGIN
{$IFC fTraceSM}   LogCall;   {$ENDC}
  ChangeSizeH(HzFromH(h),h,newSize);
END;


{$S SMothrwk}
FUNCTION GetSize(* h: Handle *);
BEGIN
{$IFC fTraceSM}   LogCall;   {$ENDC}
  GetSize:=CbDataOfH(HzFromH(h),h);
END;

END.  { of Unit Storage }


ÿ