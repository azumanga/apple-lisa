
        .INCLUDE libqd/GRAFTYPES.TEXT

;------------------------------------------------------------------
;
;  --> LCURSOR.TEXT
;
;  Links to the Lisa or MacIntosh Cursor routines.
;


        .PROC InitCursor,0
        .REF  SetCursor,CursorInit
;----------------------------------------------------------
;
;  PROCEDURE InitCursor;
;
        FAKEHEAD
        MOVE.L  GRAFGLOBALS(A5),A0              ;POINT TO LISAGRAF GLOBALS
        PEA     ARROW(A0)                       ;PUSH ADDR OF ARROW
        JSR     SETCURSOR                       ;INSTALL ARROW CURSOR
        JMP     CURSORINIT                      ;AND MAKE IT VISIBLE
        FAKETAIL 'INITCURS'



        .PROC SetCursor,1
        .REF  CursorImage
;---------------------------------------------------
;
;  PROCEDURE SetCursor(crsr: Cursor);
;
        FAKEHEAD
        MOVE.L  4(SP),A0                        ;Point to Cursor
        MOVE    HOTSPOT+H(A0),-(SP)             ;PUSH HOTX
        MOVE    HOTSPOT+V(A0),-(SP)             ;PUSH HOTY
        MOVE    #16,-(SP)                       ;HEIGHT:=16
        PEA     DATA(A0)                        ;PUSH ADDR OF DATA
        PEA     MASK(A0)                        ;PUSH ADDR OF MASK
        JSR     CURSORIMAGE                     ;CALL CORE ROUTINE
        MOVE.L  (SP)+,(SP)                      ;STRIP PARAM
        RTS
        FAKETAIL 'SETCURSO'



        .PROC HideCursor,0
        .REF  CursorHide
;---------------------------------------------------------
;
;  PROCEDURE HideCursor;
;
;  ALL REGS PRESERVED.
;
        FAKEHEAD
        JMP     CursorHide
        FAKETAIL 'HIDECURS'



        .PROC ShowCursor,0
        .REF  CursorDisplay
;---------------------------------------------------------
;
;  PROCEDURE ShowCursor;
;
;  ALL REGS PRESERVED.
;
        FAKEHEAD
        JMP     CursorDisplay
        FAKETAIL 'SHOWCURS'



        .PROC ShieldCursor,2
        .REF  CursorShield
;---------------------------------------------------------
;
;  PROCEDURE ShieldCursor(shieldRect: Rect; offset: Point);
;
;  ALL REGS PRESERVED.
;
;  A6 OFFSETS OF PARAMS AND LOCALS AFTER LINK:
;
        LINK    A6,#0
        MOVEM.L D0-D2/A0-A1,-(SP)               ;SAVE REGS
        MOVE.L  12(A6),A0                       ;POINT TO SHIELDRECT

        MOVE    LEFT(A0),D0                     ;GET LEFT
        SUB     10(A6),D0                       ;SUBTRACT OFFSET.H
        MOVE    D0,-(SP)                        ;PUSH GLOBAL LEFT

        MOVE    TOP(A0),D0                      ;GET TOP
        SUB     8(A6),D0                        ;SUBTRACT OFFSET.V
        MOVE    D0,-(SP)                        ;PUSH GLOBAL TOP

        MOVE    RIGHT(A0),D0                    ;GET RIGHT
        SUB     10(A6),D0                       ;SUBTRACT OFFSET.H
        MOVE    D0,-(SP)                        ;PUSH GLOBAL RIGHT

        MOVE    BOTTOM(A0),D0                     ;GET BOTTOM
        SUB     8(A6),D0                        ;SUBTRACT OFFSET.V
        MOVE    D0,-(SP)                        ;PUSH GLOBAL BOTTOM

        JSR     CursorShield;

        MOVEM.L (SP)+,D0-D2/A0-A1               ;RESTORE REGS
        UNLINK  8,'SHIELDCU'



        .PROC ObscureCursor,0
        .REF  CursorObscure
;---------------------------------------------------------
;
;  PROCEDURE ObscureCursor;
;
;  Hide the cursor image until the next time the mouse moves.
;
        FAKEHEAD
        JMP     CursorObscure
        FAKETAIL 'OBSCUREC'



        .END


ÿ