{
cl:fldut



gl:fldut
obj:fldut
frl:=.i
yq
{{   Copyright 1983, Apple Computer    }

{$S FEcold}
{$R-}
Unit FldUt;
INTRINSIC;

INTERFACE

USES
    {$U libsm/unitstd.obj} UnitStd,
    {$U libsm/unithz.obj}  UnitHz,
    {$U libqd/QuickDraw}   QuickDraw,
    {$U libfm/FontMgr}     FontMgr,
    {$U libqd/Storage}     Storage,
    {$U libos/SysCall}     SysCall,
    {$U libwm/Events}      Events,
    {$U libdb/dbenv}       dbenv,
    {$U libfe/FEDec}       FEDec,
    {$U libpm/pmdecl}      pmdecl,
    {$U libpr/PrStdInfo}   PrStdInfo,
    {$U libsu/unitfmt.obj} Unitfmt,
    {$U libsu/unitcs.obj}  UnitCs,
    {$U libsu/scrap.obj}   Scrap;

{$SETC FLDUTDBG := FDBGOK}

Type

{ CS record for a field. The field UTfield points to resides on the application
  specific scrap. }
    PFldUT = ^TFldUT;
    TFldUT = record
                cs:      Tcs;
                UTfield: hndfield;
             end;

function CreateFldUt(StreamHeap:THz): TB;
procedure SeqLpdFld(Lpd: TLpd; var achad: Tachad);
{$IFC FLDUTDBG}
procedure PxFldUT(hcs:thcs);
{$ENDC}

IMPLEMENTATION

{$IFC FLDUTDBG}
{$D+}
{$ELSE}
{$D-}
{$ENDC}

{$S FEcold}
function CreateFldUt{StreamHeap: THz): TB};
{*******************************************************************************
Function: Field Editor Stream creation routine. Allocates and intializes an ICS.

Calls: IcsCreate.
********************************************************************************}

var
   index: TB;
   PtrFldUT: PfldUT;

begin
{$IFC fTraceFE}    LogCall;     {$ENDC}
  index := IcsCreate(tycsFld,sizeof(TFldUT),StreamHeap);

{ rghcs is the global array, kept on the universal text heap, which contains ALL
  stream indicies(including Lotus). This assignment gives me a pointer to my
  stream record. }
  PtrFldUt := pointer(ord(rghcs^[index]^));

{ Blindly do what is done here replacing SeqLpdFld with your seek routine and
  pxfldut with your print routine }
  with PtrFldUt^ do begin
     cs.cspd.argproc[IProcSeqLpd] := @SeqLpdFld;
     cs.cspd.argproc[IProcFreeIcs] := Pointer(procnil);
{$IFC FLDUTDBG}
     cs.cspd.argproc[IProcPxHcs] := @pxfldut;
{$ENDC}
     cs.cspd.argproc[IProcFindLpFixed] := @FindLpFstPar;
     cs.cspd.argproc[IProcFSelLpBounds] := @TrueStdSelLpBounds;
  end;
  CreateFldUT := index;
end;

{$S FEcold}
procedure SeqLpdFld{Lpd: TLpd; var achad: Tachad};

{********************************************************************************
Function: Starting at Lplim in the lpd return as large a run as possible, never
more than allowed by the interval in achad. If achad.rgch is nil then set rgch
to the field data array.

errors : Stream is not of type field.
*********************************************************************************}
label 100;

var
  lp: Tlp;
  runindex,i: integer;
  FldStrm: PFldUT;    { Pointer to Field CS record }
  cch,choffset: TC;
  index: TB;
  f: ptrfield;         { Pointer to field within CS record }
  rp: ptrruns;
  found: boolean;
  AchadSrc: TAchad;    { Achad used internally }


begin
{$IFC fTraceFE}    LogCall;     {$ENDC}
{ Get the stream from the ICS stored in the Lpd and check the type }
  index := lpd^.ics;
  FldStrm := pointer(ord(rghcs^[index]^));

{ Is there a field attached to this ICS }
  if FldStrm^.UTField = nil then begin
     lpd^.arce.fvan := true;
     goto 100;
  end;

{ Point rce at arce. Use the standard arce supplied in UNITFmt }
  Lpd^.rce := @lpd^.arce;
  movergch(pointer(ord(lpd^.rce)), @arcestd, arcestd.cb);

{ f points at the field }
  f := FldStrm^.UTField^;

{ How many characters is the caller willing accept }
  cch := achad.ichlim - achad.ichFst;

{ don't start past the end of the stream. Since I am using lplim as a simple logical
  position this works, but if lplim is in parts it would first have to me broken up. }
  lp := LpMinP(lpd^.LpLim,f^.curlen);

{ check for vanished run. Again since lp is a simple logical position there are
  no "gaps" in my lp's. }
  if lp > f^.curlen then begin
    lpd^.arce.fvan := true;
    goto 100
  end
  else
    lpd^.arce.fvan := false;

{ Set the starting position to the old ending position }
  Lpd^.lp := lp;

{ return the minimum of the rest of the stream or the size of the achad array }
  cch := LpMinP(f^.curlen - lp, cch);

{ If the caller requested paragraph information, Set the paragraph descriptor to
  standard and the beginning and end to the beginning and end of the field. }
if (lpd^.tyset.fRpe) or (lpd^.tyset.fParBnds) then begin
   lpd^.rpe := @lpd^.arpe;
   moveRgch(@lpd^.arpe, @arpeStd, arpeStd.cb);
   lpd^.lpfstpar := 0;
   lpd^.lplimpar := f^.curlen;
end;

{ Get the text }
achadsrc.rgch := pointer(ord(f^.curvalue^));
achadsrc.ichfst := lp;
achadsrc.ichlim := f^.curlen;


{ This is specific to a field }
{find the format record that controls this run }
runIndex := 0;
rp := f^.Fmtinfo^;
if (lpd^.tyset.frce) and (f^.curfmts > 1) then begin
     found := false;

     while not found do
        if (runIndex < f^.curfmts) and (rp^[runIndex].lpFst <= lp) then
           runIndex := runIndex + 1
        else
        begin
        found := true;
        runIndex := runIndex - 1;
        end;

{find the end of this run}
        if runindex < f^.curfmts - 1 then begin
           achadsrc.ichlim := rp^[runindex + 1].lpfst;
           cch := cch - (f^.curlen - rp^[runindex + 1].lpfst);
        end;

end;

{ set the arce }
with rp^[runindex], lpd^.rce^ do begin
   if bold in face then
      fbold := true
   else
      fbold := false;

   if italic in face then
      fitalic := true
   else
      fitalic := false;

   if underline in face then
      funderline := true
   else
      funderline := false;

   if outline in face then
      foutline := true
   else
      foutline := false;

   if shadow in face then
      fshadow := true
   else
      fshadow := false;

{ Because of the way lotus does fonts this conversion is necessary }
   found := false;
   i := 0;
   while (i <= ifntlst) and not(found) do
     begin
     if argfam[i] = font then
       begin
       ifnt := i;
       found := true;
       end;
     i := i + 1;
     end;
   if not found then ifnt := 0;
end; {with}

{Set the return achad}
if achad.rgch = nil then
   achad := achadsrc
else begin
   achad.ichlim := achad.ichfst + cch;
   moveachad(achad,achadsrc);
end;

{ Once again this would be more complicated in most cases }
lpd^.lplim := achadsrc.ichlim;
100:
end;

{$IFC FLDUTDBG}
{$S FEcold}
procedure pxFldUT{hcs: THcs};
{******************************************************************************
Function: Find the scrap ICS and print its associated field.
*******************************************************************************}

var
   index: TB;
   Hnd: HndField;
   i:integer;
   temp: PFldut;

begin

{$IFC fTraceFE}    LogCall;     {$ENDC}
    writeln('printing the ut record');
    if hcs^^.tycs <> tycsfld then
       writeln('WARNING - ics is not of type field');
    temp := pointer(ord(hcs^));
    hnd := temp^.utfield;
    with hnd^^ do
    begin
    writeln;
    writeln ('Field location: ', coords.topLeft.h, coords.topLeft.v,
        coords.botRight.h, coords.botRight.v);
    writeln ('Max length: ', maxLen, '   Cur length: ', curLen, '   Grow length: ',
        growLen);
    writeln ('Alignment: ', ord(align), 'Padding: ', ord(drawPad),
        '   Protection: ', ord(protect));
    writeln ('maxFmts: ',maxFmts, '   curFmts: ',curFmts, '   Grow formats: ',
        growFmts);
    writeln('runs - ');
    for i := 0 to (curFmts-1) do
        begin
        writeln('font is  ', fmtInfo^^[i].font);
        writeln('starting at ',fmtInfo^^[i].lpFst);
        if bold in fmtInfo^^[i].face then
            writeln('bold is true')
        else
            writeln ('bold is false');
        if italic in fmtInfo^^[i].face then
            writeln('italic is true')
        else
            writeln ('italic is false');
        if shadow in fmtInfo^^[i].face then
            writeln('shadow is true')
        else
            writeln ('shadow is false');
        if underline in fmtInfo^^[i].face then
            writeln('underline is true')
        else
            writeln ('underline is false');
        if outline in fmtInfo^^[i].face then
            writeln ('outline is true')
        else
            writeln ('outline is false');
        end;
    writeln;
    writeln ('Value: ');
    for i := 0 to (curLen-1) do
        write(i:3);
    writeln;
    for i := 0 to (curLen-1) do
        write (chr(curValue^^[i]):3);
    writeln;
    end;

  end;
{$ENDC}

end.



ÿ