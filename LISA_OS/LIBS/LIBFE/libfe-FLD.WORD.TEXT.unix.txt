
{*****************************************************************************}
{$S FEothrwk}
procedure RepWordSelect {int:interval; hf:hndField; hfs:hndFState};
{
Function: Replicates a selection given the interval of the word corresponding
          to the original x-coordinate.  Generally, this procedure is called
          after SelectWord to replicate the selection in a duplicate of the
          wide angle view.

Assumes:  SelectWord was previously called.
          Port and clipping must be set by the caller.
          The field's display image is valid.

Calls:    SetSel
          HilightSel
}
begin
{$IFC fTraceFE}    LogCall;     {$ENDC}
if fldTest then
   writeln ('Entering RepWordSelect');

{ turn off existing hilighting }
HilightSel (hf, hfs, false);

{ set the selection to word type inverted hilighting }
   SetSel (hf, hfs, int.lpFst, int.lpLim, tySelWd);

 { highlight the selection }
   HilightSel (hf, hfs, true);

if fldTest then
    writeln ('Exiting RepWordSelect');
end; { of RepWordSelect }


{**************************************************************************}
{$S FEothrwk}
procedure SelectWord {dxy:Point; hf:hndField; hfs:hndFState; var n:Rect;
              var t:integer};
{
Function:  Called when a double click event is received. Readies the field
           state for drag and triple click. Selects and highlights the word
           in which the mouse down occured. Sets the neighborhood, in n, to
           either side of the word. Sets timeout, in t, to infinite to stop
           the caret from blinking.

Assumes:   Caller has called Select on the first mouse down event.
           The second click happened in reasonable physical proximity to the
               first click. That is, that it is in the same field.
           The field's display image is valid.

Calls:     RepWordSelect
           SetNbrhood
           LpFromX
           LwFromLp
}
var
  chLw:    interval;
  chlp: integer;
  isWord, dummy:  boolean;

begin
{$IFC fTraceFE}    LogCall;     {$ENDC}
    if fldTest then
        writeln ('Entering SelectWord; chLp is ', hfs^^.select.int.lpFst);

    { find the word that contains the caret }
    chlp := LpFromX (dxy.h, hf, hfs, tyselWd);

    LwFromLp (chlp, hf, hfs, chLw, isWord);

 { if there was no word then hilight the character to the right of the caret }
    if not isword then
       with chlw do
          begin
          lpfst := chlp;
          if compressedlp(chlp,hf,hfs,dummy) < hf^^.curlen then
             lplim := expandedlp(compressedlp(chlp + 1,hf,hfs,dummy),hf,hfs)
          else
             lplim := chlp
          end;

    { establish the new selection interval and highlight the selection }
    RepWordSelect (chLw, hf, hfs);

    { set the neighborhood rectangle to halfway into the next and previous words }
    SetNbrhood (hf, hfs, dxy, n);

    { set the timeout to infinite to stop the caret from blinking }
    t := -1;

 end; { of SelectWord }


{***************************************************************************}
{$S FEcold}
procedure BackWord {hf:hndField; hfs:hndFState; var errNum:integer};
{
Function: If the current selection is in the middle of a word then set the
          selection and backspace pointer to beginning of that word and
          "delete" that portion of the word backed over. If the current
          selection is at the beginning of a word then set the selection and
          backspace pointer to the beginning of the word to the left and
          "delete" that word.

Assumes:  Selection exists.

Errors:   Invalid edit - operation not done.
          Field protected.

Calls:    FirstEdit
          FindCh
          SkipBackDelims
}
label  100;

var
   fstCh:    integer;
   dummy, saveNewSel:    boolean;
   int:      interval;
   oldBsPtr: integer;
   oldCurLen:integer;

begin
{$IFC fTraceFE}    LogCall;     {$ENDC}
   if fldTest then writeln('Entering BackWord');

   { if the is protected then set an error condition and exit }
   if hf^^.protect then
      begin
      errNum := fldProtected;
      goto 100
      end;

  with hfs^^ do
      begin
      { if the selection length is greater than 0 or there is nothing to
          backspace over, then set an error condition and exit }
      if select.int.LpLim = 0 then
          begin
          errNum := invalidEdit;
          goto 100
          end;

      { if this is the first edit after a selection then set up the field for typing }
      saveNewSel := newsel;
      if newSel then
          FirstEdit (hf, hfs, errnum);
      end; { of with }

   { do the backspace }
   with hf^^, hfs^^ do
     begin
     if select.int.lpFst <> select.int.lpLim then
         begin
         fstCh := select.int.lpFst;
         select.tyHilight := tyHiCaret;
         select.tySel := tySelPt;
         end
     else
         begin
         { in order not to ignore characters already backspaced over, dummy up the
             backspace pointers and curLen }
         oldBsPtr := bsPtr;
         bsPtr := space.lpFst;
         oldCurLen := curLen;
         curLen := space.lpFst;

         { save the operation type }
         if errnum = 0 then
            uInfo.lastOp := chInputOp
         else
            uInfo.lastOp := noOp;

         { find the beginning of the word starting with the first character behind
             then selection }
         fstCh := select.int.lpFst - 1;
         fstCh := SkipBackDelims (hf, hfs, fstCh);
         fstch := compressedlp(fstch, hf, hfs, dummy);
         while qualifies(fstch -1, hf, hfs) do fstch := fstch -1;
         fstch := expandedlp(fstch, hf, hfs);

         curLen := oldCurLen;
         bsPtr := oldBsPtr;
         end;
     curLen := curLen - (bsPtr - fstCh);
     bsPtr := fstCh;
     if validLp > 0 then
        validLp := bsPtr;
     select.int.lpFst := bsPtr;
     select.int.lpLim := bsPtr;
     anchor := select;

     if saveNewSel then
        LastEdit (hf, hfs);

     valid := false;
     changed := true
     end;
   errNum := 0;

100: end; { of BackWord }


{**************************************************************************}
{$S FEcold}
procedure ForwardWord {hf:hndField; hfs:hndFState; var errNum:byte};
{
Function:  "Restores" the last word "deleted". i.e., places the selection
           and the backspace pointer to the beginning of the last word
           backworded over.

Assumes:   Selection exists in this field.

Errors:    Invalid edit (no backword to forwardword over) - operation not done.

Calls:     FindCh
           SkipForwardDelims
           ExpandedLp
}
label 100;

var
  dummy,
  isword: boolean;
  int:    interval;
  endCh:  integer;
  oldBsPtr: integer;
  oldCurLen: integer;

begin
{$IFC fTraceFE}    LogCall;     {$ENDC}
   if fldTest then writeln('Entering ForwardWord');

with hf^^, hfs^^ do
   begin
   { if the backspace pointer points to the beginning of space or the beginning
       of a greater than 0 length selection, then set an error condition and exit }
   if (bsPtr = space.lpFst) or (select.int.lpFst <> select.int.lpLim) or newSel
       then
       begin
       errNum := invalidEdit;
       goto 100
       end;

   { in order to fool FindCh into looking inside the bsPtr - space.lpLim range
      we must reset them }
   oldBsPtr := bsPtr;
   bsPtr := space.lpFst;
   oldCurLen := curLen;
   curLen := space.lpFst;

   endch := select.int.lpfst;
   { find the end of this word }
   while qualifies(endCh +1, hf, hfs) do endCh := endCh +1;

   { now find the beginning of the next word }
   if endCh < ExpandedLp (curLen, hf, hfs) then
       endCh := endCh + 1;
   endCh := SkipForwardDelims (hf, hfs, endCh, curLen);

   { only forward word over what has already been backworded over }
   if (endCh > space.lpFst) then
       endCh := space.lpFst;

   { update the backspace and selection pointers }
   curLen := oldCurLen + (endCh - oldBsPtr);

   bsPtr := endCh;
   select.int.lpFst := endCh;
   select.int.lpLim := endCh;
   anchor.int := select.int;
   valid := false;
   changed := true;

   errNum := 0;
   end; { of with }

100: end; { of ForwardWord }

ÿ