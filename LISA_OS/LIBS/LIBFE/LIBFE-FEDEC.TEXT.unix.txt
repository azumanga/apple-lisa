
{ Copyright 1983,Apple Computer Inc. }

{$S fldsel}
Unit FEDec;

INTRINSIC;

INTERFACE

USES
    {$U libsm/unitstd.obj} UnitStd,
    {$U libsm/unithz.obj}  UnitHz,
    {$U libqd/QuickDraw}   QuickDraw,
    {$U libfm/FontMgr}     FontMgr,
    {$U libqd/Storage}     Storage,
    {$U libdb/dbenv}       dbenv;

{$SETC doTraceFE := TRUE}
{$SetC fTraceFE := doTraceFE AND fTRACE}

const
        { error numbers }
        fldFull = 1;            { contents larger than curvalue array     }
        fldProtected = 2;       { field is protected - no changes allowed }
        nullSelect = 3;         { selection is 0-length                   }
        invScrapType = 4;       { scrap type cannot be dealt with         }
        invOpType = 5;          { last operation cannot be undone         }
        noRoomForRuns = 6;      { no more runs in this array              }
        invalidEdit = 7;        { invalid change requested; operation not }
                                {     done                                }
        FEallocationFailed = 8;   { No space for larger curvalue array      }
        FENotUndoable = 9;        { Can't allocate space for undo buffer    }

        { field content alignment values }
        left = 1;
        right = 2;
        center = 3;

        { format types }
        setNormal = 1;
        setUnderline = 2;
        setBold = 3;
        setItalics = 4;
        setOutline = 5;
        setShadow = 6;
        setFont = 7;
        setToModern  = 8;  {Change all Classic characters in the field to Modern}
        setToClassic = 9;  {Change all Modern characters in the field to Classic}

        { operation types for undoing }
        noOp = 0;
        cutOp = 1;
        copyOp = 2;
        pasteOp = 3;
        chInputOp = 4;
        clearOp = 5;
        formatOp = 6;
        valueToFormulaOp = 7;
        formulaToValueOp = 8;

      { Maximum field length }
        MaxFieldLngth = 1000;


Type

        Tstr = string[50];                 { Points to triples string for character}
        Ttriple = ^Tstr;                   { classification.               }

        interval = record                  { character interval            }
               lpFst:   integer;           { logical position immediately  }
                                           {     preceeding the first char }
               lpLim:   integer;           { logical position immediately  }
                                           {     following the last char   }
               end;

        TtySel = (tySelPt,                 { selection types - point, char,}
                  tySelWd, tySelPar);      {     word or paragraph         }
        TtyHilight = (tyHiNil, tyHiInvert, { types of selection hilighting }
                      tyHiCaret,           {     - nil, inversion, caret,  }
                      tyHiDimInvert,       {     dim rectangle, or dim     }
                      tyHiDimCaret);       {     caret                     }

        txSel = record                     { text selection                }
            int:        interval;          { interval of selected chars    }
            tySel:      TtySel;            { selection type                }
            tyHilight:  TtyHilight;        { type of hilighting            }
            end;

        hndRuns  =  ^ptrRuns;
        ptrRuns  =  ^runs;

        run = record
               lpFst:     integer;         { starting lp of run            }
               font:      integer;         { font number, from FontMgr     }
               face:      Style;       { formatting characteristics    }
              end;

        runs = array[0..0] of run;

        field = record                     { static field characteristics  }
            coords:     Rect;              { bounding rectangle            }
            maxLen:     integer;           { maximum number of chars       }
                                           {     (should equal size of     }
                                           {     curvalue array)           }
            growLen:    integer;           { size by which to grow value   }
                                           {     array - don't grow if 0   }
            curLen:     integer;           { current number of chars       }
            align:      QDByte;            { alignment of chars when field }
                                           {     is displayed              }
            drawPad:    QDByte;            { # of pixels to draw from left }
                                           {     or right (depending on    }
                                           {     alignment)                }
            curValue:   hndData;           { handle of array of contents   }
            maxFmts:    integer;           { maximum # of format records   }
            growFmts:   integer;           { # of format records by which  }
                                           {     to grow - don't grow if 0 }
            curFmts:    integer;           { current # of format records   }
            fmtInfo:    hndRuns;           { handle to array of runs       }
            protect:    boolean;           { true => changes not allowed   }
            end;
        ptrField = ^field;
        hndField = ^ptrField;

        fieldState = record                { dynamic editing information   }
            select:     txSel;             { selection interval            }
            anchor:     txSel;             { selection anchor interval     }
            selectOn:   boolean;           { true => selection hilighted   }
            visCaret:   boolean;           { true => caret visible         }
            selectRect: Rect;              { hilighted selection area      }
            bsPtr:      integer;           { logical position backspaced to}
            space:      interval;          { unused space                  }
            valid:      boolean;           { true => screen image matches  }
                                           {     actual data               }
            validLp:    integer;           { first possible character      }
                                           {     needing to be erased      }
            newSel:     boolean;           { true => new selection was made}
                                           {     but no editing has been   }
                                           {     done yet                  }
            changed:    boolean;           { true => editing has been done }
                                           {     since initial selection   }
                                           {     in field                  }
            end;
        ptrFState = ^fieldState;
        hndFState = ^ptrFState;

        undoInfo = record                  { information saved for undo    }
            curField:   hndField;          { field currently being edited  }
            curFS:      hndFState;         { field state for curField      }
            oldSelFld:  hndField;          { field which will be selected  }
                                           {     if undo is requested      }
            oldSelFS:   hndFState;         { field state for oldSelFld     }
            select:     txSel;             { undo selection interval       }
            endselect:  txSel;             { selection for multiple undo   }
            anchor:     txSel;             { undo anchor interval          }
            endanchor:  txSel;             { anchor for multiple undo      }
            oldValFld:  hndField;          { field whose value will be re- }
                                           {     stored if undo is re-     }
                                           {     quested                   }
            oldValFS:   hndFState;         { field state for oldValFld     }
            curLen:     integer;           { number of chars in undo value }
            curValue:   hndData;           { handle of array of undo value }
            curFmts:    integer;           { number of undo format records }
            fmtInfo:    hndRuns;           { handle of array of undo runs  }
            lastOp:     integer;           { operation to undo             }
            end;
        ptrUndoInfo = ^undoInfo;
        hndUndoInfo = ^ptrUndoInfo;

 { Scrap stuff }
 { Any references to the field in the scrap record are made by loop holeing
   ScrapHnd }
        HndScrap =  ^ptrScrap;
        PtrScrap =  ^ScrapRec;

        ScrapRec = record
                       Scrapfld: Field;
                       isWord: boolean;
                    end;

IMPLEMENTATION
end.
ÿ