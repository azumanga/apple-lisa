{*****************************************************************************}
{$S FEothrwk}
procedure SetFmt (var r:run; fontNum:integer; format:integer);
{
Function:  Sets the run r to the formatting characteristic in format.
}
begin

{$IFC fTraceFE}    LogCall;     {$ENDC}
with r do
     case format of
         setBold:       face := face + [bold];
         setUnderline:  face := face + [underline];
         setItalics:    face := face + [italic];
         setShadow:     face := face + [shadow];
         setOutline:    face := face + [outline];
         setNormal:     face := [];
         setFont:       font := fontNum;
         setToModern:   font := ToModern[font];
         setToClassic:  font := ToClassic[font];
     end; { of case }
end; { of SetFmt }


{*****************************************************************************}
{$S FEothrwk}
function FmtFromLp {hf:hndField; hfs:hndFState; lp:integer): integer};
{
Function: Returns the array index of the format record that controls the
          specified lp.

Assumes: hfs may be nil.
}
var runIndex: integer;
    found:    boolean;
    rp:       ptrRuns;
    f:        ptrField;

begin
{$IFC fTraceFE}    LogCall;     {$ENDC}
if fldTest then
    write ('Entering FmtFromLp; lp is ', lp);

f := hf^;
rp := f^.fmtInfo^;
runIndex := 0;
found := false;

while not found do
    if (runIndex < f^.curFmts) and (rp^[runIndex].lpFst <= lp) then
        runIndex := runIndex + 1
    else
        begin
        found := true; runIndex := runIndex - 1;
        { if the lp is at a null format then return the first format in the null
            sequence }
        if runIndex > 0 then
            if (rp^[runIndex].lpFst = rp^[runIndex-1].lpFst) and
                (rp^[runIndex].lpFst = lp) then
                runIndex := runIndex - 1;
        end;

{ if the lp is at the backspace pointer, there may be a format at the end of the
    space that logically controls it }
if (hfs <> nil) and (runIndex < (f^.curFmts-1)) then
    if (lp = hfs^^.bsPtr) and (rp^[runIndex].lpFst < lp) and
        (rp^[runIndex+1].lpFst = hfs^^.space.lpLim) then
        runIndex := runIndex + 1;

if fldTest then
    writeln ('Result is ', runIndex);

FmtFromLp := runIndex;
end; { of FmtFromLp }

{*****************************************************************************}
{$S FEothrwk}
function FieldIntWidth(hf:hndField; hfs:hndFState; lpFst, lpLim:integer): integer;
{
Function:  Calculates the width of the specified interval within the field
           pointed to by hf, depending on the font changes within the field.

Note:  Handles must be re-dereferenced after calls to this procedure.

Calls: FmtFromLp
       FieldIntWidth
}
var
    width,err:       integer;
    contents:        QDPtr;
    lpLst, runIndex: integer;
    f:               ptrField;
    fs:              ptrFState;
    LongFont:        TLfntid;

begin

{$IFC fTraceFE}    LogCall;     {$ENDC}
   width := 0;
   f := hf^;

   if lpFst <> lpLim then
      { if this interval does not straddle space then it's easy }
      if (hfs = nil) then
         begin
         lpLst := lpFst;
         runIndex := FmtFromLp(hf, hfs, lpFst);
         while lpLst < lpLim do
            begin
            { determine the length of the run }
            if runIndex < (f^.curFmts-1) then
               begin
               lpLst := f^.fmtInfo^^[runIndex+1].lpFst;
               if lpLst > lpLim then
                   lpLst := lpLim;
               end
            else
               lpLst := lpLim;

            { add the width }
            if lpLst <> lpFst then { > 0-length interval }
               begin

        {check for substitute font }
               LongFont.fam := f^.fmtInfo^^[runIndex].font;
               LongFont.seteface := f^.fmtInfo^^[runIndex].face;

               if SubFont then
                   begin
                   LongFont.dev := SubDev;
                   FMMapFont(LongFont,err);
                   end;

               TextFont (LongFont.fam);
               TextFace (LongFont.seteface);

               contents := @hf^^.curvalue^^;
               width := width + TextWidth(contents, lpFst, lpLst - lpFst);
               if fldtest then
                  writeln('width ',width);
               end; { of action for adding the width }

            { find the next run }
            runIndex := runIndex + 1;
            lpFst := lpLst;
            end; { while }
         end { of action for nil field state }
      else { there is a field state; the run may stradle space }
         begin
         { if the interval does stradle space then by using advanced computer
            science techniques, such as recursion, what would have been a sticky
            wiquet works out quite nicely }
         fs := hfs^;
         if (lpFst <= fs^.bsPtr) and (lpLim >= fs^.space.lpLim) then
            begin
            width := FieldIntWidth (hf, nil, lpFst, fs^.bsPtr);
            lpFst := hfs^^.space.lpLim;
            end;
         width := width + FieldIntWidth (hf, nil, lpFst, lpLim);
         end;

   FieldIntWidth := width;
end; { of FieldIntWidth }


{*****************************************************************************}
{$S FEothrwk}
procedure VertCoords {hf:hndField; var ascent, descent:integer};
{
Function:  Returns, in ascent and descent, the top and bottom coordinates
           of the largest font in the field pointed to by hf centered around
           point.

Note:  Handles must be re-dereferenced after calls to this procedure.
}
var
   i, cerror:                   integer;
   fInfo:               FontInfo;
   dummyErr:            boolean;
   err:                 integer;
   fontId:              TLfntid;

begin

{$IFC fTraceFE}    LogCall;     {$ENDC}
    ascent := 0;
    descent := 0;

    for i := 0 to (hf^^.curFmts-1) do
            begin
            with hf^^.fmtInfo^^[i], fontid do
                begin
                fam := font;
                seteface := face;
                if SubFont then
                    begin
                    fontid.dev := SubDev;
                    FMMapFont(fontid,err);
                    end;
                TextFont (fam);
                TextFace (seteface);
                end;


            getfontinfo(finfo);

            if ascent < fInfo.ascent then
                ascent := fInfo.ascent;
            if descent < fInfo.descent  then
                descent := fInfo.descent;
            if underline in fontid.seteface then
                descent := descent + 1;
            end;


    if fldTest then
       writeln(' ascent is ',ascent,' descent is ',descent);

end; { of VertCoords }


{***************************************************************************}
{$S FEothrwk}
function TextStartPos (hf:hndField; hfs:hndFState): integer;
{
Function: Given a field and optional field state, returns the actual starting
          location for drawing its contents, depending on the string length and
          alignment for the field.

Assumes:  If the field state doesn't exist, hfs must be nil.

Note:     Handles must be re-dereferenced after calls to this procedure.

Calls:    FieldIntWidth
          ExpandedLp
}
var
  h,w: integer;

begin
{$IFC fTraceFE}    LogCall;     {$ENDC}
    { calculate space for the actual text (no empty space) }
    if (hf^^.align <> left) then
        w := FieldIntWidth (hf, hfs, 0, ExpandedLp (hf^^.curLen, hf, hfs));

with hf^^ do
    begin
    case align of

        left:   { character position to the beginning }
                h := coords.topLeft.h + drawPad;

        right:  { character position to the rightmost of either the
                    beginning of the field or the end of the field minus
                    the length of the text }
                h := coords.botRight.h - w - drawPad;

        center: { character position to the rightmost of either the
                    beginning of the field or the end of the field minus
                    the length of the text minus half the unused space }
                h := coords.botRight.h - w - (((coords.botRight.h -
                    coords.topLeft.h) - w) div 2);

        end; { of case for establishing correct left/right starting position }

    { see if the starting place is within the field }
    if (h < coords.topLeft.h) then
        TextStartPos := coords.topLeft.h
    else
        TextStartPos := h;

    end; { of with hf^^ }

end; { of TextStartPos }


{*****************************************************************************}
{$S FEothrwk}
function XFromLp (hf:hndField; hfs:hndFState; lp:integer): integer;
{
Function:  Returns the x coordinate of Lp.

Note:      Handles must be re-dereferenced after calls to this procedure.

Calls:     FieldIntWidth
           TextStartPos
}
begin
{$IFC fTraceFE}    LogCall;     {$ENDC}
if fldTest then
    writeln('entering XFromLp - param lp is ',lp);

XFromLp := FieldIntWidth (hf, hfs, 0, lp) + TextStartPos (hf, hfs);

if fldTest then
    writeln('leaving XFromLp');
end; { of XFromLp }



ÿ