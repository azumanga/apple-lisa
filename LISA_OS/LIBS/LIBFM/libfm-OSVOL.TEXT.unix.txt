{FRLisa:=.i
YQ
Cl:OSVol

lisa:OSVol.i[*]

Glisa:OSVol
Obj:OSVol
{{{}
{The above will compile and generate this unit}
{*******************************************************************************}

{$S Vol}
UNIT Vol; {15 November 82 }
{*******************************************************************************}
                                     INTERFACE
{*******************************************************************************}

USES
    {$U libsm/UnitStd    } UnitStd,
    {$U libsm/UnitHz     } UnitHz,
    {$U libos/SysCall    }  SysCall;


PROCEDURE BreakName
    (     path: PathName;
     VAR volName: PathName;
     VAR fName: E_Name);

PROCEDURE LowerToUpper
    (VAR name: E_Name);

FUNCTION VMatchPattern
    (VAR patt: E_Name;
          pstart: INTEGER;
     VAR test: E_Name;
          tstart: INTEGER): BOOLEAN;

FUNCTION VSetVolume
    (     vName: PathName;
          vPattern: E_Name;
     VAR cError: INTEGER)
: BOOLEAN;

FUNCTION VNextName
    (VAR fileName: E_Name)
: BOOLEAN;

FUNCTION VFileSize
    (    srcName: PathName)
: LONGINT;

{*******************************************************************************}
                                   IMPLEMENTATION
{*******************************************************************************}
{$E VOL.ERROR.TEXT}

VAR
    vSavePattern: E_Name;


PROCEDURE BreakName
    {(     path: PathName;
      VAR volName: PathName;
      VAR fName: E_Name)};

BEGIN {BreakName}
    IF POS ('-', path) = 1 THEN BEGIN
        DELETE (path, 1, 1);  {delete the first "-"}
    END;
    IF POS ('-', path) > 0 THEN BEGIN
        volName := CONCAT ('-', COPY (path, 1, POS ('-', path) - 1));
        fName := COPY (path, POS ('-', path) + 1, LENGTH (path) - POS ('-', path));
    END;
END; {BreakName}


PROCEDURE LowerToUpper
    {(VAR name: E_Name)};

VAR
    i,
    letterDiff: INTEGER;
    letterSet: SET OF 'a'..'z';

BEGIN {LowerToUpper}
    letterSet := ['a'..'z'];
    letterDiff := ORD ('a') - ORD ('A');
    FOR i := 1 TO LENGTH (name) DO BEGIN
        IF name [i] IN letterSet THEN BEGIN
            name [i] := CHR (ORD (name [i]) - letterDiff);
        END;
    END; {for i}
END; {LowerToUpper}


FUNCTION VFileSize
    {(    srcName: PathName)
: LONGINT};

VAR
    fileInfo: Fs_info;
    cError: INTEGER;

BEGIN {VFileSize}
    LOOKUP (cError, srcName, fileInfo);
    IF cError <= 0 THEN BEGIN
        VFileSize := fileInfo.size;
    END
    ELSE BEGIN
        VFileSize := 0;
    END;
END; {VFileSize}


FUNCTION VMatchPattern
    {(VAR patt: E_Name;
           pstart: TC;
      VAR test: E_Name;
           tstart: TC)
: TF };

VAR
    i,j,k: TC;
    fassert: TF;

BEGIN {VMatchPattern}
    i := pstart;
    j := tstart;

    IF patt [pstart] = '^' THEN BEGIN
        i := i + 1;
        fassert := FALSE;
    END
    ELSE BEGIN
        fassert := TRUE;
    END;

    REPEAT
        IF patt [i] = '=' THEN BEGIN
            IF i = LENGTH (patt) THEN BEGIN
                VMatchPattern := fassert;
                EXIT (VMatchPattern);
            END;
            FOR k := 0 TO LENGTH (test) - j DO BEGIN
                IF VMatchPattern (patt, i + 1, test, k + j) THEN BEGIN
                    VMatchPattern := fassert;
                    EXIT (VMatchPattern);
                END;
            END;
            VMatchPattern := NOT fassert;
            EXIT (VMatchPattern);
        END;

        IF ((patt [i] <> test [j]) AND (patt [i] <> '#'))
            OR
           (i > LENGTH(patt))
            OR
           (j > LENGTH(test)) THEN BEGIN
            VMatchPattern := NOT fassert;
            EXIT (VMatchPattern);
        END;

        i := i + 1;
        j := j + 1;
    UNTIL i > LENGTH (patt);

    VMatchPattern := (j > LENGTH(test)) = fassert;
                      { i.e., (j > LENGTH(test)) THEN fassert ELSE NOT fassert }
END; {VMatchPattern}


FUNCTION VSetVolume
    {(    vName: PathName;
          vPattern: E_Name;
       VAR cError: INTEGER)
: TF};

BEGIN  {VSetVolume}
    RESET_CATALOG (cError, vName);
    IF cError > 0 THEN BEGIN
        WRITELN ('Error #', cError:1,
                   ' occurred in trying to reset the catalog with name',
                   '"', vName, '".');
        VSetVolume := FALSE;
    END
    ELSE BEGIN
        vSavePattern := vPattern;
        VSetVolume := TRUE;
    END;
END;  {VSetVolume}


FUNCTION VNextName
    { (VAR fileName: E_Name)
: TF };
CONST
    eof = 848;

VAR
    fmatch: BOOLEAN;
    prefix,
    testName: E_Name;
    cError: INTEGER;

BEGIN  {VNextName}
    prefix := '';
    fmatch := FALSE;
    REPEAT
        GET_NEXT_ENTRY (cError, prefix, fileName);
        IF cError = eof THEN BEGIN
            VNextName := FALSE;
        END
        ELSE BEGIN
            testName := fileName;
            LowerToUpper (vSavePattern);
            LowerToUpper (testName);
            fmatch := VMatchPattern (vSavePattern, 1, testName, 1);
            VNextName := fmatch;
        END;
    UNTIL ((cError = eof) OR fmatch);
END;  {VNextName}


END.
ÿ