{$S FontStuff}
UNIT FontStuff; { January 1984 }
{*******************************************************************************}
                                    INTERFACE
{*******************************************************************************}

USES
   {$U libsm/UnitStd}  UnitStd,
   {$U libsm/UnitHz }      UnitHz,
   {$U libos/SysCall}      SysCall;

CONST
     spokeFont = 5;
     typerFont = 6;
     paramSize = 8;
     wordSize = 2;
     longSize = 4;
     formatSize = 2;
     chkSumSize = 2;

TYPE
    TPw = ^INTEGER;
    TPl = ^LONGINT;
    TFSmem = ARRAY [0..MAXINT] OF TB;
    TPfsmem = ^TFSmem;

    THistory = 0..255;
    TVariety = 0..127;
    TFormat = PACKED RECORD
       CASE BOOLEAN OF
          TRUE: (c: INTEGER);
          FALSE: (history: THistory;
                  fCompressed: BOOLEAN;
                  variety: TVariety);
    END;
    TPformat = ^TFormat;

    TKshdr = RECORD
       format: TFormat;     {format of KS font i.e. fixed, variable, or special     }
        CASE BOOLEAN OF
            TRUE: (
       chFst: INTEGER;       {char code of first char in KS font                     }
       chLst: INTEGER;       {char code of last char in KS font                      }
       widMax: INTEGER;      {maximum width (dist.) between origins of adjacent char }
       fBBox: INTEGER;       {negative offset from font bounding box in x direc.     }
       fBBoy: INTEGER;       {negative offsets from font bounding box in y direc.    }
       fBBdx: INTEGER;       {extent of the font bounding box in the x direc.        }
       fBBdy: INTEGER;       {extent of the font bounding box in the y direc.        }
       length: INTEGER;      {number of integer words in the strike body             }
       ascent: INTEGER;      {acent of char's in font                                }
       descent: INTEGER;     {descent of char's in font                              }
       leading: INTEGER;     {the amount of white space between lines of text.       }
       raster: INTEGER       {number of integer words / scanline in the ks bitmap    }
                    );
            FALSE: (cbMin: LONGINT;
                     cbMax: LONGINT);
    END; {record TKshdr}
    TPkshdr = ^TKshdr;
    THkshdr = ^TPKshdr;

    TCc = 0..255;
    TWid = 0..255;
    TMpccwid = PACKED ARRAY [TCc] OF TWid;
    TPmpccwid = ^TMpccwid;
    THmpccwid = ^TPmpccwid;

VAR
    output: TEXT;

PROCEDURE InitFontStuff;

FUNCTION RoundUp
    (    num,
         base: LONGINT)
: LONGINT;

PROCEDURE Reposition
   (    srcFile: INTEGER;
        position: LONGINT);

PROCEDURE WriteWord
   (VAR dstFile: INTEGER;
        value: INTEGER);

PROCEDURE WriteFont
    (VAR dstFile: INTEGER;
         pFont: TP;
         wordSize: LONGINT);

FUNCTION FontFileSize
    (VAR srcFile: INTEGER)
: LONGINT;  {size in words}

PROCEDURE ReadFont
   (    srcName: PathName;
    VAR pSrc: TP;
    VAR srcSize: LONGINT);    {srcsize is in words}

PROCEDURE GetFont
   (    srcName: PathName;
    VAR pHeader: TP;
    VAR pLocation: TP;
    VAR pWidths: TP);

PROCEDURE AddCheckSum
    (    pSrc: TP;
         cwords: LONGINT);

FUNCTION ChekSumOk
    (    pSrc: TP;
         cwords: LONGINT)
:BOOLEAN;

PROCEDURE DecodeFont
    (VAR pSrc: TP;
          cbMax,
          cbMin: LONGINT);

PROCEDURE AllocMem
    (VAR p: TP;
          byteSize: LONGINT);

FUNCTION Compact_Font
    (    pUnCompacted,
         pCompacted: TP;
         oldSize: LONGINT;      {size in words}
     VAR newSize: LONGINT)      {size in words}
:BOOLEAN;

{*******************************************************************************}
                                IMPLEMENTATION
{*******************************************************************************}
{$E FS.ERROR.TEXT}

FUNCTION  FMCompress
    (    pSrc,
         pDst: TP;
         lSrcSize: TL)
: TL;
EXTERNAL;

PROCEDURE VXORFont
    (    pFont: TP);
EXTERNAL;

PROCEDURE UnCompress
   (    cbMax,
        cbData: TL;
        pData: TP);
EXTERNAL;

PROCEDURE UnVXORFont
   (    pFont: TP);
EXTERNAL;


{===============================================================================

#######> InitFontStuff

        COMMENT:

        GLOBALS:

===============================================================================}
PROCEDURE InitFontStuff;

BEGIN {InitFontStuff}
    REWRITE (output, 'CONSOLE:');
END; {InitFontStuff}


{===============================================================================

#######> Reposition

        COMMENT:

        GLOBALS:

===============================================================================}
PROCEDURE Reposition
   {(    srcFile: INTEGER;
        position: LONGINT)};
VAR
    junk,
    cError: INTEGER;
    actual: LONGINT;

BEGIN {Reposition}
    READ_DATA (cError, srcFile, ORD (@junk), 0, actual, absolute, position);
    IF cError > 0 THEN BEGIN
        WRITELN (output, 'Error in READ_DATA within Reposition. error was #', cError:1);
    END;
END; {Reposition}


{===============================================================================

#######> RoundUp

        COMMENT:

        GLOBALS:

===============================================================================}
FUNCTION RoundUp
    {(    num,
         base: LONGINT)
: LONGINT};
BEGIN {RoundUp}
    RoundUp := ((num + (base - 1)) DIV base) * base;
END; {RoundUp}


{===============================================================================

#######> AddCheckSum

        COMMENT:  cwords = the number of words in the font excluding the
                     checksum word.

        GLOBALS:

===============================================================================}
PROCEDURE AddCheckSum
    {    pSrc: TP;
         cwords: LONGINT};
VAR
    pw: TPw;
    checkSum: INTEGER;
    i: LONGINT;

BEGIN {AddCheckSum}
    {add the checkSum to the end of the font}
    checkSum := 0;
    FOR i := 1 TO cwords * 2 DO BEGIN
        checkSum := (checkSum + pSrc^) MOD MAXINT;
        pSrc := POINTER (ORD (pSrc) + 1);
    END; {for i}
    {add checksum word}
    pw := POINTER (ORD (pSrc));
    pw^ := checkSum;
END; {AddCheckSum}


{===============================================================================

#######> ChekSumOk

        COMMENT:  cwords = the number of words in the font excluding the
                     checksum word.
        GLOBALS:

===============================================================================}
FUNCTION ChekSumOk
    {(    pSrc: TP;
         cwords: LONGINT)
:BOOLEAN};
VAR
    i: LONGINT;
    checksum: INTEGER;
    pw: ^INTEGER;

BEGIN {ChekSumOk}
    ChekSumOk := TRUE;  {assume the best}
    checksum := 0;
    FOR i := 1 TO cwords * 2 DO BEGIN
        checksum := (checkSum + pSrc^) MOD MAXINT;
        pSrc := POINTER (ORD (pSrc) + 1);
    END; {for i}
    pw := POINTER (ORD (pSrc));
    IF checksum <> pw^ THEN BEGIN
        ChekSumOk := FALSE;
    END;
END; {ChekSumOk}


{===============================================================================

#######> FontFileSize

        COMMENT:

        GLOBALS:

===============================================================================}
FUNCTION FontFileSize
    {(    srcFile: INTEGER)
: LONGINT};  {size in words}

VAR
    kshdr: TKshdr;
    actual: LONGINT;
    cError: INTEGER;
    cbData: LONGINT;

BEGIN {FontFileSize}
    Reposition (srcFile, 0);
    READ_DATA (cError, srcFile, ORD (@kshdr), SIZEOF (TKshdr), actual, sequential, 0);
    IF (cError > 0) THEN BEGIN
        FontFileSize := 0;
        WRITELN (output, 'Error #', cError:1, ' in READ_DATA within FontFileSize.');
    END
    ELSE IF (actual <> SIZEOF (TKshdr)) THEN BEGIN
        FontFileSize := 0;
        WRITELN (output, 'actual <> request after READ_DATA within FontFileSize.');
    END
    ELSE BEGIN
        IF kshdr.format.fcompressed THEN BEGIN
            cbData := kshdr.cbMin;
            IF ODD (cbData) THEN BEGIN
                FontFileSize := (cbData + formatSize + paramSize + chkSumSize + 1) DIV 2;
            END
            ELSE BEGIN
                FontFileSize := (cbData + formatSize + paramSize + chkSumSize) DIV 2;
            END;
        END
        ELSE BEGIN
            WITH kshdr DO BEGIN
                cbData := (8 + length + 2 + chLst - chFst) * 2;
            END; {with kshdr}
            FontFileSize := (cbData + chkSumSize) DIV 2;
        END; {else}
    END;
    Reposition (srcFile, 0);
END; {FontFileSize}


{===============================================================================

#######> ReadFont

        COMMENT:

        GLOBALS:

===============================================================================}
PROCEDURE ReadFont
   {    srcName: PathName;
    VAR pSrc: TP;
    VAR srcSize: LONGINT};

VAR
    actual,
    byteSize: LONGINT;
    cError,
    srcFile: INTEGER;

BEGIN {ReadFont}
    OPEN (cError, srcName, srcFile, [dread]);
    IF cError = 0 THEN BEGIN
        srcSize := FontFileSize (srcFile);
        byteSize := srcSize * 2;
        READ_DATA (cError, srcFile, ORD (pSrc), byteSize, actual, sequential, 0);
        IF (cError > 0) THEN BEGIN
            WRITELN (output, 'Error #', cError:1, ' in READ_DATA within ReadFont.');
            WRITELN (output, 'name: "', srcName, '", fileNum: ',
                      srcFile, ',size: ', byteSize);
            pSrc := NIL;
        END
        ELSE IF (actual <> byteSize) THEN BEGIN
            WRITELN (output, 'actual ­ request after READ_DATA within ReadFont.');
            pSrc := NIL;
            WRITELN (output, 'name: "', srcName, '", fileNum: ',
                      srcFile, ',size: ', byteSize);
        END;
        CLOSE_OBJECT (cError, srcFile);
    END {if}
    ELSE BEGIN
        WRITELN (output, 'Error in OPEN. error #', cError:1, ' on file "', srcName, '"');
            WRITELN (output, 'name: "', srcName, '", fileNum: ',
                      srcFile, ',size: ', byteSize);
        pSrc := NIL;
    END;
END; {ReadFont}


{===============================================================================

#######> GetFont

        COMMENT:

        GLOBALS:

===============================================================================}
PROCEDURE GetFont
   {(    srcName: PathName;
    VAR pHeader: TP;
    VAR pLocation: TP;
    VAR pWidths: TP)};

VAR
    pkshdr: TPkshdr;
    srcFile,
    cError: INTEGER;
    srcSize,
    realSize: LONGINT;
    bytesToLoc,
    bytesToOff: INTEGER;

BEGIN {GetFont}
    OPEN (cError, srcName, srcFile, [dread]);
    IF cError <= 0 THEN BEGIN
        srcSize := FontFileSize (srcFile);
        CLOSE_OBJECT (cError, srcFile);
        AllocMem (pHeader, srcSize * 2);
        ReadFont (srcName, pHeader, realSize);
        IF pHeader <> NIL THEN BEGIN
            pkshdr := POINTER (ORD (pHeader));
            WITH pkshdr^ DO BEGIN
                bytesToLoc := ((raster * fbbdy) + 13) * 2;
                bytesToOff := (length + 8) * 2;
                pLocations := POINTER (ORD (pHeader) + bytesToLoc);
                pWidths := POINTER (ORD (pHeader) + bytesToOff);
            END;
            IF realSize <> srcSize THEN WRITELN ('Help! the sizes didn''t match');
        END
        ELSE BEGIN
            WRITELN (output, 'The font cannot be read.');
            EXIT (GetFont);
        END;
    END
    ELSE BEGIN
        WRITELN (output, 'OPEN error #', cError:1, ' on file "', srcName, '"');
        EXIT (GetFont);
    END;
END; {GetFont}



{===============================================================================

#######> DecodeFont

        COMMENT:

        GLOBALS:

===============================================================================}
PROCEDURE DecodeFont
    {(VAR pSrc: TP;
           cbMax,
           cbMin: LONGINT)};

VAR
    pkshdr: TPkshdr;
    rgchDst,
    rgchSrc: TRgch;

BEGIN {DecodeFont}
    {shift the data over the uncompressed parameters after the format}
    rgchDst := POINTER (ORD (pSrc) + formatSize);
    rgchSrc := POINTER (ORD (pSrc) + formatSize + paramSize);
    MoveRgch (rgchDst, rgchSrc, cbMin);

    UnCompress (cbMax, cbMin, POINTER (ORD (rgchDst)));

    pkshdr := POINTER (ORD (pSrc));  {type cheat}
    IF NOT ((pkshdr^.format.variety = typerFont)
           OR
           (pkshdr^.format.variety = spokeFont)) THEN BEGIN
        UnVXORFont (pSrc);
    END; {if}
END; {DecodeFont}

{===============================================================================

#######> WriteWord

        COMMENT:

        GLOBALS:

===============================================================================}
PROCEDURE WriteWord
   {VAR dstFile: INTEGER;
        value: INTEGER};
VAR
    actual: LONGINT;
    cError: INTEGER;

BEGIN {WriteWord}
    WRITE_DATA (cError, dstFile, ORD (@value), 2, actual, sequential, 0);
    IF cError > 0 THEN BEGIN
        WRITELN (output, 'Error in WRITE_DATA within WriteWord. error was #', cError:1);
    END;
END; {WriteWord}


{===============================================================================

#######> WriteFont

        COMMENT:

        GLOBALS:

===============================================================================}
PROCEDURE WriteFont
    {VAR dstFile: INTEGER;
         pFont: TP;
         wordSize: LONGINT};
VAR
    actual: LONGINT;
    cError: INTEGER;

BEGIN {WriteFont}
    WRITE_DATA (cError, dstFile, ORD (pFont), wordSize * 2, actual, sequential, 0);
    IF cError > 0 THEN BEGIN
        WRITELN (output, 'Error in WRITE_DATA within WriteFont. error was #', cError:1);
    END;
END; {WriteFont}


{===============================================================================

#######> AllocMem

        COMMENT:

        GLOBALS:

===============================================================================}
PROCEDURE AllocMem
    {(VAR p: TP;
          byteSize: LONGINT)};

VAR
    i,
    numChunks: INTEGER;
    ptemp: TPfsmem;

BEGIN {AllocMem}
    numChunks := byteSize DIV MAXINT;
    NEW (ptemp);
    p := POINTER (ORD (ptemp));
    FOR i := 1 TO numChunks - 1 DO BEGIN
        NEW (ptemp);
    END; {for i}
END; {AllocMem}


{===============================================================================

#######> FontOk

        COMMENT:

        GLOBALS:

===============================================================================}
FUNCTION FontOk
    (    pUnCompacted,
         pCompacted: TP;
         cbData,
         cbMax: LONGINT)
:BOOLEAN;

CONST
    bufSize = $19000;  {100k}

VAR
    i,
    cbLim,
    cbLst: TL;
    rgchDst,
    rgchSrc: TRgch;
    pO,
    pC,
    pCopy: TP;
    pkshdr: TPkshdr;

BEGIN {FontOk}
    WRITELN ('Checking compression...');
    IF cbData >= cbMax THEN BEGIN
       WRITE (output, '<file did not compress correctly.');
       WRITELN (output, ' cbData >= cbMax>');
       FontOk := FALSE;
       EXIT (FontOk);
    END;
    {make a copy of the font}
    AllocMem (pCopy, bufSize);
    rgchDst := POINTER (ORD (pCopy));
    rgchSrc := POINTER (ORD (pCompacted));
    cbLst := cbData + formatSize + paramSize;
    MoveRgch (rgchDst, rgchSrc, cbLst);

    {shift the data over the uncompressed parameters after the format.}
    rgchDst := POINTER (ORD (pCopy) + formatSize);
    rgchSrc := POINTER (ORD (pCopy) + formatSize + paramSize);
    MoveRgch (rgchDst, rgchSrc, cbData);
    UnCompress (cbMax, cbData, POINTER (ORD (rgchDst)));

    pkshdr := POINTER (ORD (pCopy));
    pkshdr^.format.fcompressed := FALSE;
    IF NOT ((pkshdr^.format.variety = typerFont)
          OR
          (pkshdr^.format.variety = spokeFont)) THEN BEGIN
        WITH pkshdr^ DO BEGIN
            IF ((ascent = 0) AND (descent = 0))
                OR
                (length = 0)
                OR
                (widMax = 0) THEN BEGIN
                WRITELN (output, '<The font header was corrupted - compression won''t work>');
                FontOk := FALSE;
                Release (pCopy);
                EXIT (FontOk);
            END
            ELSE BEGIN
                UnVXORFont (pCopy);
            END;
        END; {with pkshdr^}
    END; {if}

    pO := pUnCompacted;
    pC := pCopy;
    FOR i := 1 TO cbMax DO BEGIN
       IF pO^ <> pC^ THEN BEGIN
         WRITELN (output, '<file did not compress correctly. Failed @', i:1,'>');
         FontOk := FALSE;
         Release (pCopy);
         EXIT (FontOk);
       END;
       pO := POINTER (ORD (pO) + 1);
       pC := POINTER (ORD (pC) + 1);
    END; {for}
    FontOk := TRUE;
    Release (pCopy);
END; {FontOk}


{===============================================================================

#######> Compact_Font

        COMMENT:

        GLOBALS:

===============================================================================}
FUNCTION Compact_Font
    {(   pUnCompacted: TP;
         pCompacted: TP;
         oldSize: LONGINT;
     VAR newSize: LONGINT)
:BOOLEAN};
VAR
    pSrc,
    pDst: TP;
    pwSrc,
    pwDst: TPw;
    plSrc,
    plDst: TPl;
    pformat: TPformat;
    checkSum: INTEGER;
    cbData,
    cbMax: LONGINT;

BEGIN {Compact_Font}
    pformat := POINTER (ORD (pUnCompacted));
    IF NOT ((pformat^.variety = typerFont)
           OR
           (pformat^.variety = spokeFont)) THEN BEGIN
        VXORFont (pUnCompacted);
    END; {if}

    {allow room for compressed font parameters in file header}
    pDst := POINTER (ORD (pCompacted) + formatSize + paramSize);
    pSrc := POINTER (ORD (pUnCompacted) + formatSize);

    {NOTE: the cbMax parameter to FMCompress MUST be rounded up to the}
    {nearest multiple of 8. cbMax will equal the bytes of data to be compressed.}
    cbMax := RoundUp ((oldSize * 2) - formatSize, 8);
    cbData := FMCompress (pSrc, pDst, cbMax);

    {if we XOR'd the uncompacted font - UnXor it so it will be in its original state}
    IF NOT ((pformat^.variety = typerFont)
           OR
           (pformat^.variety = spokeFont)) THEN BEGIN
        UnVXORFont (pUnCompacted);
    END; {if}

    {put the format word at the beginning of the compacted font and update}
    {the parameters}
    pwDst := POINTER (ORD (pCompacted));
    pwDst^ := pformat^.c;
    pformat := POINTER (ORD (pCompacted));
    pformat^.fcompressed := TRUE;
    plDst := POINTER (ORD (pCompacted) + formatSize);
    plDst^ := cbData;
    plDst := POINTER (ORD (plDst) + longSize);
    plDst^ := cbMax;

    IF FontOk (pUnCompacted, pCompacted, cbData, cbMax) THEN BEGIN
        newSize := cbData + formatSize + paramSize;
        IF ODD (cbData) THEN BEGIN
            newSize := newSize + 1;
        END;
        newSize := newSize DIV 2;  {we want the size in words}
        AddCheckSum (pCompacted, newSize);
        newSize := newSize + 1;  {add the checksum word}
        Compact_Font := TRUE;
    END
    ELSE BEGIN
        AddCheckSum (pUnCompacted, oldSize);
        newSize := oldSize + 1;  {add the checksum word}
        Compact_Font := FALSE;
    END;
END; {Compact_Font}

END. {FontStuff}
ÿ