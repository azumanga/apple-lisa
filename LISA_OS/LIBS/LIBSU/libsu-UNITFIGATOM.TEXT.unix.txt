{$R-}

UNIT UnitFigAtom;

(* Copyright 1983, Apple Computer Inc. *)

INTRINSIC SHARED;

{ tjm  5/25/83 -- created }


INTERFACE

USES
     {$U libsm/UnitStd    } UnitStd,
     {$U libsm/UnitHz     } UnitHz,
     {$U libos/SysCall    } SysCall,
     {$U libsu/UnitFile   } UnitFile,
     {$U libqd/QuickDraw  } QuickDraw,
     {$U libfm/FontMgr    } FontMgr,
     {$U libqd/Storage    } Storage,
     {$U libsu/UnitFmt    } UnitFmt,
     {$U libpm/PmDecl     } PmDecl,
     {$U libpr/PrStdInfo  } PrStdInfo,
     {$U libsu/UnitCS     } UnitCS;

CONST
    {$IFC NOT fDbgOk} fTstFig = FALSE; {$ENDC}
    tyfilFig = -13143;
    verFigCur = 1;
    cErrFilNotValid = 5100;

TYPE
   TCsfig = RECORD
           cs: TCs;
           ifil: TB;
           END;
   TPcsfig = ^TCsfig;
   THcsfig = ^TPcsfig;

VAR
    cspdFig: TCspd;
{$IFC fDbgOk}
   fTstFig: TF;
{$ENDC}


PROCEDURE PxHcsfig         (hcsfig: THcsfig);
FUNCTION  IcsFigCreate (VAR cError: TC; path: Pathname; setaccess: TSetaccess;
                         hz: THz; password: E_name) : TB;
PROCEDURE FreeFigIcs       (ics: TB);
PROCEDURE FigFindLpFixed   (ics: TB; lp: TLp; VAR lpFixed: TLp);
FUNCTION  LpFigAdd         (ics: TB; hpic: THpic) : TLp;
PROCEDURE SeqLpdFig (lpd: TLpd; VAR achad: TAChad);
FUNCTION  IfilOfFig (icsFig: TB): TB;
PROCEDURE InitFig;


IMPLEMENTATION

{$IFC fSymOK }
{$D+ }
{$ELSEC }
{$D- }
{$ENDC }


VAR xOrYDummy: TCd;

FUNCTION FInSet(element: TW; setof: TW): TF; EXTERNAL;


{$S SUlwop1}
{----------------}
PROCEDURE InitFig;
{----------------}
VAR cError: TC;
    spPath: String255;
BEGIN
{$IFC fTraceSU}    LogCall;     {$ENDC}
  WITH cspdFig DO
    BEGIN
    argproc[iprocSeqLpd]       := @SeqLpdFig;
    argproc[iprocFindLpFixed]  := @FigFindLpFixed;
    argproc[iprocCrd]          := pointer(procNil);
    argproc[iprocFreeIcs]      := @FreeFigIcs;
    argproc[iprocFSelLpBounds] := @TrueStdSelLpBounds;
    argproc[iprocPxHcs]        := @PxHcsfig;
    argproc[iprocHilight]      := pointer(procNil);
    argimgp[iimgpScrn]         := pointer(procNil);
    argimgp[iimgpQume]         := pointer(procNil);
    END;
END;

{$S SUfig}
{----------------------------------------------------------------}
PROCEDURE SeqLpdFig {lpd: TLpd; VAR achad: TAChad};
{----------------------------------------------------------------}
VAR hcsfig: THcsfig;
    lp: TLp;
BEGIN
{$IFC fTraceSU}    LogCall;     {$ENDC}
hcsfig := POINTER(ORD(rghcs^[lpd^.ics]));
IF hcsfig^^.cs.tycs <> tycsFig THEN Break(109);
lp := lpd^.lpLim;
lpd^.lp := lp;
lpd^.figd.n := NFromIfilIb(hcsfig^^.ifil, lp);
lpd^.figd.ppic := POINTER(ORD(PMapN(hcsfig^^.cs.hz, lpd^.figd.n)));
IF lpd^.figd.ppic <> NIL THEN
     lp := lp + 1;
lpd^.lpLim := lp;
END;

{$S SUfig}
{-------------------------------}
PROCEDURE FreeFigIcs { (ics: TB) };
{-------------------------------}
VAR hcsfig: THcsfig; rgh: TRgh; cError: TC;
BEGIN
{$IFC fTraceSU}    LogCall;     {$ENDC}
hcsfig := POINTER(ORD(rghcs^[ics]));
CleanIfil(cError, hcsfig^^.cs.hz, hcsfig^^.ifil, FALSE);
IF cError > 0 THEN BEGIN {Your guess is as good as mine} END;
CloseIfil(cError, hcsfig^^.ifil);
IF cError > 0 THEN BEGIN {Your guess is as good as mine} END;
rgh := POINTER(ORD(rghcs));
FreeBk(rghcs^[ics]^^.hz, rgh^[ics], tybkStd);
rgh^[ics] := hNil;
END;

{$S SUlwop1}
{----------------------------------------------------------------}
FUNCTION IcsFigCreate { (VAR cError: TC; path: Pathname; setaccess: TSetaccess;
                         hz: THz; password: E_name) : TB };
{----------------------------------------------------------------}
VAR hcsfig: THcsfig; ifil: TB; icsFig: TB;
    vofil: TVofil;
BEGIN
{$IFC fTraceSU}    LogCall;     {$ENDC}
ifil := IfilOpen(cError, path, 0, setaccess, hz, password);
IF cError > 0 THEN
     icsFig := icsNil
ELSE BEGIN
     icsFig := IcsCreate(tycsFig, SIZEOF(TCsfig), hz);
     rghcs^[icsFig]^^.cspd := cspdFig;
     hcsfig := POINTER(ORD(rghcs^[icsFig]));
     hcsfig^^.ifil := ifil;
     IF Append IN setaccess THEN
          SetTyfilVer(ifil, tyfilFig, verFigCur)
     ELSE BEGIN
          GetVofil(ifil, vofil);
          IF (vofil.tyfil <> tyfilFig) OR (vofil.ver > verFigCur) THEN
               BEGIN
               cError := cErrFilNotValid;
               FreeIcs(icsFig);
               icsFig := icsNil;
               END;
          END;
     END;
IcsFigCreate := icsFig;
END;

{$S SUfig}
{---------------------------------------------}
FUNCTION  LpFigAdd{ics: TB; hpic: THpic) : TLp};
{---------------------------------------------}
VAR hcsfig:    THcsfig;
    cb: TC;
    f: TF; cBkStd: TC;
BEGIN
{$IFC fTraceSU}    LogCall;     {$ENDC}
hcsfig := POINTER(ORD(rghcs^[ics]));
IF hcsfig^^.cs.tycs <> tycsFig THEN Break(109);
cb := CbDataOfH(HzFromH(POINTER(ORD(hpic))), POINTER(ORD(hpic)));
LpFigAdd := IvodAdd(hcsfig^^.ifil, POINTER(ORD(hpic)), cb);
IF fTstFig THEN
     BEGIN
     PxHcsfig(hcsfig);
     f := FCheckHzOk(hcsfig^^.cs.hz, cBkStd);
     WRITELN('After IvodAdd heap verifies: ', f);
     END;
END;

{$S SUfig}
{--------------------------------------------------------------}
PROCEDURE FigFindLpFixed { (ics: TB; lp: TLp; VAR lpFixed: TLp) };
{--------------------------------------------------------------}
BEGIN
{$IFC fTraceSU}    LogCall;     {$ENDC}
lpFixed := lp;
END;

{$S SUfig}
{---------------------------------}
FUNCTION IfilOfFig {(icsFig: TB): TB};
{---------------------------------}
VAR
  hcsfig: THcsfig;
BEGIN
{$IFC fTraceSU}    LogCall;     {$ENDC}
IF icsFig<>icsNil THEN
   IF rghcs^[icsFig]^^.tycs=tycsFig THEN BEGIN
      hcsfig := POINTER(ORD(rghcs^[icsFig]));
      IfilOfFig := hcsfig^^.ifil;
      END
   ELSE BEGIN
      break(1630);
      IfilOfFig := 0;
      END
ELSE BEGIN
   break(1631);
   IfilOfFig := 0;
   END;
END;  {IfilOfFf}

{$S SegPxScr}
{-----------------------------------}
PROCEDURE PxHcsfig { (hcsfig: THcsfig) };
{-----------------------------------}
VAR ifig:    TC;
BEGIN
{$IFC fTraceSU}    LogCall;     {$ENDC}
{$IFC fDbgOk}
WRITELN('hcsfig: ', ORD(hcsfig), ', pcsfig: ', ORD(hcsfig^));
WITH hcsfig^^ DO
   BEGIN
   WRITELN('  ifil:', ifil:3);
   END;
{$ENDC}
END;



END.



ÿ