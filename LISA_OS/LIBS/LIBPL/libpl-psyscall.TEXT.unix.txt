
UNIT psyscall;                  (* privileged system call definitions unit *)
INTRINSIC;

INTERFACE

  (*$U object/syscall.obj *)
  USES syscall;

const buff_too_small = 1158;
      e_sdubd = 1159;
      ddev_too_small = 1160;
      inv_shutdown_mode = 1161;
      pwr_already_off = 1162;
      badcmd_err = 1163;
      nottwig_err = 1164;
      notmounted_err = 1165;
      alreadymounted_err = 1166;
      notblockstr_err = 1167;

      maxILFile = 64;   { maximum intrinsic library file number }


  type
    vers_info = record  (* version information record *)
                  PPrim_V : integer;
                  PM_V :    integer;
                  GDV :     integer;
                  MMPrimV : integer;
                  MMV :     integer;
                  DSV :     integer;
                  ExprmV :  integer;
                  ExmgrV :  integer;
                  ECV :     integer;
                  TimeV :   integer;
                  VMV :     integer;
                  SFV :     integer;
                  PrimV :   integer;
                  UIV :     integer;
                  InitV :   integer;
                  CUR_V :   integer;
                  OSVers :  integer
                end;


     ut_commands = (no_op,
                    initvol,
                    zap,
                    dumpdata,
                    setfstrace,
                    fsscavenge,
                    writeBT,
                    format,
                    verify,
                    eject,
                    flushbuffers,
                    boot_unmount,
                    boot_remount,
                    copy_volume,
                    mount_BD,
                    xfer_passwd,
                    gp );

     sm_type = (restart_shell, reset_machine, kill_power);

     ScvOptions = set of ( no_abort, no_kill, no_discard, no_pipes );

     xfer_op = (pswRead, pswWrite);

     ut_parmt = record
                  gp_parm : longint;
                  case command : ut_commands of

                    no_op,
                    flushbuffers,
                    boot_remount : (                           );

                    initvol      : (idev_name : e_name;
                                    pages : longint;
                                    newvolname : e_name;
                                    newpassword : e_name;
                                    max_sfiles : integer       );

                    zap,
                    writeBT,
                    format,
                    verify,
                    eject        : (dev_name : e_name          );

                    dumpdata     : (ddev_name : e_name;
                                    pagenum : longint          );

                    setfstrace,
                    boot_unmount : (level : integer            );

                    fsscavenge   : (sdev_name : e_name;
                                    soptions : ScvOptions      );


                    copy_volume  : (from_dev : e_name;
                                    to_dev   : e_name;
                                    buffaddr : longint;
                                    buffsize : longint         );

                    mount_BD     : (mon_unitnum : integer;
                                    twig_unitnum : integer     ); (*
                                     = UPPER *)
                                                                  (* 2 = LOWER *)
                    xfer_passwd  : (path     : pathname;
                                    password : e_name;
                                    op       : xfer_op );

                    gp           : (funct : integer;
                                    parm1 : longint;
                                    parm2 : longint;
                                    parm_array : array[0..15] of longint )

                  end;


    ioop = (readop, writeop);

    intrnl_io_type =  (with_header,without_header,raw_io,chained_hdrs,zero_all,
                        header_only);
    disk_io_type = with_header..chained_hdrs;

    refnum_type = (frefnum, dsrefnum, ecrefnum);

    openrec = record                              (* open list info record *)
                procid : longint;
                refnum : integer;
                refntype : refnum_type;
                globalrefn : boolean;
              end;



    { Intrinsic Library File # list }

    lFileRange = 1..maxILFile;
    lf_list = packed array[lFileRange] of boolean;   { list of library files used
                                                       by a program }



  procedure POPEN (var ecode : integer;
                    var path : pathname;
                  var refnum : integer;
                       manip : mset;
                 var allowed : boolean  );

  procedure protect (var ecode : integer;
                      var path : pathname;
                      ismaster : boolean;
                   m_serial_no : longint   );

  procedure get_serial_no (var ecode : integer; var s_no : longint);

  procedure GET_OPEN_LIST (var ecode : integer; var devname : e_name;
                           var openinfo : openrec);

  procedure fs_utilities (var ecode : integer; var parms : ut_parmt);  (* replaces OSVM *)

  procedure list_versions (var info : vers_info);

  procedure lockseg (var errnum: integer);

  procedure unlocksegs (var errnum: integer);

  procedure unitio (var errnum : integer; devnum : integer; bufadr : longint;
                    numblocks : longint; blocknum : longint;var actual : longint;
                    mode : disk_io_type; op : ioop);
                        (* a subsitute routine for unitread and unitwrite *)

  procedure set_time (var ecode : integer;  time : time_rec);

  procedure Change_Directory (var errnum : integer;  restartShell : boolean);

  procedure Sys_Stat(var errnum: integer; funct: integer; parmaddr: longint);

  procedure Size_Stack(var errnum: integer; delta_size: longint);

  procedure List_LibFiles (var errnum : integer;  var progfile : pathname;
                           var file_list : lf_list);

  procedure LibFileName (var errnum : integer;  lf_num : integer;
                         var lf_name : pathname);

  procedure Set_DebugMode (var errnum : integer;  on_off : boolean);

  procedure pset_file_info ( var ecode  : integer;
                                 refnum : integer;
                                 fsi    : fs_info );

  procedure pset_vol_info ( var ecode  : integer;
                                path   : pathname;
                                fsi    : fs_info );

  procedure MAKE_SECURE ( var ecode  : integer;
                          var path   : pathname;
                          var passwd : e_name );

  procedure KILL_SECURE ( var ecode  : integer;
                          var path   : pathname;
                          var passwd : e_name );

  procedure OPEN_SECURE ( var ecode  : integer;
                          var path   : pathname;
                          var refnum : integer;
                              manip  : mset;
                          var passwd : e_name );

  procedure RENAME_SECURE ( var ecode   : integer;
                            var path    : pathname;
                            var newName : e_name;
                            var passwd  : e_name );

  procedure VERIFY_PASSWORD ( var ecode  : integer;
                               var path   : pathname;
                               var passwd : e_name );

  procedure CHANGE_PASSWORD ( var ecode     : integer;
                              var path      : pathname;
                              var oldPasswd : e_name;
                              var newPasswd : e_name );




IMPLEMENTATION

  procedure popen;  external;

  procedure protect;  external;

  procedure get_serial_no;  external;

  procedure get_open_list;  external;

  procedure fs_utilities;  external;    (* replaces old OSVM *)

  procedure list_versions;  external;

  procedure lockseg; external;

  procedure unlocksegs; external;

  procedure unitio;  external;

  procedure set_time;  external;

  procedure Change_Directory;  external;

  procedure Sys_Stat; external;

  procedure Size_Stack;  external;

  procedure List_LibFiles;  external;

  procedure LibFileName;  external;

  procedure Set_DebugMode; external;

  procedure pset_file_info; external;

  procedure pset_vol_info; external;

  procedure make_secure; external;

  procedure kill_secure; external;

  procedure open_secure; external;

  procedure rename_secure; external;

  procedure verify_password; external;

  procedure change_password; external;

END.

ÿ