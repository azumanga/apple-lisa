; File: PASINIT.TEXT
; Date: 09-Oct-81, Modified : 8-Dec-81
;

;        .PROC   %%%INIT

;        .DEF    %_BEGIN,%_END,%_INIT
;        .def    %_SetIOFilePtr

        .include        libpl/paslibequs.text


;
; %_BEGIN - The initial routine when executing under UCSD
;
; Upon entry the stack is:
;
; |-----------|
; | ^$$FIRST  |         Note : This is not true in OS environment.
; |  Segbank  |
; |  Old A6   |
; |  Old A5   |
; |  Old A4   |
; |  Old A3   |
; |  Old A2   |
; |  Old D7   |
; |  Old D6   |
; |  Old D5   |
; |  Old D4   |
; |  Old D3   |
; | ^ output  |
; |  ^ input  |
; | Ret. Addr |
; | Ret. Addr | <-- SP
; |-----------|
;

        .PROC   %_BEGIN

        RTS

;
; Once the main program has done a:
;
;       LINK    #xxx,A5
;
; the stack will be:
;
; |-----------|    +62
; | ^$$FIRST  |    +58          Note : This is not true in OS environment.
; |  Segbank  |    +56
; |  Old A6   |    +52
; |  Old A5   |    +48
; |  Old A4   |    +44
; |  Old A3   |    +40
; |  Old A2   |    +36
; |  Old D7   |    +32
; |  Old D6   |    +28
; |  Old D5   |    +24
; |  Old D4   |    +20
; |  Old D3   |    +16
; | ^ Output  |    +12
; |  ^ Input  |     +8
; | Ret. Addr |     +4
; |  Old A5   | <-- A5
; |-----------|
; |    ...    |
; |  Globals  |
; |    ...    |
; |-----------| <-- SP
;

;
; %_END - The Final Routine when executing under UCSD
;

        .PROC   %_END

        RTS

;
; The resulting stack is:
;
; |-----------|
; | ^$$FIRST  |                 Note : This is not true in OS environment.
; |  Segbank  |
; |  Old A6   |
; |  Old A5   |
; |  Old A4   |
; |  Old A3   |
; |  Old A2   |
; |  Old D7   |
; |  Old D6   |
; |  Old D5   |
; |  Old D4   |
; |  Old D3   |
; | ^ output  |
; |  ^ input  |
; | Ret. Addr |
; | Ret. Addr | <-- SP
; |-----------|
;

;
; %_INIT - Initialization routine for every program
;
; Note : with current resident program scheme, the main program must have the
;   following preemble and postemble
;       JSR     %_BEGIN
;       LINK    A6,#0
;       MOVE.L  (A7)+,A6        ; for Lisabug to find preemble
;       LINK    A5,#0
;       SUBA.L  $10(A5),A7      ; reserve space for unit global data
;       JSR     %_INIT
;       ...                     ; program code
;
;       JSR     %_TERM          ; should terminate the process here
;       UNLK    A5              ; the following is not executed on OS.
;       JSR     %_END
;       RTS
;       UNLK    A6
;       RTS
;
;  If this code is no longer true, %_init must be changed to make resident work.
;
;


        .PROC   %_INIT
        .include        libpl/paslibdefs.text
        .if     libproducing=appaslib
        .ref    init_excep, %_pphhpreinit, %_pphhreinit, %_blockiosetup
        .ref    force_term_excep
        .ref    %_initfp
        .endc

        TST.W   stkspace(A7)            ; force stack expansion, if needed

        .if     libproducing=appaslib

        lea     def_fline,a0            ; get default f-line trap routine address
        move.l  a0,d0
        andi.l  #$ffffff,d0             ; get 24 bits only
        ori.l   #iujmpop,d0             ; put the iujmp op code in front
        move.l  d0,flineoffset(a5)      ; put 'iujmp def_fline' into the proper
                                        ; offset from a5

; at this point, the stack should have just the return pc from main prog
                                        ; set up environment record
        move.l  sp,-(sp)                ; sp_init
        move.l  4(sp),-(sp)             ; pc_retinit
        pea     PC2Blockiosetup         ; pc_2setup
        move.l  a6,-(sp)                ; a6_init
        move.b  #1,-(sp)                ; firsttime := true
        pea     2(sp)                   ; address of regis param
        jsr     %_blockiosetup          ; first call to blockiosetup, in blockio
        adda.l  #sizeenvir,sp           ; pop envir record

        jsr     init_excep              ; in oslib to initialize syslocal cell
        jsr     %_pphhpreinit           ; in pasheap to init heap pointer

PC2Blockiosetup                         ; resident program restarts from here
        clr.b   -(sp)                   ; firsttime := false;
        pea     2(sp)                   ; address of regis param, not used
        jsr     %_blockiosetup            ; second call and restart init call

        jsr     %_pphhreinit            ; reinit the heap
        move.l  fpptr_data(a5),d0       ; pointer to fplib unit's data
        ble     @1                      ; nil or bad pointer - fplib not linked
        move.l  d0,-(sp)                ; pointer argument
        jsr     %_initfp                ; in fpinit
@1
        .endc

        RTS
;

; The follow rouitne will be entered when f-line trap occurs in a process
; that does not use the floating point library routines

        .if     libproducing=appaslib
exdatasize      .equ    48              ; excep_data has 48 bytes
line_1111       .equ    27              ; excep_kind in the excep_data for
                                        ; f-line trap
def_fline                               ; default f-line trap handler routine
        move.l  #exdatasize,d0          ; exception data block size
        suba.l  d0,sp                   ; set sup space for it on stack
        move.l  #line_1111,(sp)         ; excep_kind = line_1111
        move.w  sr,4(sp)                ; save sr
        move.l  a0,6(sp)                ; save user's pc
        move.l  sp,-(sp)                ; address of excep_data
        jsr     force_term_excep        ; system call to froce termination
                                        ; with excep_data passed to terminate
                                        ; exception handler
                                        ; This will never return
        .endc



;
; PROCEDURE %_SetIOFilePtr (infptr , outfptr : longaddr);
;                         {set i/o file pointers in 8/12 offset from A5}
;

        .PROC   %_SetIOFilePtr

        move.l  (SP)+,A0                ; return pc
        move.l  (SP)+,outputfoffset(A5) ; outfptr par
        move.l  (SP)+,inputfoffset(A5)  ; infptr par
        jmp     (A0)                    ; return


        .END





ÿ