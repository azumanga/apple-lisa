(*********************************************************************************)
(*                                                                               *)
(*  (c) copyright 1983  Apple Computer Inc.                                      *)
(*                                                                               *)
(*********************************************************************************)
program  BlessVolume;

USES  {$U libos/syscall.obj }   syscall,
      {$U libos/psyscall.obj}  psyscall;

const
     GET_DEV_NO = 3;
     TWIGGY_MDDF_LOC = 41;
     PROFILE_MDDF_LOC = 30;
     BLESS_MARK = -1;
     ZAP_OLD_VERSION = -14;
     ZAP_FS_VERSION = -15;
     MDDF_ADDR = 0;
     BLOCK_SIZE = 536;
     JOE_SENT_ME = {'jeksw'} 'nqwlwg';
     ALREADY_UNMOUNTED = 1062;

type
    rec_param_mem = record
                        updateF: boolean;
                        parm_mem: array[1..32] of integer
                        end;

    mountstate = (mountundefined,
                  defmounted,
                  realmounted,
                  fsmounted,
                  unmounted,
                  temp_mounted,
                  temp_unmounted,
                  mountpending,
                  unmountpending,
                  diagnostic,
                  mounterror);

     TMDDF = record
             fsversion    : integer;
             volid        : UID;
             volnum       : integer;
             volname      : string [max_ename];
             password     : string [max_ename];
             init_machine_id : longint;     (* machine initialized on *)
             master_machine_id : longint;   (* for theft protection *)
             DT_created   : longint;        (* original creation date *)
             DT_copy_created : longint;     (* date THIS copy made *)
             DT_copied    : longint;        (* date this vol was backed up *)
             DT_scavenged : longint;
             copy_thread : longint; (* incremented each time on a new copy *)
             geography : record
               firstblock : longint;    (* abs block number of first block *)
               lastblock  : longint;    (* abs block number of last  block *)
               lastfspage : longint;    (* abs page number of last fs page *)
             end;
             blockcount: longint;     (* number of blocks on disk   *)
             blocksize : integer;     (* bytes per block, often 512 *)
             datasize  : integer; (* data bytes per block *)
             cluster_size:integer;(* # of blocks per cluster on disk *)
             MDDFaddr  : longint; (* page where MDDF starts *)
             MDDFsize  : integer; (* size in bytes of MDDF *)
             bitmap_addr:longint; (* page where bit map starts *)
             bitmap_size:longint;(* size in bits of allocation bit map *)
             bitmap_bytes:integer; (* size in bytes of alloc. bit map *)
             bitmap_pages:integer; (* number of data pages for bitmap bytes *)
             slist_addr : longint; (* page where s-file list begins *)
             slist_packing:integer;(* number of s_entries per block in slist *)
             slist_block_count:integer; (* number of data blocks in slist file *)
             first_file: integer;  (* fid of minimum non-initial s-file *)
             empty_file: integer;  (* minimum fid of all unused s-file ids *)
             maxfiles  : integer;(* max s-file index on this device *)
             hintsize  : integer;      (* number of pages in s-file hints *)
             leader_offset : integer;  (* page offset of leader in file hints *)
             leader_pages  : integer;  (* number of pages in file leader *)
             flabel_offset  : integer;  (* byte offset of file label in first hint page *)
             unusedi1  : integer;  (* spare field *)
             map_offset    : integer;  (* page offset of first file map page *)
             map_size      : integer;  (* number of file map entries per page *)
             filecount : integer;  (* current number of s-files allocated *)
             freestart : longint; (* start of free page search in bit map *)
             unusedl1 : longint;   (* spare field *)
             freecount : longint; (* number of free pages in list *)
             rootsnum  : integer; (* s-file number of root catalog file *)
             rootmaxentries : integer; (* maximum number of centry in root cat *)
             mountinfo : mountstate;   (* info about mount state of volume *)
             overmount_stamp : UID; (* UID of temp overmount op *)
             pmem_id : longint;     (* machine ID for this copy of param mem *)
             pmem : rec_param_mem; (* temp parameter memory *)
             vol_scavenged : boolean;  (* volume modified by scavenger *)
             tbt_copied : boolean;     (* set on newly tbt copied disk vol *)

             smallmap_offset : integer;  (* byte offset of fmap in hint page *)
             hentry_offset : integer;  (* byte offset of hentry in hint page *)
             backup_volid : UID;   (* volume that this volume backs-up *)
             flabel_size : integer;  (* byte size of file label *)
             fs_overhead : integer;  (* per-volume file system space overhead *)
             result_scavenge : integer;  (* result of last scavenge *)
             boot_code : integer;  (* reserved for future use *)
             boot_environ : integer;  (* reserved for future use *)
           end;

     TMDDF_ptr = ^TMDDF;

     Tbyte = -128..127;

     TFullPage = record
                     Labl : array[0..23] of Tbyte;
                     Data : array[0..511] of Tbyte;
                 end;

var
     ptrString  : ^e_name;
     UTD2       : ut_parmt;
     devc_name  : e_name;
     ecode      : integer;
     device     : integer;
     mddf_block : longint;
     actual     : longint;
     MDDF_buf   : TFullPage;
     ptrMDDF    : TMDDF_ptr;
     cover_up   : string[3];
     i          : integer;
     password   : e_name;
     c          : string[1];

begin

     (*
      *  Version 1.1 modifications:
      *       Allow blessing of FS version 14 and 15 volumes.
      *)
     writeln;
     writeln('Master Volume Blessing Utility    Vers 1.1     July 15, 1983');
     writeln;

     (* Query for the password, hide it, and exit if incorrect *)
     cover_up := '...';
     cover_up[1] := chr(8);
     cover_up[2] := ' ';
     cover_up[3] := chr(8);
     i := 1;
     password := '';
     write('What is the password?  ');

     read(c);
     while not eoln do
     begin
       if i <= MAX_ENAME then
       begin
         password := concat(password, c);
         i := i + 1;
       end;

       write(cover_up);
       read(c);
     end;

     readln;  (* clear eoln *)

     (* Password stored in program text is encrypted *)
     for i := 1 to length(password) do
          password[i] := chr(ord(password[i]) + i);

     if password <> JOE_SENT_ME then
     begin
          writeln ('Sorry, that is not the password.  See you later.');
          exit(BlessVolume);
     end;

     writeln;
     write('Bless on what device? ');
     readln(devc_name);
     writeln;

     if password <> JOE_SENT_ME then exit(BlessVolume);

     (* Must call special interface to map device name to device number *)
     with UTD2 do
     begin
          gp_parm := 0;
          command := gp;
          funct := GET_DEV_NO;
          ptrString := @parm_array;
          ptrString^ := devc_name;

          fs_utilities(ecode, UTD2);
          if ecode > 0 then
          begin
               writeln('*** Error ',ecode:4,' getting device number');
               exit(BlessVolume);
          end;

          if parm1 < 0 then
          begin
               writeln('Invalid device name');
               exit(BlessVolume);
          end;

          device := parm1;
     end;

     if password <> JOE_SENT_ME then exit(BlessVolume);

     (* MDDF block location is well-known for Twiggy and Profile *)
     if (device = 1) or (device = 2) then
          mddf_block := TWIGGY_MDDF_LOC
     else
          mddf_block := PROFILE_MDDF_LOC;

     (* Put volume in a known state *)
     unmount(ecode, devc_name);
     if (ecode > 0) and (ecode <> ALREADY_UNMOUNTED) then
     begin
          writeln('*** Error ',ecode:4,' unmounting volume');
          exit(BlessVolume);
     end;

     unitio(ecode, device, ord(@MDDF_buf), 1, mddf_block, actual, raw_io, readop);
     if ecode > 0 then
     begin
          writeln('*** Error ',ecode:4,' blessing volume');
          exit(BlessVolume);
     end;

     if password <> JOE_SENT_ME then exit(BlessVolume);

     ptrMDDF := @MDDF_buf.Data;
     with ptrMDDF^ do
     begin
          (* Make sure the volume is a Lisa OS volume *)
          if ( MDDFaddr <> MDDF_ADDR )  or
             ( blocksize <> BLOCK_SIZE) or
             ( flabel_size <> MAX_LABEL_SIZE) then
          begin
               writeln('Volume is not in Lisa file system format');
               exit(BlessVolume);
          end;

          (* Make sure the volume is zapped *)
          if (fsversion <> ZAP_OLD_VERSION) and
             (fsversion <> ZAP_FS_VERSION) then
          begin
               writeln('Volume is not a master');
               exit(BlessVolume);
          end;

          (* Bless the volume *)
          unusedi1 := BLESS_MARK;
     end;

     if password <> JOE_SENT_ME then exit(BlessVolume);

     (* Commit! *)
     unitio(ecode, device, ord(@MDDF_buf), 1, mddf_block, actual, raw_io, writeop);
     if ecode > 0 then
     begin
          writeln('*** Error ',ecode:4,' blessing volume');
          exit(BlessVolume);
     end;

     writeln('Volume has been successfully blessed');
     writeln;
end.

ÿ