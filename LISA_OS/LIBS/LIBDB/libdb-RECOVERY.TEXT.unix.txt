{ Copyright 1983,Apple Computer Inc. }
{#F     libdb/Recovery.text }
{$L-}
{$R-}
{$U-}
{$SETC OSBUILT := TRUE }
unit Recovery ;
       intrinsic;

interface

uses
{$IFC OSBUILT }
       {$U libsm/unitstd.obj} unitstd,
       {$U libdb/dbenv.obj } dbenv,
       {$U libin/INTRLIBp.obj } international,
       {$U libdb/dbdecl1.obj } dbdecl1,
       {$U libos/syscall.obj } syscall,
       {$U libos/psyscall.obj } psyscall,
       {$U libdb/lowlevel.obj } lowlevel,
       {$U libdb/pooler.obj } pooler,
       {$U libdb/heap.obj } heap,
       {$U libdb/czcompact.obj } czCompact,
       {$U libdb/vltree.obj } vltree,
       {$U libdb/scan.obj } scan,
       {$U libdb/labscan.obj } labscan,
       {$U libdb/schema.obj } schema;
{$ELSEC }
  {$U OBJ:dbenv.obj } dbenv,
     {$U INTRLIB.obj } international,
       {$U OBJ:dbdecl1.obj } dbdecl1,
       {$U OBJ:syscall.obj } syscall,
       {$U OBJ:lowlevel.obj } lowlevel,
       {$U OBJ:pooler.obj } pooler,
       {$U OBJ:heap.obj } heap,
       {$U OBJ:czcompact.obj } czCompact,
       {$U OBJ:vltree.obj } vltree,
       {$U OBJ:scan.obj } scan,
       {$U OBJ:labscan.obj } labscan,
       {$U OBJ:schema.obj } schema;
{$ENDC }

const

{       recovery warnings }

        WarnIndex =          0;
        WarnNoSchema =       1;
        WarnOldSchema =      2;


        BadFileDesc =           3400;       { lowlevel schema bad }
        BadFileSchema =         3401;       { hilevel schema bad }

{***************************************************************************

                                FileRecover

        Attempts to recover the List Manager compatible file from pfname,
        by creating a new file in pnewname.  Attempts to rebuild all indexes.
        If a file has indexes built on it, then their names must follow the
        LM convention:

                fname$Isuffix

        If a redundant copy of the file schema is stored then the redundant
        copy of the schema must be named:

                fname$R

         The name

                fname$D

         is reserved for the LM differential file.

         If it recognizes pfname^ as a DB file, then it will always delete
         all indexes and the differential file before it attempts recovery.
         No other files under fname are deleted.

         If a high level schema is included, then it must be List Manager
         compatible.  If the DB file is an 1.0 version file, then the market
         code field of the header record will be filled with MCodeNil.

         WARNING : FileRecover modifies the global prefix, you must do a
         set_prefix after calling FileRecover.


         Input Parameters
                oldprefix - prefix for file to be recovered
                newprefix - prefix for new file
                pfname - pathname of file to be recovered, under oldprefix
                pnewname - pathname of recovered file, under newprefix
                precname - pathname to look for the redundant file under, typically
                        fname$R, but could be a backup copy, for instance. under
                        oldprefix
                ECheck - a procedure to validate an editcheck, should return noerr
                        if all is ok (If you expect no Schema, then you should bind
                        a procedure that simply returns an error status always)
                indexmake - a procedure to build an index on a datafile with no
                        data (If you exprect no indexes then you should bind a
                        procedure that simply returns an error status always);
                MarksRevenge - a procedure that grovels over labelscan and
                        satisfies itself that everything else (i.e. besides the
                        schema and the index records) is in order (If you
                        expect nothing in the file label then you should bind a
                        procedure that simply return noerr).
                ToolsMarketCode - the market code of the tool (exported from
                        compare unit) - if the file's marketcode matches the
                        tools market code, then recovery will check the edit
                        checks, else it won't.

         Output Parameters
                warnings - set of non fatal problems encountered
                ddresult - return result

                noerr
                BadFileDesc - lowlevel file descriptor unrecoverable
                BadFileSchema -  high level schema unrecoverable
                errors from MarksRevenge
                ioerr (an OS ioerr that FileRecover can't ignore)
                nobuffs
                noroom
                inconsistent
                nomem
                wrongfile
                notdbfile
                OS(make_file,close_object,lookup,info), from making new file and
                    opening and closing scans on it.
                OS(reset_catalog,get_next_entry,kill_object), except that all
                    return codes from get_next_entry that denote an 'EOF'
                    condition on the catalogue scan are filtered out as well
                    as all return results from Kill_object(...'prefix$D'...)
                    that denote 'notfound'
                OS(open), except that all error statuses that denote a 'damaged,
                    but still partially readable' file to be recovered are
                    filtered.  all open errors on redundant files are filtered.


***************************************************************************}

procedure FileRecover(var ddresult : integer;
                      var warnings : elemset;
                          oldprefix,
                          newprefix,
                          pfname,
                          pnewname,
                          precname : ptrpathname;
                procedure ECheck(    EC : ecstr;
                                     ftype : integer;
                                 var Check : checkinfo;
                                 var result : integer);
                procedure indexmake(var ddresult : integer;
                                        ifilename,
                                        filename,
                                        tempdir1,
                                        tempdir2 : ptrpathname;
                                        temp_ldsn : integer;
                                        nisort,
                                        nikeys : integer;
                                        piflds : ptridesc;
                                        duplok : boolean);
                procedure MarksRevenge(var result : integer;
                                       var warnings : elemset;
                                       lsid : integer);
                ToolsMarketCode : integer);

Implementation

const
        Scavenged = -1175;
        OSClosed = -1173;
        OSCrashed = -1174;
        ScavChanged = -1176;

        OSIoerr = 802;
        PastLEOF = 956;
        AtEOF = 848;
        NotInCat = 894;
        catEof = 848;
        AlreadyExists = 890;
        DAltered = 625;
        DMaybeAltered = -626;
        delimChar = '-';

type
        shortString = string[3];
        ptrflddesc = ^ flddesc;


{$IFC DOLLARD }
{$D- }
{$ENDC}

{$S frecovseg   }

{$IFC OSBuilt }
{$I libdb/recprocs.text }
{$I libdb/recfile.text }
{$ELSEC }
{$I l:recprocs.text }
{$I l:recfile.text }
{$ENDC}
end.
ÿ