{ Copyright 1983,Apple Computer Inc. }


{#F     libdb/scan.text }

{$S access }
{$R-}
{$U-}
{$SETC OSBUILT := TRUE }
unit scan ;
       intrinsic;

interface

uses
{$IFC OSBUILT }
       {$U libsm/unitstd.obj} unitstd,
       {$U libdb/dbenv.obj } dbenv,
       {$U libin/INTRLIBp.obj } international,
       {$U libdb/dbdecl1.obj } dbdecl1,
       {$U libos/syscall.obj } syscall,
       {$U libos/psyscall.obj } psyscall,
       {$U libdb/lowlevel.obj } lowlevel,
       {$U libdb/pooler.obj } pooler,
       {$U libdb/heap.obj } heap,
       {$U libdb/czcompact.obj } czCompact,
       {$U libdb/vltree.obj } vltree;
{$ELSEC}
  {$U OBJ:dbenv.obj } dbenv,
     {$U INTRLIB.obj } international,
       {$U OBJ:dbdecl1.obj } dbdecl1,
       {$U OBJ:syscall.obj } syscall,
       {$U OBJ:lowlevel.obj } lowlevel,
       {$U OBJ:pooler.obj } pooler,
       {$U OBJ:heap.obj } heap,
       {$U OBJ:czcompact.obj } czCompact,
       {$U OBJ:vltree.obj } vltree;
{$ENDC}

{****************************************************************************

                            SParmsBad

        returns error code <> noerr iff params are bad.

        Input Parameters:
                scanid,
                which,
                nsearch,
                pentry - as per efetch

        Output Parameters:
                return result

                noerr
                badscanid
                oddrecsize
                oddrecaddress
                badwhich
                badnsearch


**************************************************************************}

function SParmsBad(scanid : integer;
                   which : integer;
                   nsearch : integer;
                   pentry : ptrdata): integer;

{****************************************************************************

                            scanidbad

        returns true iff scanid corresponds to an open scan.

        Input Parameters:
                scanid - scanid of some scan

        Output Parameters:
                return result

****************************************************************************}

function scanidbad(scanid : integer) : boolean;

{************************************************************************

                                pstack_validate

        makes sure that pstack is big enough to handle maxlevel

        Output Parameters

        sresult - return result
            noerr
            nomem

*************************************************************************}
procedure pstack_validate(var sresult : integer);

{*****************************************************************************

                                keysize

        computes the size of the index record that would be built from
        pentry for file fileid

        Input Parameters:

        fileid - file #
        pentry - a datafile record from which index record will be built

        Output Parameters:

        return result - size of index record, rounded up as necessary

*****************************************************************************}

function keysize(fileid : integer;
                 pentry : ptrdata) : integer;
{^T 20}
{*****************************************************************************

                               einsert

        inserts an entry into a file, via a scan.
        new entry is made cos.

        Input Parameters:

        scanid - scan into which to insert record
        pentry - the record to insert
        size - size of record to insert, must be even
        newticket - true iff a new ticket should be generated

        Output Parameters:

        sresult - result of operation
            noerr
            nobuffs
            ioerr
            noroom
            inconsistent
            notfound
            duplkey
            rectoobig
            nomem
            ticketoverflow
            badscanid
            oddrecsize
            oddrecaddress

        offender - if sresult = duplkey, the index of offending file

*****************************************************************************}

procedure einsert(var sresult : integer;
                  var offender : integer;
                       scanid : integer;
                       pentry  : ptrdata;
                       size : integer;
                       newticket : boolean);


{^T 20}
{**************************************************************************

                                  efetch

        depending on the value of which, fetches the proper entry on
        scanid :

        Input Parameters:

        scanid  -  as per einsert
        pentry  -  as per einsert, except only necessary fields need be
                   filled
        which   -  positioning code:

        value of which                        action

        first =   0               positions on first entry in scan
        last =    1               positions on last entry in scan
        approx = 2                positions on first record (in sort seq.)
                                  which matches on the first nsearch key flds
                                  in the case of duplicates, positions
                                  at the first such value.
        exact =  3                positions on exact entry given by the primary
                                  key of the via file
        current = 4               returns cos
        prior =   5               returns prior entry in scan
        next =    6               returns next entry in scan

        nsearch - on approx match, the number of fields to use in the search
                key.

        Output Parameters:

        sresult   -  error status
            noerr
            nobuffs
            ioerr
            inconsistent
            notfound
            eos
            nomem
            badscanid
            oddrecsize
            oddrecaddress
            badwhich
            badnsearch


**************************************************************************}

procedure efetch(var sresult : integer;
                     scanid : integer;
                     which : integer;
                     nsearch : integer;
                     pentry : ptrdata);

{^T 20}
{**************************************************************************

                                  eupdate

        updates cos of scanid (after optional repositioning):

        - cos remains cos (i.e. the updated record)

        Input Parameters:

        scanid,
        which,
        nsearch,
        pentry - as per einsert

        pnewrec - points at record which will replace cos
        size - size of record which will replace cos, must be even

        Output Parameters:

        sresult - as per einsert
            noerr
            nobuffs
            ioerr
            inconsistent
            noroom
            duplkey
            rectoobig
            eos
            nomem
            badscanid
            oddrecsize
            oddrecaddress
            badwhich
            badnsearch

        offender - if sresult = duplkey, the index of offending file

**************************************************************************}
procedure eupdate(var sresult : integer;
                  var offender : integer;
                      scanid : integer;
                      which : integer;
                      nsearch : integer;
                      pentry : ptrdata;
                      pnewrec : ptrdata;
                      size : integer);


{^T 20}
{*****************************************************************************

                               edelete

        deletes cos from a file (after optional repositioning of scan).

        all parameters are as per efetch

        sresult
            noerr
            nobuffs
            ioerr
            inconsistent
            noroom
            notfound
            duplkey
            eos
            nomem
            badscanid
            oddrecsize
            oddrecaddress
            badwhich
            badnsearch

*****************************************************************************}

procedure edelete(var sresult : integer;
                       scanid : integer;
                       which : integer;
                       nsearch : integer;
                       pentry : ptrdata);


Implementation

{$IFC DOLLARD }
{$D- }
{$ENDC}

{$IFC OSBuilt }
{$I libdb/sindex.text }
{$I libdb/scancode.text }
{$ELSEC}
{$I l:sindex.text }
{$I l:scancode.text }
{$ENDC }

end.


ÿ