{#F     libdb/sindex.text }
{$S     access }
{^T20}
{*****************************************************************************

                                keysize

        computes the size of the index record that would be built from
        pentry for file fileid

        Input Parameters:

        fileid - file #
        pentry - a datafile record from which index record will be built

        Output Parameters:

        return result - size of index record, rounded up as necessary

*****************************************************************************}

{$S     swapaccs }
function keysize{(fileid : integer;
                 pentry : ptrdata) : integer};
begin
{$IFC fTraceDB}    LogCall;     {$ENDC}
        with pfiletable^[fileid]^ do
            keysize := entrysize(firstvfld,lastvfld,firstvfld,vflds,
                                 pkdesc,pentry);
end;
{^T20}
{*****************************************************************************

                                indexdelete

        for all indexes on a datafile, up to, but not including plastfile,
        delete an entry for this record.

        - either updates all indexes or none (to the best of its ability)


*****************************************************************************}
{$S     access }
procedure indexdelete(var sresult : integer;
                          pscan : ptrscandesc;
                          pentry : ptrdata;
                      var viapage : fileptr;
                      var viaindex : integer);
var
        dpage : fileptr;
        dindex : integer;
        viafile,
        puifile,
        pifile : integer;
        size,
        tresult : integer;
begin
{$IFC fTraceDB}    LogCall;     {$ENDC}
        (*dbif scandebug then writeln(dumpfile,'indel:');*)

        sresult := noerr;
        pifile := pfiletable^[pscan^.onfile]^.pkeyfiles;
        viafile := pscan^.viafile;
        puifile := pifile;
        while (pifile <> nilval) do
            with pfiletable^[pifile]^ do
                begin
                deletekeyed(sresult,pifile,pentry,dpage,dindex);
                if sresult <> noerr then
                    begin
                    while (puifile <> pifile) do
                        with pfiletable^[puifile]^ do
                            begin
                            size := keysize(puifile,pentry);
                            insertkeyed(tresult,puifile,pentry,size,
                                        dpage,dindex);
                            if tresult <> noerr then fstatus := inconsistent;
                            puifile := pkeyfiles;
                            end; { with }
                    end;
                if pifile = viafile then
                    begin
                    viapage := dpage;
                    viaindex := dindex;
                    end;
                pifile := pkeyfiles;
                end; { with }

        (*dbif scandebug then writeln(dumpfile,'indel:',sresult:6);*)
end; { indexdelete }
{^E}
{*****************************************************************************

                                indexinsert

        for all indexes on a datafile, insert an entry for this record.

        - either updates all indexes or none (to the best of its ability)


*****************************************************************************}
{$S     access }
procedure indexinsert(var sresult : integer;
                      var offender : integer;
                          pscan : ptrscandesc;
                          pentry : ptrdata;
                      var viapage : fileptr;
                      var viaindex : integer);

var
        ipage : fileptr;
        iindex : integer;
        viafile,
        puifile,
        pifile : integer;
        size,
        tresult : integer;
begin
{$IFC fTraceDB}    LogCall;     {$ENDC}
        (*dbif scandebug then writeln(dumpfile,'inins:');*)

        sresult := noerr;
        pifile := pfiletable^[pscan^.onfile]^.pkeyfiles;
        viafile := pscan^.viafile;
        puifile := pifile;
        while (pifile <> nilval) do
            with pfiletable^[pifile]^ do
                begin
                size := keysize(pifile,pentry);
                insertkeyed(sresult,pifile,pentry,size,ipage,iindex);
                if sresult <> noerr then
                    begin
                    offender := pifile;
                    while (puifile <> pifile) do
                        with pfiletable^[puifile]^ do
                            begin
                            deletekeyed(tresult,puifile,pentry,ipage,iindex);
                            if tresult <> noerr then fstatus := inconsistent;
                            puifile := pkeyfiles;
                            end; { with }
                    end;
                if pifile = viafile then
                    begin
                    viapage := ipage;
                    viaindex := iindex;
                    end;
                pifile := pkeyfiles;
                end; { with }

        (*dbif scandebug then writeln(dumpfile,'inins:',sresult:6);*)
end; { indexinsert }
{^E}
{******************************************************************************

                                    indexundo

        undos as much of indexupdates changes as it can.

        - hides structure of datafile
        - updates all indexes affected or none (to the best of its ability)

***************************************************************************}

{$S     swapaccs }
procedure indexundo(pscan : ptrscandesc;
                    poldrec,
                    pentry : ptrdata;
                    pufile : integer);
var
        ipage : fileptr;
        iindex : integer;
        puset : ptrbits;
        nonfields,
        size,
        pifile : integer;
        tresult : integer;
begin
{$IFC fTraceDB}    LogCall;     {$ENDC}
        (*dbif scandebug then writeln(dumpfile,'inund:');*)

        with pfiletable^[pscan^.onfile]^ do
            begin
            puset := @pscan^.ufldset;
            pifile := pkeyfiles;
            nonfields := nfields;
            end;
        while (pifile <> pufile) do
            with pfiletable^[pifile]^ do
                begin
                if pintersect(puset,pfldset,nonfields) then
                    begin
                    deletekeyed(tresult,pifile,pentry,ipage,iindex);
                    if tresult <> noerr then fstatus := inconsistent;
                    size := keysize(pifile,poldrec);
                    insertkeyed(tresult,pifile,poldrec,size,ipage,iindex);
                    if tresult <> noerr then fstatus := inconsistent;
                    end; { if }
                pifile := pkeyfiles;
                end; { with }

        (*dbif scandebug then writeln(dumpfile,'inund:');*)
end; { indexundo }
{^E}
{******************************************************************************

                                    indexupdate

        for all indexes of a datafile that are affected by an update,
        delete the old entry and insert a new entry.

        - updates all indexes affected or none (to the best of its ability)

***************************************************************************}

{$S     access }
procedure indexupdate(var sresult : integer;
                      var offender : integer;
                          pscan : ptrscandesc;
                          poldrec,
                          pentry : ptrdata;
                      var viapage : fileptr;
                      var viaindex : integer);

var
        ipage : fileptr;
        iindex : integer;
        puset : ptrbits;
        nonfields,
        size : integer;
        viafile,
        pifile : integer;
        tresult : integer;
begin
{$IFC fTraceDB}    LogCall;     {$ENDC}
        (*dbif scandebug then writeln(dumpfile,'inupd:');*)

        sresult := noerr;
        with pfiletable^[pscan^.onfile]^ do
            begin
            puset := @pscan^.ufldset;
            viafile := pscan^.viafile;
            pifile := pkeyfiles;
            nonfields := nfields;
            end;
        while (pifile <> nilval) and (sresult = noerr) do
            with pfiletable^[pifile]^ do
                begin
                if pintersect(puset,pfldset,nonfields) then
                    begin

                    (*dbif scandebug then
                        begin
                        writeln(dumpfile,'intersect');
                        dumpset(pfldset,nonfields);
                        dumpset(puset,nonfields);
                        end;*)

                    deletekeyed(sresult,pifile,poldrec,ipage,iindex);
                    if sresult = noerr then
                        begin
                        size := keysize(pifile,pentry);
                        insertkeyed(sresult,pifile,pentry,size,ipage,iindex);
                        if sresult <> noerr then
                            begin
                            offender := pifile;
                            size := keysize(pifile,poldrec);
                            insertkeyed(tresult,pifile,poldrec,size,
                                        ipage,iindex);
                            if tresult <> noerr then fstatus := inconsistent;
                            end;
                        end;
                    if sresult <> noerr then
                        indexundo(pscan,poldrec,pentry,pifile);
                    if pifile = viafile then
                        begin
                        viapage := ipage;
                        viaindex := iindex;
                        end;
                    end; { if }
                pifile := pkeyfiles;
                end; { with }

        (*dbif scandebug then writeln(dumpfile,'inupd:',sresult : 6);*)
end; { indexdupdate }


ÿ