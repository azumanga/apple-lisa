{ Copyright 1983,Apple Computer Inc. }
{$S access }
{$R-}
unit heap ;
       intrinsic;

Interface

Const
        noerror = 0;            { same as noerr  }
        nomem = 3411;           { heap exhausted }

        lhead =   2;            { size of header for allocated block }
        uhead =  10;            { size of header for free block }
        free_overhead = 12;     { size of header & footer for free block }
        allocover = 8;          { size of overhead for allocated block }
Type
        _ptr = ^ integer;
        ptrptr = ^ _ptr;

        heapptr = ^ heapblk;
        heapblk =
            record case boolean of
            true : (
                size : integer;
                prep : heapptr;
                next : heapptr);
            false : (
                blk  : array[0..0] of -127..127)
            end;

        zonedesc =
            record
                avail : heapptr;
                heapmin,
                heapmax : _ptr;
                lastdiff : integer;
                availsize : integer;
            end;
        ptrzonedesc = ^ zonedesc;

{***************************************************************************

                        init_heap

        initializes heap of size initsize, starting at where and having
        descriptor, pzone^

        Input Parameters

        pzone - pts to zone descriptor
        initsize - size of heap in bytes
        where - address of start of heap

***************************************************************************}

procedure init_heap(pzone : ptrzonedesc;
                   initsize : integer;
                   where: _ptr);

{****************************************************************************

                        grow_heap

        grows heap pzone^ if growincr > 0 ,shrinks if < 0.  returns nomem
        if shrink cannot be done.

        Input Parameters

        pzone - pts to zone descriptor
        growincr - grow increment/ shrink decrement

        Output Parameters

        return result
            noerr
            nomem

***************************************************************************}


function grow_heap(pzone : ptrzonedesc;
                   growincr : integer) : integer;


{***************************************************************************

                            nnew

        allocates a block of reqsize bytes in heap pzone^, returning pointer
        to it in pdataptr.  does not compact heap.  returns nomem on failure.

        Input Parameters

        pzone - pts to zone descriptor
        reqsize - size of block requested

        Output Parameters

        return result
            noerr
            nomem
        pdataptr - pts to a ptr to block, ie pdatptr^ := @block

***************************************************************************}

function nnew(pzone : ptrzonedesc;
              reqsize : integer;
              pdataptr : ptrptr) : integer;

{***************************************************************************

                            ndispose

        frees block ptd to by pdata.

        Input Parameters

        pzone - pts to zone descriptor
        pdata - pts to block

***************************************************************************}

procedure ndispose(pzone : ptrzonedesc;
                   pdata : _ptr);

Implementation

function nnew{( pzone : ptrzonedesc;
                reqsize : integer;
                pdataptr : ptrptr ) : integer};
        external;

procedure ndispose{( pzone : ptrzonedesc;
                     pdata : _ptr )};
        external;


{****************************************************************************

                                 init_heap

 ***************************************************************************}

procedure init_heap{(pzone : ptrzonedesc;
                     initsize : integer;
                     where : _ptr)};
        external;
{^T 20}
{****************************************************************************

                                 grow_heap

***************************************************************************}

function grow_heap{(pzone : ptrzonedesc;
                   growincr : integer) : integer};
        external;


end.


ÿ