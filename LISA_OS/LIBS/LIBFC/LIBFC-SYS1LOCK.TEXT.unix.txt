{$R-}
UNIT Sys1Lock;

{Procedures to lock down segments in Sys1Lib for the filer.  Initialization
 segments are not locked down.  L. Daniels}

{Copyright 1983, 1984 Apple Computer Inc.}

{8/25/83 - Made changes to accommodate the re-segmentation for the Pepsi release.}
{          Some segments are re-mapped at link time to WORKSET and GRAFSEG}
{2/7/84  - Made changes to accommodate Ed's re-segmentation for the Spring}
{          release.  For locking any segment in the library -- Ken Krugler}

INTRINSIC;

INTERFACE

USES      {$U libsm/UnitStd} UnitStd,
          {$U libos/SysCall.Obj    } SysCall,
          {$U libos/PSysCall.obj   } PSysCall;

PROCEDURE LkSYSINIT (VAR err: INTEGER);
PROCEDURE LkOPSEG1 (VAR err: INTEGER);
PROCEDURE LkOPSEG2 (VAR err: INTEGER);
PROCEDURE LkACTIVATE (VAR err: Integer);
PROCEDURE LkWORKSET (VAR err: INTEGER);
PROCEDURE LkGRAFSEG (VAR err: INTEGER);
PROCEDURE LkMOVERS (VAR err: INTEGER);
PROCEDURE LkOPEN1LW (VAR err: Integer);
PROCEDURE LkLWWORK (VAR err: Integer);
PROCEDURE LkOTHRWORK (VAR err: Integer);
PROCEDURE LkNEVER (VAR err: INTEGER);
PROCEDURE LkFmgrutil (VAR err: Integer);
PROCEDURE LkPMMSeg (VAR err: INTEGER);
PROCEDURE LkWMwarm (VAR err: Integer);
PROCEDURE LkWMJrnl (VAR err: Integer);
PROCEDURE LkWMalert (VAR err: INTEGER);
PROCEDURE Lkalert (VAR err: INTEGER);
PROCEDURE LkSMcold (VAR err: INTEGER);
PROCEDURE LkSUcold (VAR err: INTEGER);
PROCEDURE LkFEcold (VAR err: INTEGER);
PROCEDURE LkSBcold (VAR err: INTEGER);
PROCEDURE LkINcold (VAR err: INTEGER);
PROCEDURE LkWMcold (VAR err: Integer);


IMPLEMENTATION


{$S SYSINIT }
PROCEDURE LkSYSINIT (*VAR err: INTEGER*);
BEGIN
{$IFC fTrace} LogCall; {$ENDC}
LockSeg (err);
END;

{$S OPENSEG1 }
PROCEDURE LkOPSEG1 (*VAR err: INTEGER*);
BEGIN
{$IFC fTrace} LogCall; {$ENDC}
LockSeg (err);
END;

{$S OPENSEG2 }
PROCEDURE LkOPSEG2 (*VAR err: INTEGER*);
BEGIN
{$IFC fTrace} LogCall; {$ENDC}
LockSeg (err);
END;

{$S ACTIVATE }
PROCEDURE LkACTIVATE (*VAR err: INTEGER*);
BEGIN
{$IFC fTrace} LogCall; {$ENDC}
LockSeg (err);
END;

{$S WORKSET }
PROCEDURE LkWORKSET (*VAR err: INTEGER*);
BEGIN
{$IFC fTrace} LogCall; {$ENDC}
LockSeg (err);
END;

{$S GRAFSEG }
PROCEDURE LkGRAFSEG (*VAR err: INTEGER*);
BEGIN
{$IFC fTrace} LogCall; {$ENDC}
LockSeg (err);
END;

{$S MOVERS }
PROCEDURE LkMOVERS (*VAR err: INTEGER*);
BEGIN
{$IFC fTrace} LogCall; {$ENDC}
LockSeg (err);
END;

{$S OPEN1LW }
PROCEDURE LkOPEN1LW (*VAR err: INTEGER*);
BEGIN
{$IFC fTrace} LogCall; {$ENDC}
LockSeg (err);
END;

{$S LWWORK }
PROCEDURE LkLWWORK (*VAR err: INTEGER*);
BEGIN
{$IFC fTrace} LogCall; {$ENDC}
LockSeg (err);
END;

{$S OTHRWORK }
PROCEDURE LkOTHRWORK (*VAR err: INTEGER*);
BEGIN
{$IFC fTrace} LogCall; {$ENDC}
LockSeg (err);
END;

{$S NEVER }
PROCEDURE LkNEVER (*VAR err: INTEGER*);
BEGIN
{$IFC fTrace} LogCall; {$ENDC}
LockSeg (err);
END;

{$S FmgrUtil }
PROCEDURE LkFmgrutil (*VAR err: INTEGER*);
BEGIN
{$IFC fTrace} LogCall; {$ENDC}
LockSeg (err);
END;

{$S PMMSeg }
PROCEDURE LkPMMSeg (*VAR err: INTEGER*);
BEGIN
{$IFC fTrace} LogCall; {$ENDC}
LockSeg (err);
END;

{$S WMwarm }
PROCEDURE LkWMwarm (*VAR err: INTEGER*);
BEGIN
{$IFC fTrace} LogCall; {$ENDC}
LockSeg (err);
END;

{$S WMJrnl }
PROCEDURE LkWMJrnl (*VAR err: INTEGER*);
BEGIN
{$IFC fTrace} LogCall; {$ENDC}
LockSeg (err);
END;

{$S WMalert }
PROCEDURE LkWMalert (*VAR err: INTEGER*);
BEGIN
{$IFC fTrace} LogCall; {$ENDC}
LockSeg (err);
END;

{$S alert }
PROCEDURE Lkalert (*VAR err: INTEGER*);
BEGIN
{$IFC fTrace} LogCall; {$ENDC}
LockSeg (err);
END;

{$S SMcold }
PROCEDURE LkSMcold (*VAR err: INTEGER*);
BEGIN
{$IFC fTrace} LogCall; {$ENDC}
LockSeg (err);
END;

{$S SUcold }
PROCEDURE LkSUcold (*VAR err: INTEGER*);
BEGIN
{$IFC fTrace} LogCall; {$ENDC}
LockSeg (err);
END;

{$S FEcold }
PROCEDURE LkFEcold (*VAR err: INTEGER*);
BEGIN
{$IFC fTrace} LogCall; {$ENDC}
LockSeg (err);
END;

{$S SBcold }
PROCEDURE LkSBcold (*VAR err: INTEGER*);
BEGIN
{$IFC fTrace} LogCall; {$ENDC}
LockSeg (err);
END;

{$S INcold }
PROCEDURE LkINcold (*VAR err: INTEGER*);
BEGIN
{$IFC fTrace} LogCall; {$ENDC}
LockSeg (err);
END;

{$S WMcold }
PROCEDURE LkWMcold (*VAR err: INTEGER*);
BEGIN
{$IFC fTrace} LogCall; {$ENDC}
LockSeg (err);
END;

END.

ÿ