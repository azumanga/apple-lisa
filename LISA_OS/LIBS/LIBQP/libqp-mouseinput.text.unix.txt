PROGRAM MouseInput;

USES
    QuickDraw,                               {needed by this program, also needed to compile UQPortCall}

    {$U UQPortCall}  UQPortCall,             {needed to call mouse input routines}
    {$U UQPortGraph} UQPortGraph;            {program has to use this if has graphic output}



  PROCEDURE SetupPanels;
  VAR config : TQPConfigRec;
  BEGIN
    WITH config DO
      BEGIN
        tosaveBuffer    := TRUE;          {save lines in buffer}
        passApplePeriod := FALSE;         {pass apple '.' to main program}
        showInputPanel  := false;          {display input panel}
        twoPanels       := TRUE;
        vhs := h;                         {vertical or horizontal split}
        grPanelSize := -150;              {initial width or height, if < 0, graphic
                                           panel is below or right of the text panel}
      END;
    QPConfig (config);      {main program should call this before any screen i/o}

    WRITELN ('This is a sample program running in the QuickPort demonstrating');
    WRITELN ('the mouse input capability, with input panel, text panel and graphic');
    WRITELN ('panel all showing here. You can close down the input panel to show most');
    WRITELN ('of the text panel and graphic panel.');
    WRITELN;
  END;

  PROCEDURE DrawNum (n : INTEGER);      {n < 1000}
  VAR n1, n2, i : INTEGER;
      str : str255;
  BEGIN
    n1 := n div 100;
    n := n - n1*100;
    n2 := n div 10;
    n := n - n2 *10;
    i := 1;
    IF n1 <> 0 THEN
      BEGIN
        str [i] := chr (n1 + $30);
        i := i + 1;
      END;
    IF (n2 <> 0) or (n1 <> 0) THEN
      BEGIN
        str [i] := chr (n2 + $30);
        i := i + 1;
      END;
    str [i] := chr (n + $30);
    str [0] := chr (i);
    DrawString (str);
  END;

  PROCEDURE drawcheckerboard;
  VAR i : INTEGER;
  BEGIN
    TextFont (8);
    i := 20;                    {draw checker board}
    WHILE i < 364 DO
      BEGIN
        MoveTo (0, i);
        LineTo (720, i);
        MoveTo (0, i);
        DrawNum (i);
        i := i+20;
      END;

    i := 20;
    WHILE i < 720 DO
      BEGIN
        MoveTo (i, 0);
        LineTo (i, 364);
        if odd (i div 20) then MoveTo (i, 12) else MoveTo (i, 24);
        DrawNum (i);
        i := i+20;
      END;
  END;


  PROCEDURE PaintCircle (mousept : Point);         {invert a cicle around mousept}
  VAR r : Rect;
  BEGIN
    SetRect (r, 0, 0, 7, 5);
    OffsetRect (r, mousept.h - 3, mousept.v - 2);
    PaintOval (r);
  END;


  PROCEDURE Doit;
  VAR i : INTEGER;
      mousept : Point;
      aMouseEvent : TMouseEvent;
      f, more, fromkeyboard : BOOLEAN;
      ch : CHAR;

  BEGIN
    WHILE TRUE DO
      BEGIN
        VGetMouse (mousept);
        WRITELN ('GetMouse = (h, v) ', mousept.h, mousept.v);
        f := MouseButton;
        WRITELN ('MouseButton = ', f);
        WRITELN;
        WRITELN ('Program is waiting for a mouse down, or clicks in the graphic panel.');

        WaitMouseEvent (aMouseEvent);        {wait for mouse input}
        REPEAT                               {display all mouse events}
          WITH aMouseEvent DO
            BEGIN
              WRITELN ('MouseEvent = mouseLoc - ', mouseLoc.h, mouseLoc.v);
              WRITELN ('  clicknum - ', clicknum);
              WRITELN ('  mouseDown, meShift, meApple, meOption - ');
              WRITELN ('  ', mouseDown, ' ', meShift, ' ', meApple, ' ', meOption);
              WRITELN;
              IF NOT mouseDown THEN
                PaintCircle (mouseLoc);
            END;
          more := MouseEvent (aMouseEvent);
        UNTIL NOT more;

      {Or program can wait for either keyboard or mouse input}
        WRITELN;
        WRITELN ('Program is waiting for a mouse down, or clicks in the graphic panel,');
        WRITELN ('     or keyboard input.');
        WaitEvent (fromKeyboard);
        IF fromkeyboard THEN
          BEGIN
            VGetMouse (mousept);
            WRITE ('You typed : ');
            WHILE keypress DO
              BEGIN
                read (ch);
                if (ch = ' ') and eoln then readln;
                PaintCircle (mousept);
              END;
            WRITELN;
          END
        ELSE
          WHILE MouseEvent (aMouseEvent) DO
           WITH aMouseEvent DO
            BEGIN
              WRITELN ('MouseEvent = mouseLoc - ', mouseLoc.h, mouseLoc.v);
              WRITELN ('  clicknum - ', clicknum);
              WRITELN ('  mouseDown, meShift, meApple, meOption - ');
              WRITELN ('  ', mouseDown, ' ', meShift, ' ', meApple, ' ', meOption);
              WRITELN;
              IF NOT mouseDown THEN
                PaintCircle (mouseLoc);
            END;
      END;
  END;


BEGIN
  SetupPanels;
  DrawCheckerboard;
  Doit;
END.
ÿ