{$setc debug := false }

UNIT UQPPrint;  INTRINSIC;
INTERFACE

uses
   {$U libos/syscall    } syscall,
   {$U libpl/paslibcall } paslibcall,
   {$U libpl/ppaslibc   } PPasLibC,
   {$U libpm/pmdecl     } PMDecl,
   {$U UnitStd          } UnitStd,
   {$U UnitHz           } UnitHz,
   {$U Storage          } Storage,
   {$U QuickDraw        } QuickDraw,
   {$U FontMgr          } FontMgr,
  {$U+ }
   {$U Sys1Lib          } PrStdInfo,
   {$U PRLib            } PrPublic;


type
   LongStr = String[255];
   tPStr = ^LongStr;


procedure vwp_Init;

function vwp_Reset: boolean;

function vwp_Close: boolean;

function vwp_W_Str (pStr: tPStr): boolean;

procedure PrChangeFont ( Font: integer);

procedure PrWrapAround ( TurnOn: boolean);  {turn on wraparound ?? }

procedure PrPageRect (l,t,r,b: integer);


VAR vwptoinit : BOOLEAN;                {to be inited by ustdterm unit}



IMPLEMENTATION

{$IFC fDbgOK}
{$R+}
{$ELSEC}
{$R-}
{$ENDC}

{$IFC fSymOK}
{$D+}
{$ELSEC}
{$D-}
{$ENDC}



{$S sQPortCold}                         {cold segment - user interface code - and infrequent code segment}


{$IFC not debug }
   const
      debugging = false;
{$elsec }
   var
      debugging: boolean;
{$endc }

const
   CR = chr(13);
   FF = chr(12);
   LF = chr(10);

   PrintLDSN = 11;

   vmargin = 10;
   hmargin = 10;

var
   MyPrPort: tPrPort;
   MyPrRec: tPrRec;

   PrinterOpen: boolean;

   DoWrapAround: boolean;

   PageBounds: Rect;
   VSpace: integer;
   prFInfo: FontInfo;



{$S sQPortInit}                              {initialization code segment}

procedure vwp_init;
   var
      ChangedPrRec, result: boolean;
   begin {vwp_init}
      PrMgrInit;

      DoWrapAround := true;
      PrinterOpen := false;
      vSpace := 0;
   end; {vwp_init}


{$S sQPortCold}                         {cold segment - user interface code - and infrequent code segment}

function vwp_reset: boolean;
   var
      Result, ChangedPrRec: boolean;
      TempPtr: GrafPtr;
   begin {vwp_reset}
      GetPort(TempPtr);
      if vwptoinit THEN
        begin
                {init printer only when people use it, also will allow user to
                 use dialog box to change setting}
          PrMgrInit;

          DoWrapAround := true;
          PrinterOpen := false;
          vSpace := 0;
          vwptoinit := false;
        end;
      if PrinterOpen then begin
         vwp_reset := true;
      end else begin
         PrPrfDefault(MyPrRec);
         Result := fPrInsDlg(MyPrRec, ChangedPrRec, ePrDialogSurpress);
         PageBounds := MyPrRec.PrInfo.rPrintable;
         InsetRect (pageBounds, hmargin, vmargin);

         Result := PrDocStart (MyPrRec, MyPrPort, PrintLDSN , false);

         if Result then begin
            Result := PrPageStart (MyPrRec, MyPrPort);
            PrChangeFont(p10cent);
            MoveTo (Pagebounds.Left, Pagebounds.Top + vSpace);
            PrinterOpen := true;
         end;
         vwp_reset := Result;
      end;
      SetPort(TempPtr);
   end; {vwp_reset}


function vwp_Close: boolean;
   var
      Result: boolean;
      TempPtr: GrafPtr;
   begin {vwp_Close}
      if PrinterOpen then begin
         GetPort(TempPtr);
         Result := PrPageEnd (MyPrRec, MyPrPort);
         PrDocEnd (MyPrRec, MyPrPort);
         SetPort(TempPtr);
         PrinterOpen := false;
         vwp_Close := true;
      end else begin
         vwp_Close := false;
      end;
   end; {vwp_Close}


procedure NextPage;
   var
      Result: boolean;
   begin {NextPage}
      Result := PrPageEnd (MyPrRec, MyPrPort);
      Result := PRPageStart (MyPrRec, MyPrPort);

      SetPort(@MyPrPort.gport);

      EraseRect (MyPrPort.gPort.PortRect);
      MoveTo (Pagebounds.Left, Pagebounds.Top + vSpace);
   end;


function vwp_W_Str (pStr: tPStr): boolean;

   var
      TempPtr: GrafPtr;
      StartPos, hSave, NumBytes, i: integer;



      procedure NextLine;
         var
            Tempv: integer;
         begin {NextLine}
            Tempv := MyPrPort.gPort.PnLoc.v + vSpace;

            if (Tempv + prFInfo.descent + prFInfo.leading * 2) >=
                                                PageBounds.Bottom then
               NextPage
            else begin
               MoveTo (Pagebounds.Left ,TempV);
            end;
         end; {NextLine}

   begin {vwp_W_Str}
      if not PrinterOpen then begin
         vwp_W_Str := false;
      end else begin
         vwp_w_Str := true;
         if length(pStr^) <= 0 then exit(vwp_W_Str);
         GetPort (TempPtr);
         SetPort (@MyPrPort.gport);

         NumBytes := length(pStr^);

         case pStr^[1] of
            CR: begin
                  NextLine;
                  StartPos := 2;
                  NumBytes := NumBytes - 1;
                end;
            FF: begin
                  NextPage;
                  StartPos := 2;
                  NumBytes := NumBytes - 1;
                end;
            LF: begin
                  hSave := MyPrPort.gport.PnLoc.h;
                  NextLine;

                  Move (hSave, 0); { move the horizontal index back }
                  StartPos := 2;
                  NumBytes := NumBytes - 1;
                end;
            otherwise
                  StartPos := 1;
         end;

         if TextWidth (QDPtr(pStr), StartPos, NumBytes) + MyPrPort.gport.PnLoc.h
            <= PageBounds.Right then begin
            DrawText (QDPtr {type coersion} (pStr), StartPos, NumBytes);
         end else begin
            i := StartPos;
            while i <= length (pstr^) do begin
               if CharWidth (pstr^[i]) + MyPrPort.gport.PnLoc.h > PageBounds.Right then begin
                  if DoWrapAround then begin
                     NextLine;
                     DrawChar(pStr^[i]);
                  end else begin
                     i := 1000 { get out of here };
                  end;
               end else begin
                  DrawChar (pStr^[i]);
               end;
               i := i+1;
            end;
         end;
      end;
      SetPort (TempPtr);

   end; {vwp_W_Str}


procedure PrChangeFont (Font: integer);
   var
      TempPtr: GrafPtr;
      NewVSpace: integer;
      Tempv: integer;

   begin {PrChangeFont}
      GetPort (TempPtr);
      SetPort (@MyPrPort.gport);

      TextFont(Font);
      GetFontInfo(prFInfo);

      NewVSpace := prFInfo.ascent + prFInfo.descent + prFInfo.leading;
      NewVSpace := NewVSpace + 3; {a hack, we don't seem to be able to get the leading field in the right place }

      Tempv := NewVSpace-VSpace;
      VSpace := NewVSpace;
      if (MyPrPort.gPort.PnLoc.v + Tempv + prFInfo.descent + prFInfo.leading * 2)
                >= PageBounds.Bottom then NextPage
      else Move(0, Tempv); {move down}
      SetPort (TempPtr);
   end; {PrChangeFont}


procedure PrWrapAround ( TurnOn: boolean);
   begin
      DoWrapAround := TurnOn;
   end;


procedure PrPageRect(l,t,r,b: integer);
   begin
      SetRect(PageBounds,l,t,r,b);
   end;


END. {unit UQPPrint }


ÿ