UNIT UQPortCall;         {QuickPort procedures declaration, to be used by program}

INTERFACE

USES
    QuickDraw;                          {needed to compile Style, etc}

  CONST
    maxPosLines    = 50;                {max possible lines for any terminal emulator}
    maxPosColumns  = 132;

     {clearkind definition for ClearScreen procedure}
    sclearScreen  = 1;                  {clear the whole screen}
    sclearEScreen = 2;                  {clear to the end of the screen}
    sclearBScreen = 3;                  {clear from the beginning of the screen to the cursor position}
    sclearLine    = 4;                  {clear the whole line}
    sclearELine   = 5;                  {clear to end of line}
    sclearBLine   = 6;                  {clear from the beginning of the line to the cursor position}


  TYPE

    QPByte = -128..127;

    TQPConfigRec = RECORD
                     tosaveBuffer    : BOOLEAN;             {save lines in buffer}
                     passApplePeriod : BOOLEAN;             {pass apple '.' to main program}
                     showInputPanel  : BOOLEAN;             {display input panel}
                     CASE twoPanels  : BOOLEAN OF           {have both text and graphic panels}
                       TRUE : (vhs : VHSelect;              {vertical or horizontal split}
                               grPanelSize : INTEGER);      {initial width or height in pixels, if < 0, text
                                                             panel is below or right of the graph panel}
                   END;

    TCursorshape = (blockshape, underscoreshape, invisibleshape);

    TTermPara = RECORD
                  rowsize          : 1..maxPosLines;
                  columnsize       : 1..maxPosColumns;
                  toWraparound     : BOOLEAN;
                  keytoStopOutput  : CHAR;
                  keytoStartOutput : CHAR;
                  tmcursorShape    : TCursorshape;
                END;

    TMouseEvent = RECORD
                    mouseLoc : Point;
                    clicknum : INTEGER;                               {max 3 for triple clicks}
                    mouseDown, meShift, meApple, meOption : BOOLEAN;
                  END;


 {Procedures to be called by programs, or terminal emulators}

  PROCEDURE QPConfig (config : TQPConfigRec);     {main program should call this before any screen i/o}
  PROCEDURE SetupTermPara (termpara : TTermPara); {set up terminal parameters from program or terminal emulator}
                                                  {main program or terminal emulator should call this before any
                                                   screen i/o.}
  PROCEDURE VRead (VAR ch: CHAR; VAR keycap : QPByte; VAR applekey, shiftkey, optionkey: BOOLEAN);
                                                  {program can call this to get control keys, instead of READ,
                                                   But this call will not echo the character read, nor do mapping.}
  PROCEDURE ClearScreen (clearkind : INTEGER);
  PROCEDURE VGotoxy (x, y : INTEGER);
  PROCEDURE MoveCursor (scroll : BOOLEAN; xdistance, ydistance : INTEGER);
                                                  {scroll is only meanful in vertical direction.}
                                                  {xdistance, ydistance: positive means to the right or down.}
  PROCEDURE SetTab (column : INTEGER);            {use cursor if column < 0}
  PROCEDURE ClearTab (clearAll : BOOLEAN; column : INTEGER);    {use cursor if column < 0}

  PROCEDURE StopInput;                            {lock keyboard from program or terminal emulator}
  PROCEDURE StartInput;                           {unlock keyboard}

    {Character attributes change}
  PROCEDURE ChangeCharStyle (newstyle : Style);

  PROCEDURE QPYield_CPU;      {Programs should include this call in the long compute-bound
                               loop. This call will handle user's menu and mouse actions
                               as well. If programs do not want to give up being the active
                               window, they may call Yield_CPU.}

    {-Printer support}
  procedure PrChangeFont ( Font: integer);


 {Mouse input routines}

  PROCEDURE VGetMouse (VAR pt : Point);      {same as GetMouse in QPSupport}

  FUNCTION MouseButton : BOOLEAN;            {same as MouseButton in QPSupport}

  FUNCTION MouseEvent (VAR aMouseEvent : TMouseEvent) : BOOLEAN;
             {Return a mouse event if there is one in the queue; otherwise, return false. A mouse event is a
              mouse button down, mouse click, double clicks or triple clicks. Mouse move without button
              pressed down is not a mouse event. If you get a mouseDown event, several different mouseLoc
              events may be returned in subsequent calls, and they are always ended with a mouse up event. If
              double clicks, events of down, up, down, up are returned, with the second down event's clicknum
              = 2. If triple clicks, events of down, up, down, up, down, up are returned, with the second down
              event's clicknum = 2, and third down event's clicknum = 3.  If mouseDown field is false, other
              fields are meaningless. }

  PROCEDURE WaitMouseEvent (VAR aMouseEvent : TMouseEvent);
             {This procedure gets a mouse event in a similar way to READ and READLN in PASCAL, ie, it will
              block the caller until there is a mouse event in the queue. Program should use this call instead
              of the above call to avoid polling and wasting CPU time. This call would also make program more
              reponsive to user events such as pulling down menus, clicking to other windows, etc. when
              program is waiting for mouse input.}

  PROCEDURE WaitEvent (VAR fromKeyboard : BOOLEAN);
             {This procedure is combination of READ and WaitMouseEvent. It will block the caller until there
              is either keyboard or mouse input. Program that is interested in getting both keyboard and
              mouse input should use this call instead of KEYPRESS and MouseEvent.}

  FUNCTION QPGrafPicSize : INTEGER;
             {This function returns the current size of the picture used to save all the graphic output in
              the graphic panel.}


  PROCEDURE TrmntExceptionHandler;
             {Standard terminate exception handler. If you want to declare your
              own terminal exception handler, you should call this one first thing
              in your own handler.}


IMPLEMENTATION

  PROCEDURE QPConfig (config : TQPConfigRec);  external;
  PROCEDURE SetupTermPara (termpara : TTermPara);  external;

  PROCEDURE VRead (VAR ch: CHAR; VAR keycap : QPByte; VAR applekey, shiftkey, optionkey: BOOLEAN);
                                                       external;
  PROCEDURE ClearScreen (clearkind : INTEGER);  external;
  PROCEDURE VGotoxy (x, y : INTEGER);  external;
  PROCEDURE MoveCursor (scroll : BOOLEAN; xdistance, ydistance : INTEGER);  external;
  PROCEDURE SetTab (column : INTEGER); external;
  PROCEDURE ClearTab (clearAll : BOOLEAN; column : INTEGER);  external;

  PROCEDURE StopInput;  external;
  PROCEDURE StartInput; external;

  PROCEDURE ChangeCharStyle (newstyle : Style);  external;

  PROCEDURE QPYield_CPU;  external;

  procedure PrChangeFont ( Font: integer);  external;

  PROCEDURE VGetMouse (VAR pt : Point);  external;

  FUNCTION MouseButton : BOOLEAN;  external;

  FUNCTION MouseEvent (VAR aMouseEvent : TMouseEvent) : BOOLEAN;  external;

  PROCEDURE WaitMouseEvent (VAR aMouseEvent : TMouseEvent);  external;

  PROCEDURE WaitEvent (VAR fromKeyboard : BOOLEAN);  external;

  FUNCTION QPGrafPicSize : INTEGER;  external;


  PROCEDURE TrmntExceptionHandler;  external;
END.
ÿ