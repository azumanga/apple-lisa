{
Queue Package
}

{------------------------------------------------------------------------------------------}
{                        Copyright 1983, 1984, Apple Computer Inc.                         }
{------------------------------------------------------------------------------------------}
UNIT Queues;
INTRINSIC;

{ UNIT Queue Package -- used to establish and maintain queues of arbitrary contents }

INTERFACE

USES
     {$U LibSM/UnitStd  }  UnitStd,
     {$U LibSM/UnitHz   }  UnitHz;

TYPE
    pQueue = ^Queue;
    hQueue = ^pQueue;

    Queue = RECORD
        Head    : hQueue;
        Tail    : hQueue;
    END;

PROCEDURE QueueFree(Queue:hQueue);

PROCEDURE QueueInit(Queue:hQueue);

PROCEDURE QueueInUse(Queue:hQueue);

PROCEDURE Enqueue(Queue,Item:hQueue);

FUNCTION  Dequeue(Queue:hQueue):hQueue;

FUNCTION  InsertBefore(Queue,Successor,Item:hQueue):TF;

FUNCTION  InsertAfter(Queue,Predecessor,Item:hQueue):TF;

FUNCTION  Unqueue(Queue,Item:hQueue):TF;

FUNCTION  QueueLength(Queue:hQueue):TC;

FUNCTION  QueuePeek(Queue:hQueue):hQueue;

{ For every element in the Queue list, EnumerateQueue calls FuncHandle(Queue,arg) until FuncHandle returns
  FALSE.  Enumeration then ceases at the element which caused FuncHandle to return FALSE and that element
  is returned as the value of EnumerateQueue.  IF FuncHandle always returns TRUE, then the
  entire list will be enumerated and NIL will be returned as the value of EnumerateQueue.
  FuncHandle is called with arg as its second parameter.}
FUNCTION  EnumerateQueue(Queue:hQueue;FUNCTION FuncHandle(Queue:hQueue;arg:hQueue):BOOLEAN;arg:hQueue):hQueue;

IMPLEMENTATION

{$setc doTracePR := TRUE}
{$setc fTracePR := doTracePR and fTrace}

{$IFC fsymok}
{$D+}
{$ELSEC}
{$D-}
{$ENDC}
{$IFC fdbgok}
{$R+}
{$ELSEC}
{$R-}
{$ENDC}

{$S Pr}
PROCEDURE QueueFree{(Queue:hQueue)};                        EXTERNAL;
{Marks the Queue as not in use.}

{$S Pr}
PROCEDURE QueueInUse{(Queue:hQueue)};                       EXTERNAL;
{Waits until the Queue is not in use.}

{$S Pr}
PROCEDURE QueueInit{(Queue:hQueue)};
{Initialize the Queue.  No checking is done to make sure its not already in use.}
BEGIN
    {$IFC fTracePR}    LogCall;     {$ENDC}
    WITH Queue^^ DO BEGIN
        Head:=NIL;
        Tail:=Queue;
    END;
    QueueFree(Queue);
END;

{$S Pr}
PROCEDURE Enqueue{(Queue,Item:hQueue)};
BEGIN
{$IFC fTracePR}    LogCall;     {$ENDC}
QueueInUse(Queue);
WITH Queue^^ DO BEGIN
    Tail^^.Head:=Item;
    Item^^.Head:=nil;
    Tail:=Item;
END;
QueueFree(Queue);
END;

{$S Pr}
FUNCTION  Dequeue{(Queue:hQueue):hQueue};
BEGIN
{$IFC fTracePR}    LogCall;     {$ENDC}
QueueInUse(Queue);
WITH Queue^^ DO BEGIN
    Dequeue:=Head;
    IF (Head <> nil) THEN BEGIN
        Head:=Head^^.Head;
        IF Head = nil THEN Tail:=Queue;
    END;
END;
QueueFree(Queue);
END;

{$S Pr}
FUNCTION  InsertBefore{(Queue,Successor,Item:hQueue):TF};
LABEL 1;
VAR
    hIndex  : hQueue;
BEGIN
{$IFC fTracePR}    LogCall;     {$ENDC}
QueueInUse(Queue);
hIndex:=Queue;
InsertBefore:=FALSE;
WHILE (hIndex^^.Head <> nil) DO BEGIN
    IF (hIndex^^.Head = Successor) THEN BEGIN
        InsertBefore:=TRUE;
        Item^^.Head:=Successor;
        hIndex^^.Head:=Item;
        GOTO 1;
    END
    ELSE BEGIN
        hIndex:=hIndex^^.Head;
    END;
END;
1:QueueFree(Queue);
END;

{$S Pr}
FUNCTION  InsertAfter{(Queue,Predecessor,Item:hQueue):TF};
LABEL 1;
VAR
    hIndex  : hQueue;
BEGIN
{$IFC fTracePR}    LogCall;     {$ENDC}
QueueInUse(Queue);
hIndex:=Queue^^.head;
InsertAfter:=FALSE;
WHILE (hIndex <> nil) DO BEGIN
    IF (hIndex = Predecessor) THEN BEGIN
        InsertAfter:=TRUE;
        Item^^.Head:=Predecessor^^.Head;
        Predecessor^^.Head:=Item;
        WITH Queue^^ DO IF Tail = Predecessor THEN Tail:=Item;
        GOTO 1;
    END
    ELSE BEGIN
        hIndex:=hIndex^^.head;
    END;
END;
1:QueueFree(Queue);
END;

{$S Pr}
FUNCTION  Unqueue{(Queue,Item:hQueue):TF};
LABEL 1;
VAR
    hIndex  : hQueue;
BEGIN
{$IFC fTracePR}    LogCall;     {$ENDC}
QueueInUse(Queue);
hIndex:=Queue;
Unqueue:=FALSE;
WHILE (hIndex^^.Head <> nil) DO BEGIN
    IF (hIndex^^.Head = Item) THEN BEGIN
        Unqueue:=TRUE;
        WITH hIndex^^ DO Head:=Head^^.Head;
        WITH Queue^^ DO IF Tail = Item THEN Tail:=hIndex;
        GOTO 1;
    END
    ELSE BEGIN
        hIndex:=hIndex^^.Head;
    END;
END;
1:QueueFree(Queue);
END;

{$S Pr}
FUNCTION  QueueLength{(Queue:hQueue):TC};
VAR
    ql      : TC;
    hIndex  : hQueue;
BEGIN
{$IFC fTracePR}    LogCall;     {$ENDC}
QueueInUse(Queue);
ql:=0;
hIndex:=Queue;
WHILE (hIndex^^.Head <> nil) DO BEGIN
    ql:=ql+1;
    hIndex:=hIndex^^.Head;
END;
QueueLength:=ql;
QueueFree(Queue);
END;

{$S Pr}
FUNCTION  QueuePeek{(Queue:hQueue):hQueue};
BEGIN
{$IFC fTracePR}    LogCall;     {$ENDC}
QueueInUse(Queue);
QueuePeek:=Queue^^.Head;
QueueFree(Queue);
END;

{$S Prwork}
FUNCTION  EnumerateQueue{(Queue:hQueue;FUNCTION FuncHandle(Queue:hQueue;arg:hQueue):BOOLEAN;arg:hQueue):hQueue};
{ For every element in the Queue list, EnumerateQueue calls FuncHandle(Queue,arg) until FuncHandle returns
  FALSE.  Enumeration then ceases at the element which caused FuncHandle to return FALSE and that element
  is returned as the value of EnumerateQueue.  IF FuncHandle always returns TRUE, then the
  entire list will be enumerated and NIL will be returned as the value of EnumerateQueue.
  FuncHandle is called with arg as its second parameter.}
VAR
    hIndex  : hQueue;
BEGIN
{$IFC fTracePR}    LogCall;     {$ENDC}
EnumerateQueue:=NIL;
QueueInUse(Queue);
hIndex:=Queue^^.Head;
WHILE (hIndex <> NIL) DO BEGIN
    IF FuncHandle(hIndex,arg) THEN hIndex:=hIndex^^.Head
    ELSE BEGIN
        EnumerateQueue:=hIndex;
        hIndex:=NIL;
    END;
END;
QueueFree(Queue);
END;

END.
ÿ