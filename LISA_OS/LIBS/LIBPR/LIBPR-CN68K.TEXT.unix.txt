;---------------------------------------------------------------
;                Copyright 1984, Apple Computer Inc.
;---------------------------------------------------------------

        .PROC   CNVBytes,5
; PROCEDURE CNVBytes(pIn: QDPtr; bitNum, cRowBytes, cScans: TC; pOut: TP);
;       Collect a vertical band for the Canon Ink-jet Printer.
;---------------------------------------------------------------
;       A6 offsets of parameters after link.
cbParam         .EQU    4+2+2+2+4
result          .EQU    cbParam+8       ;None!
pIn             .EQU    result-4        ;TP
bitNum          .EQU    pIn-2           ;TC
cRowBytes       .EQU    bitNum-2        ;TC
cScans          .EQU    cRowBytes-2     ;TC
pOut            .EQU    cScans-4        ;TP
;       A6 offsets of locals
cbVar           .EQU    0               ;no locals

entry   LINK    A6,#cbVar               ;
        MOVEM.L D0-D7/A1-A5, -(SP)      ;save regs
;
;  Setup input params:
;       D0: cRowBytes   D5: (cScans-1)  D6: bitNum
;       A0: pInAdj      A1: pOut
;
        MOVE.L  pIn(A6), A0             ;get pIn
        MOVE.L  pOut(A6), A1            ;get pOut
        MOVE    cRowBytes(A6), D0       ;get cRowBytes
        EXT.L   D0                      ;make long for add to A Reg
        MOVE    cScans(A6), D5          ;get cScans
        SUBQ    #1, D5                  ;  cScans := cScans-1: For DBF & pInAdj calc!
        MOVE    bitNum(A6), D6          ;get left-shift amount for desired bit

        MOVE    D5, D2                  ;Adj pIn to bottom of bitmap:
        MULU    D0, D2                  ;  pIn := pIn + cRowBytes*(cScans-1)
        ADD.L   D2, A0                  ;


;
; For each scanline, extract a bit
;
;       D0: cRowBytes   D1: outByte     D3: inWord
;       D4: bit count   D5: (cScans-1)- D6: bitNum
;       A0: pInAdj      A1: (pOut)+
;
        MOVE.L  #7, D4                  ;set up 8-count
NxtScan MOVE    (A0), D3                ;get inWord
        LSL     D6, D3                  ;shift out a bit from inWord
        ADDX    D1, D1                  ;hack: shift in x bit

        SUB.L   D0, A0                  ;adj pIn to prev. scanline

        DBF     D4, ScanEnd             ;skip the byte-store until 8 bits have been shifted in

        MOVE.B  D1, (A1)+               ;store outByte & bump pOut1
        MOVE    #7, D4                  ;reset the 8-count

ScanEnd DBF     D5, NxtScan             ;Loop thru scans


Done    MOVEM.L (SP)+, D0-D7/A1-A5      ;restore regs
        UNLK    A6                      ;
        MOVE.L  (SP)+, A0               ;pop rtn adr
        ADD.L   #cbParam, SP            ;strip params
        JMP     (A0)                    ;return
        .ASCII  'CNVBand '              ;Proc name for debugger


        .END

ÿ