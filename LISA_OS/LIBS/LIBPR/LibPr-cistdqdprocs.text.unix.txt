(*
$Exec
P?
-newdisk-intrinsic.lib
NewPr/CiStdQDProcs
{no listing}
LibPr/Temp
GLibPr/Temp
NewPr/CiStdQDProcs
$EndExec
*)
{               NOTE: The above compiles this program.                   }
{ ---------------------------------------------------------------------- }
{                Copyright 1983,1984 Apple Computer Inc.                 }
UNIT CiStdQDProcs;

{ ---------------------------------------------------------------------- }
                                INTERFACE
{ ---------------------------------------------------------------------- }

USES {$U LibOS/SysCall         }  SysCall,
     {$U LibPM/PMDecl          }  PMDecl,
     {$U LibSM/UnitStd         }  UnitStd,
     {$U LibSM/UnitHz          }  UnitHz,
     {$U LibQD/Storage         }  Storage,
     {$U LibQD/QuickDraw       }  QuickDraw,
     {$U LibFM/FontMgr         }  FontMgr,
     {$U LibWM/Events          }  Events,
     {$U LibWM/Menus           }  Menus,
     {$U LibWM/Windows         }  Windows,
     {$U LibWM/Folders         }  Folders,
     {$U libSB/WmlStd          }  WmlStd,
     {$U libSB/WmlCrs          }  WmlCrs,
     {$U LibAM/AlertMgr        }  AlertMgr,
     {$U LibPr/PrStdInfo       }  PrStdInfo,
     {$U LibPr/PrStdProcs      }  PrStdProcs,
     {$U LibPr/PrEvents        }  PrEvents,
     {$U LibPr/Queues          }  Queues,
     {$U LibPr/PrDlgMgr        }  PrDlgMgr,
     {$U LibPr/PrMgr           }  PrMgr,
     {$U-}
     {$U LibPr/CiGlobals       }  CiGlobals;

{ ---------------------------------------------------------------------- }
Procedure SetUnitGlobals(DevRecIn:TDevRec{.CiGlobals});
PROCEDURE PrStdArc      (verb: GrafVerb; r: Rect; cStart, cArc: INTEGER );
PROCEDURE PrStdBits     (bmSrc: BitMap; rSrc, rDest: Rect; cMode: Integer;
                         rgnMask: RgnHandle );
PROCEDURE PrStdLine     (newPt: Point);
PROCEDURE PrStdOval     (verb: GrafVerb; r: Rect);
PROCEDURE PrStdPoly     (verb: GrafVerb; poly: PolyHandle);
PROCEDURE PrStdRect     (verb: GrafVerb; r: Rect);
PROCEDURE PrStdRgn      (verb: GrafVerb; rgn: RgnHandle);
PROCEDURE PrStdRRect    (verb: GrafVerb; r: Rect; ovWd,ovHt: INTEGER);
PROCEDURE PrStdText     (count: INTEGER; p: QDPtr; ptNumer, ptDenom: Point);
{ ---------------------------------------------------------------------- }
                                IMPLEMENTATION
{ ---------------------------------------------------------------------- }
{$S Ci}
{$IFC fSymOK} {$D+} {$ELSEC} {$D-} {$ENDC}
{$IFC fdbgok} {$R+} {$ELSEC} {$R-} {$ENDC}

{ ---------------------------------------------------------------------- }
Var
    DevRec    : TDevRec{.CiGlobals};
    HorVRule  : Boolean;        {!EZ testing for straight horizontal or vertical lines}

PROCEDURE PrDoUL ( w: TC; p: QDPtr; cStart, cLength: TC ); Forward;
PROCEDURE PatFix ( verb: GrafVerb );                       Forward;
{ ---------------------------------------------------------------------- }
Procedure SetUnitGlobals(* (DevRecIn:TDevRec{.CiGlobals}) *);
Begin
  (* ----- I am setting this unit global variable to be false. SetUnitGlobals is called *)
  (* ----- before these procedure varibales are called.                                 *)
  HorVRule:=False;
  DevRec{.CiStdQDProcs}:=DevRecIn;
End;
{ ---------------------------------------------------------------------- }
Procedure ColorMap;
Begin
  ThePort^.FGColor:=33;
  ThePort^.BKColor:=30;
End;
{ ---------------------------------------------------------------------- }
PROCEDURE PatFix{verb: GrafVerb };
VAR
    fBlack: TF;
BEGIN
    WITH thePort^ DO BEGIN
        CASE verb OF
            frame,
            paint:  fBlack:= fEQBlk(@pnPat, @black, 8);
            invert,
            fill:   fBlack:= fEQBlk(@theport^.fillpat, @black, 8);
            erase:  fBlack:= fEQBlk(@bkPat, @black, 8);
        END;
        IF fBlack THEN patStretch:=0
        ELSE Begin
          patStretch:=DevRec.CiInfo.cPatScale;
          (* ----- If non-black pattern and hiRes and pen size is 1,1 or 2,2 adjust patscale         *)
          If (DevRec.CiCfg.CiPrMode.Resolution=HighRes) then Begin
             (* ----- If non-black, high res,horizontal or vertical lines then insure that one pixel *)
             (* ----- lines are at least two pixels wide and tall.                                   *)
             (* If (HorVRule) then Begin
                If pnSize.h=1 then PnSize.H:=3;
                If PnSize.V=1 then PnSize.H:=3;
                End;  *)
             (* ----- If non-black pattern, highres and diagonal lines then alter density of pattern. *)
             If (pnSize.h>=1) and (pnSize.h<=2) and (pnSize.v>=1) and (pnSize.v<=2) and
                (verb=frame) {and Not(HorVRule)} then  patStretch:=0;
          End;
        End;
    END;
    If (HorVRule=True) then HorVRule:=False;
END;
{ ---------------------------------------------------------------------- }
PROCEDURE PrStdArc{ verb: GrafVerb; r: Rect; cStart, cArc: INTEGER };
BEGIN
    ColorMap;
    PatFix( verb );
    StdArc( verb, r, cStart, cArc );
END;
{ ---------------------------------------------------------------------- }
PROCEDURE PrStdBits{ bmSrc: BitMap; rSrc, rDest: Rect; cMode: TC;
                     rgnMask: RgnHandle };
BEGIN
    ColorMap;
    StdBits( bmSrc, rSrc, rDest, cMode, rgnMask );
END;
{ ---------------------------------------------------------------------- }
PROCEDURE PrStdLine {newPt: Point};
BEGIN
    ColorMap;
    HorVRule:=( (Newpt.H=ThePort^.PnLoc.H) or (NewPt.V=ThePort^.PnLoc.V) );
    PatFix( frame );
    StdLine( newPt );
END;
{ ---------------------------------------------------------------------- }
PROCEDURE PrStdOval {verb: GrafVerb; r: Rect};
BEGIN
    ColorMap;
    PatFix( verb );
    StdOval( verb, r );
END;
{ ---------------------------------------------------------------------- }
PROCEDURE PrStdPoly {verb: GrafVerb; poly: PolyHandle};
BEGIN
    ColorMap;
    PatFix( verb );
    StdPoly( verb, poly );
END;
{ ---------------------------------------------------------------------- }
PROCEDURE PrStdRect {verb: GrafVerb; r: Rect};
BEGIN
    ColorMap;
    HorVRule:=True;
    PatFix( verb );
    StdRect( verb, r );
END;
{ ---------------------------------------------------------------------- }
PROCEDURE PrStdRgn  {verb: GrafVerb; rgn: RgnHandle};
BEGIN
    ColorMap;
    PatFix( verb );
    StdRgn( verb, rgn );
END;
{ ---------------------------------------------------------------------- }
PROCEDURE PrStdRRect{verb: GrafVerb; r: Rect; ovWd,ovHt: INTEGER};
BEGIN
    ColorMap;
    PatFix( verb );
    StdRRect( verb, r, ovWd,ovHt );
END;
{ ---------------------------------------------------------------------- }
PROCEDURE PrStdText {count: INTEGER; p: QDPtr; ptNumer, ptDenom: Point};
VAR
    cWidth: TC;
    fDidUL: TF;
BEGIN
    ColorMap;
    WITH DevRec.CiInfo, ThePort^ DO BEGIN
        fDidUL:=FALSE;          {Assume no UL'ing will be done}
        IF (UnderLine IN txFace) AND
           ((cULOffset <> 1) OR (cULThick <> 1) OR (cULShadow <> 1))
        THEN BEGIN
            TextFace( txFace - [Underline] );     {!New quickdraw fix. EZ}
            fDidUL:=TRUE;
            cWidth:=TextWidth( POINTER(ORD(p)), 0, count );
            PrDoUL( cWidth, p, 0, count );
        END;

        StdText( count, p, ptNumer, ptDenom );

        IF fDidUL THEN TextFace( txFace + [Underline] );     {!New quickdraw fix. EZ}
    END;
END;
{ ---------------------------------------------------------------------- }
{Does an underscore of the given width at current location}
PROCEDURE PrDoUL{ ( w: TC; p: QDPtr; cStart, cLength: TC ) };
VAR
    rRule: Rect;
    savePen: PenState;
    saveClip, rgnClip: RgnHandle;
    i, j: TC;
    finfo: FontInfo;
BEGIN
{Get the font metrics}
    GetFontInfo( finfo );

    WITH ThePort^ DO BEGIN

{Save existing port stuff}
        GetPenState( savePen );         {save pen state}

{Figure out the rectangle that just contains the underscore and clip to it}
        SetRect( rRule, 0, DevRec.CiInfo.cULOffset, w, DevRec.CiInfo.cULOffset+DevRec.CiInfo.cULThick );
        OffsetRect( rRule, pnLoc.h, pnLoc.v );

{Do the underscore}
        PenMode( txMode+8 );            {Swap in text mode to the pen}
        PenPat( black );
        PaintRect( rRule );             {Draw the UL}

{Do all the nasty stuff for text if needed}
        IF cLength > 0 THEN BEGIN
            rgnClip:=NewRgn;
            saveClip:=NewRgn;

            GetClip( saveClip );

            RectRgn( rgnClip, rRule );
            SectRgn( rgnClip, saveClip, rgnClip );
            SetClip( rgnClip );

            txMode:=4-txMode;     {Flip the text mode}
            FOR i:=-finfo.descent TO DevRec.CiInfo.cUlOffset-1 DO BEGIN
                FOR j:=-DevRec.CiInfo.cULShadow TO DevRec.CiInfo.cULShadow DO BEGIN
                    WITH savePen.pnLoc DO MoveTo( h+j, v+i );
                    DrawText( POINTER(ORD(p)), cStart, cLength );
                END;
            END;
            txMode:=4-txMode;     {Flip back the text mode}

            SetClip( saveClip );

            DisposeRgn( rgnClip );
            DisposeRgn( saveClip );
        END;

{Restore port stuff}
        SetPenState( savePen );         {restore pen state}

    END; {with ThePort^}
END; {PrDoUl}
{ ---------------------------------------------------------------------- }
End. {Unit}

ÿ