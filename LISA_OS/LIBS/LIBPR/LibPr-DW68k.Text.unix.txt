
          ;_______________________________________________________________________
          ;|                                                                      |
          ;|                                                                      |
          ;|                      Daisy Wheel -- Bit Finder                       |
          ;|                                                                      |
          ;|______________________________________________________________________|

 ;{------------------------------------------------------------------------------------------}
 ;{                           Copyright 1983-1984, Apple Computer Inc.                       }
 ;{------------------------------------------------------------------------------------------}


          .seg      'Rh'

;FUNCTION FindBit(base,startBit,limitBit:LONGINT):LONGINT;
;         base     is base address from which to search
;         startBit is number of bits from base
;         limitBit is farthest bit away to look for
;         Returns  location of found bit or -1 if no more bits (i.e. limit reached)
          .PROC     FindBit

result    .equ      16
base      .equ      12
startbit  .equ      8
limitbit  .equ      4
return    .equ      0

finalbyte .equ      10
finalbit  .equ      6

; Free Registers   D0-D2/A0-A1

EntryPt   move.l    limitbit(a7),d0     ;limitbit
          move.l    startbit(a7),d1     ;startbit
          move.l    base(a7),a1         ;base

          asr.l     #3,d0               ;limit byte number
          move.w    d0,finalbyte(a7)    ;save limit byte
          not.w     finalbit(a7)        ;reverse bit order
          and.w     #7,finalbit(a7)     ;clip off garbage

          move.w    d1,d2               ;current bit number
          asr.l     #3,d1               ;current byte number
          sub.l     d1,d0               ;actual byte count now in d0
          and.w     #7,d2               ;clip off garbage
          beq.s     tstbytes            ;zero => on byte boundary
          not.w     d2                  ;reverse bit order
          and.w     #7,d2               ;clip off garbage

tstbit    btst      d2,0(a1,d1.l)       ;test bit
          dbne      d2,tstbit           ;terminate if bit is on or
          bne.s     foundbit            ;continue until last bit

          addq.l    #1,d1               ;new byte number
          subq.l    #1,d0               ;update byte count
tstbytes  add.l     d1,a1               ;byte number + base = current byte

tstloop   tst.b     (a1)+               ;test next byte
          dbne      d0,tstloop          ;one of them on?
          bne.s     foundbyte           ;test this byte for on bits

rtnminus  not.l     result(a7)          ;minus one returned, nothing found
done      move.l    (a7)+,a0            ;return address
          add.l     #12,a7              ;fix stack
          jmp       (a0)                ;return

foundbit  cmp.w     finalbyte(a7),d1    ;is this the last byte?
          bge.s     bitsend             ;if currentbyte (d1) >= finalbyte then bitsend

wherebit  not.w     d2                  ;retransform bit order
          and.l     #7,d2               ;clip off garbage
          asl.l     #3,d1               ;reconstruct bit position
          add.l     d2,d1               ;final bit location
          move.l    d1,result(a7)       ;store result
          bra.s     done                ;quit

bitsend   cmp.w     finalbit(a7),d2     ;compare start bit to limit bit
          ble.s     wherebit            ;if startbit (d2) <= finalbit then wherebit
          bra.s     rtnminus            ;else return minus one, we're done

foundbyte move.l    a1,d1               ;actual current start byte number
          sub.l     base(a7),d1         ;number of bytes tested
          subq.l    #1,d1               ;make up for last auto increment
          move.l    base(a7),a1         ;get base again
          move.l    #7,d2               ;set to start on first bit of byte
          bra.s     tstbit              ;go test bits

          .END
ÿ