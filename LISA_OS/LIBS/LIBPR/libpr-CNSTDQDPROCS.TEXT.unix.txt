{                Copyright 1984, Apple Computer Inc.                     }
UNIT CNStdQDProcs;

{ ---------------------------------------------------------------------- }
                                INTERFACE
{ ---------------------------------------------------------------------- }

USES {$U LibOS/SysCall         }  SysCall,
     {$U LibPM/PMDecl          }  PMDecl,
     {$U LibSM/UnitStd         }  UnitStd,
     {$U LibSM/UnitHz          }  UnitHz,
     {$U LibQD/Storage         }  Storage,
     {$U LibQD/QuickDraw       }  QuickDraw,
     {$U LibFM/FontMgr         }  FontMgr,
     {$U LibWM/Events          }  Events,
     {$U LibWM/Menus           }  Menus,
     {$U LibWM/Windows         }  Windows,
     {$U LibWM/Folders         }  Folders,
     {$U libSB/WmlStd          }  WmlStd,
     {$U libSB/WmlCrs          }  WmlCrs,
     {$U LibAM/AlertMgr        }  AlertMgr,
     {$U LibPr/PrStdInfo       }  PrStdInfo,
     {$U LibPr/PrStdProcs      }  PrStdProcs,
     {$U LibPr/PrEvents        }  PrEvents,
     {$U LibPr/Queues          }  Queues,
     {$U LibPr/PrDlgMgr        }  PrDlgMgr,
     {$U LibPr/PrMgr           }  PrMgr,
     {$U-}
     {$U LibPr/CNGlobals       }  CNGlobals;


{ ---------------------------------------------------------------------- }
{QD cover procs.  Never called directly by applications}
Procedure SetUnitGlobals (CNRecIn: TDevRec);
PROCEDURE PrStdArc (verb: GrafVerb; r: Rect; cStart, cArc: TC );
PROCEDURE PrStdBits (bmSrc: BitMap; rSrc, rDest: Rect; cMode: TC; rgnMask: RgnHandle );
PROCEDURE PrStdLine (newPt: Point);
PROCEDURE PrStdOval (verb: GrafVerb; r: Rect);
PROCEDURE PrStdPoly (verb: GrafVerb; poly: PolyHandle);
PROCEDURE PrStdRect (verb: GrafVerb; r: Rect);
PROCEDURE PrStdRgn (verb: GrafVerb; rgn: RgnHandle);
PROCEDURE PrStdRRect (verb: GrafVerb; r: Rect; ovWd, ovHt: TC);
PROCEDURE PrStdText (count: TC; p: QDPtr; ptNumer, ptDenom: Point);
{ ---------------------------------------------------------------------- }
                                IMPLEMENTATION
{ ---------------------------------------------------------------------- }
VAR
    PrCNRec: TDevRec;

PROCEDURE PrDoUL (w: TC; p: QDPtr; cStart, cLength: TC);    FORWARD;
PROCEDURE PatFix (verb: GrafVerb);                          FORWARD;
PROCEDURE ColorMap (VAR color: TL);                         FORWARD;
PROCEDURE FixColors;                                        FORWARD;
{ ---------------------------------------------------------------------- }
PROCEDURE SetUnitGlobals {CNRecIN:TDevRec};
Begin
  PrCNRec := CNRecIn;
End;
{ ---------------------------------------------------------------------- }
PROCEDURE ColorMap {VAR color: TL};
VAR color32: T32;
BEGIN
  color32.l := color;
  IF NOT color32.i1.f15 THEN BEGIN
    CASE color OF
      blackColor:     color32.l := CNblack;
      whiteColor:     color32.l := CNwhite;
      redColor:       color32.l := CNred;
      greenColor:     color32.l := CNgreen;
      blueColor:      color32.l := CNblue;
      cyanColor:      color32.l := CNcyan;
      magentaColor:   color32.l := CNmagenta;
      yellowColor:    color32.l := CNyellow;
    END;
    color32.i1.f15 := TRUE;
    color := color32.l;
  END;
END;
{ ---------------------------------------------------------------------- }
PROCEDURE FixColors;
Begin
  ColorMap (ThePort^.FGColor);
  ColorMap (ThePort^.BKColor);
End;
{ ---------------------------------------------------------------------- }
PROCEDURE PatFix {verb: GrafVerb };
VAR fBlack: TF;
BEGIN
  WITH thePort^ DO BEGIN
    CASE verb OF
      frame,
      paint:  fBlack:= fEQBlk (@pnPat, @black, 8);
      invert,
      fill:   fBlack:= fEQBlk (@theport^.fillpat, @black, 8);  {!New QuickDraw Fix}
      erase:  fBlack:= fEQBlk (@bkPat, @black, 8);
    END;
    IF fBlack THEN patStretch:=0
    ELSE patStretch := PrCNRec.CNInfo.cPatScale;
  END;                                                            {!New QuickDraw Fix}
END;

{ ---------------------------------------------------------------------- }
PROCEDURE PrStdArc {verb: GrafVerb; r: Rect; cStart, cArc: TC};
BEGIN
  FixColors;
  PatFix (verb);
  StdArc (verb, r, cStart, cArc);
END;

{ ---------------------------------------------------------------------- }
PROCEDURE PrStdBits {bmSrc: BitMap; rSrc, rDest: Rect; cMode: TC;
                     rgnMask: RgnHandle};
BEGIN
  FixColors;
  StdBits (bmSrc, rSrc, rDest, cMode, rgnMask);
END;

{ ---------------------------------------------------------------------- }
PROCEDURE PrStdLine {newPt: Point};
BEGIN
  FixColors;
  PatFix (frame);
  StdLine (newPt);
END;

{ ---------------------------------------------------------------------- }
PROCEDURE PrStdOval {verb: GrafVerb; r: Rect};
BEGIN
  FixColors;
  PatFix (verb);
  StdOval (verb, r);
END;

{ ---------------------------------------------------------------------- }
PROCEDURE PrStdPoly {verb: GrafVerb; poly: PolyHandle};
BEGIN
    FixColors;
    PatFix (verb);
    StdPoly (verb, poly);
END;

{ ---------------------------------------------------------------------- }
PROCEDURE PrStdRect {verb: GrafVerb; r: Rect};
BEGIN
    FixColors;
    PatFix (verb);
    StdRect (verb, r);
END;


{ ---------------------------------------------------------------------- }
PROCEDURE PrStdRgn {verb: GrafVerb; rgn: RgnHandle};
BEGIN
    FixColors;
    PatFix (verb);
    StdRgn (verb, rgn);
END;

{ ---------------------------------------------------------------------- }
PROCEDURE PrStdRRect {verb: GrafVerb; r: Rect; ovWd, ovHt: TC};
BEGIN
    FixColors;
    PatFix (verb);
    StdRRect (verb, r, ovWd, ovHt);
END;

{ ---------------------------------------------------------------------- }
PROCEDURE PrStdText {count: TC; p: QDPtr; ptNumer, ptDenom: Point};
VAR
    cWidth: TC;
    fDidUL: TF;
BEGIN
  FixColors;
  WITH PrCNRec.CNInfo, ThePort^ DO BEGIN
    fDidUL := FALSE;          {Assume no UL'ing will be done}
    IF (UnderLine IN txFace)
       AND ((cULOffset <> 1)
            OR (cULThick <> 1)
            OR (cULShadow <> 1))
    THEN BEGIN
           TextFace (txFace - [Underline]);     {!New quickdraw fix. EZ}
           fDidUL := TRUE;
           cWidth := TextWidth (POINTER(ORD(p)), 0, count);
           PrDoUL (cWidth, p, 0, count);
         END;

    StdText (count, p, ptNumer, ptDenom);

    IF fDidUL THEN TextFace (txFace + [Underline]);     {!New quickdraw fix. EZ}
  END;
END;
{ ---------------------------------------------------------------------- }
{Does an underscore of the given width at current location}
PROCEDURE PrDoUL {w: TC; p: QDPtr; cStart, cLength: TC};
VAR
    rRule:               Rect;
    savePen:             PenState;
    saveClip, rgnClip:   RgnHandle;
    i, j:                TC;
    finfo:               FontInfo;
BEGIN
WITH PrCNRec.CNInfo DO BEGIN
  { ----- Get the font metrics}
  GetFontInfo (finfo);

  WITH ThePort^ DO BEGIN
    { ----- Save existing port stuff}
    GetPenState (savePen);         {save pen state}

    { ----- Figure out the rectangle that just contains the underscore and clip to it}
    SetRect (rRule, 0, cULOffset, w, cULOffset + cULThick);
    OffsetRect (rRule, pnLoc.h, pnLoc.v);

    { ----- Do the underscore}
    PenMode (txMode + 8);          {Swap in text mode to the pen}
    PenPat (black);
    PaintRect (rRule);             {Draw the UL}

    { ----- Do all the nasty stuff for text if needed}
    IF cLength > 0 THEN BEGIN
      rgnClip  := NewRgn;
      saveClip := NewRgn;

      GetClip (saveClip);

      RectRgn (rgnClip, rRule);
      SectRgn (rgnClip, saveClip, rgnClip);
      SetClip (rgnClip);

      txMode := 4 - txMode;     {Flip the text mode}
      FOR i := - finfo.descent TO cUlOffset - 1 DO BEGIN
        FOR j := - cULShadow TO cULShadow DO BEGIN
          WITH savePen.pnLoc DO MoveTo (h + j, v + i);
          DrawText (POINTER(ORD(p)), cStart, cLength);
        END;
      END;
      txMode := 4 - txMode;     {Flip back the text mode}

      SetClip (saveClip);

      DisposeRgn (rgnClip);
      DisposeRgn (saveClip);
    END;

    { ----- Restore port stuff}
    SetPenState (savePen);         {restore pen state}

  END; {with ThePort^}
END;
END; {PrDoUl}
{ ---------------------------------------------------------------------- }
End. {Unit}

ÿ