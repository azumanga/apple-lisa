{ Copyright 1983, Apple Computer Inc. }

(* File L:F32Common, Version 2 February 1983. *)

(* Common subroutines for segment F32. *)
        
        (* Following procedures are for use by composite floating point operations. *)
        
procedure statusprelude ( var fps : fp_statustype ) ;
        (* Save floating point status in fps, then clears exceptions and traps. *)
begin (* statusprelude *)
fps := fpcb_.block.status ;
clrexcepset ;
clrtrapset ;
end   (* statusprelude *) ;

procedure statuspostlude ( var fps : fp_statustype ; var trapcoming : boolean ) ;
        (* Restores floating point status from fps, puts new exceptions in texcep
        and ORs them into excep, and sets trapcoming if a floating
        point trap should occur. *)
var
es, ts, newes, oldes : excepset ;
begin (* statuspostlude *)
getexcepset( newes ) ; (* Newes gets exceptions generated by composite operation. *)
fpcb_.block.status := fps ; (* Restore previous status. *)
settexcepset( newes ) ; (* Save new exceptions in texcep. *)
getexcepset( oldes ) ; (* Get old exceptions. *)
es := oldes + newes ; (* OR them together. *)
setexcepset( es ) ; (* Put them all in excep. *)
gettrapset( ts ) ;  (* Get trap flags. *)
trapcoming := (ts * es) <> [] ;
end   (* statuspostlude *) ;

procedure f32postoutput ( name : fp_string ; var x : real ; var s : fp_string ) ;
        (* Routine to set up trapping for a Pascal Real Arithmetic real to ascii
        routine. *)

var
r : fp_traprecord ;

begin (* f32postoutput *)
with r do
        begin (* with *)
        gettexcepset( es ) ;
        optype1 := tfp_real   ;
        op1 :=  @ x  ;
        op2 := nil ;
        resulttype := tfp_string ;
        result :=  @ s   ;
        procname := @ name ;
        fp_postoperation ( r) ;
        end   (* with *) ;
end   (* f32postoutput *) ;

ÿ