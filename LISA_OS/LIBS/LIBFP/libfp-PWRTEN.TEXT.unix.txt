        PAGE
        .proc  mc%PWRTEN ; 0,0
        .ref   mc%mul_opt,mc%round
;
;
;************************************************************************
;
;
;       P O W E R  O F  T E N
;
;
;************************************************************************
;
;
;       On entry D7 contains a binary integer (0 =< d7 <8192). The result is
;       an extended number that represents its power of ten.
;
;       D7 = binary number to find power of ten of
;       D0-D2 = registers containing the result
;
;       On exit d4-d7, a0 are restored and the result is
;       in d0-d2.
;
;
; Revised 16 Jan 83 by Hough to compute powers of ten without checking
; for overflow or underflow in order to properly format small numbers.
;
        debugbegin
        MOVEM.L D4-D7/A1/A0,-(A7)     ; SAVE CALLER'S REGISTERS
        ANDI    #8191,D7      ; MAKE D7 IN RANGE
        MOVE    D7,D4         ; GET BINARY NUMBER
        ANDI    #$1F,D4       ; GET LOWER 5 BITS
        MULU    #12,D4        ; MAKE INTO INDEX
        MOVEM.L TEN0(D4),D0-D2   ; PUT FIRST TABLE VALUE IN RESULT motorola source
        ;MOVEM.L TEN0-2(D4),D0-D2   ; PUT FIRST TABLE VALUE IN RESULT
                                   ; bypass assembler bug
; get higher powers of ten, if any
        LEA     TEN32,A0      ; GET ADDRESS OF START OF TABLE
        LSR     #5,D7         ; THROW AWAY FIRST 5 BITS - SET Z
;
@1
        beq      @3
          MOVE.L  (A0)+,(A2) ; GET NEXT TABLE VALUE
          MOVE.L (A0)+,4(A2)
          MOVE.L (A0)+,8(A2)
          CLR.L   D3          ; CLEAR GUARD mc%round AND STICKY
          LSR      #1,D7      ; SET Z AND C BITS
          bcc      @2         ; IF THIS POWER OF 2 SET
            MOVEM.L D7/A0,-(A7)
            MOVE.B MODE(A3),-(A7) ; PUSH CURRENT MODE BITS
           ;MOVE.B #(RN+(EXTENDED<<4)),MODE(A3) ; DO MULTIPLY TO mc%round NEAREST
            move.b #<rn+<extended*16>>,mode(a3)
           ;.word $177C,$0000,$0004     this is how this instruction originally
           ;                            assembled.
            jsr mc%mul_opt       ; MULTIPLY RESULT * NEXT TABLE VALUE
                                ; without checking for exponent spill.
            jsr mc%round           ; round power of ten.
            MOVE.B (A7)+,MODE(A3) ; RESTORE CURRENT MODE BITS
            MOVEM.L (A7)+,D7/A0   ; RELOAD D7 AND SET Z BIT
            TST.W D7
@2
          bra   @1
@3
        MOVEM.L (A7)+,D4-D7/A1/A0 ; RESTORE CALLER'S REGS
        RTS
        PAGE
;
;
;
;       Powers of Ten Table
;
;
;
TEN0    EQU     *
;        dc.w    0      *********************** replace for cross-assembler on u
        .word   $0001,$0000,$8000,$0000,$0000,$0000   ; 0
        .word   $0001,$0003,$A000,$0000,$0000,$0000   ; 1
        .word   $0001,$0006,$C800,$0000,$0000,$0000   ; 2
        .word   $0001,$0009,$FA00,$0000,$0000,$0000   ; 3
        .word   $0001,$000D,$9C40,$0000,$0000,$0000   ; 4
        .word   $0001,$0010,$C350,$0000,$0000,$0000   ; 5
        .word   $0001,$0013,$F424,$0000,$0000,$0000   ; 6
        .word   $0001,$0017,$9896,$8000,$0000,$0000   ; 7
        .word   $0001,$001A,$BEBC,$2000,$0000,$0000   ; 8
        .word   $0001,$001D,$EE6B,$2800,$0000,$0000   ; 9
        .word   $0001,$0021,$9502,$F900,$0000,$0000   ; 10
        .word   $0001,$0024,$BA43,$B740,$0000,$0000   ; 11
        .word   $0001,$0027,$E8D4,$A510,$0000,$0000   ; 12
        .word   $0001,$002B,$9184,$E72A,$0000,$0000   ; 13
        .word   $0001,$002E,$B5E6,$20F4,$8000,$0000   ; 14
        .word   $0001,$0031,$E35F,$A931,$A000,$0000   ; 15
        .word   $0001,$0035,$8E1B,$C9BF,$0400,$0000   ; 16
        .word   $0001,$0038,$B1A2,$BC2E,$C500,$0000   ; 17
        .word   $0001,$003B,$DE0B,$6B3A,$7640,$0000   ; 18
        .word   $0001,$003F,$8AC7,$2304,$89E8,$0000   ; 19
        .word   $0001,$0042,$AD78,$EBC5,$AC62,$0000   ; 20
        .word   $0001,$0045,$D8D7,$26B7,$177A,$8000   ; 21
        .word   $0001,$0049,$8786,$7832,$6EAC,$9000   ; 22
        .word   $0001,$004C,$A968,$163F,$0A57,$B400   ; 23
        .word   $0001,$004F,$D3C2,$1BCE,$CCED,$A100   ; 24
        .word   $0001,$0053,$8459,$5161,$4014,$84A0   ; 25
        .word   $0001,$0056,$A56F,$A5B9,$9019,$A5C8   ; 26
        .word   $0001,$0059,$CECB,$8F27,$F420,$0F3A   ; 27  EXACT DOWN TO HERE
        .word   $0001,$005D,$813F,$3978,$F894,$0984   ; 28  ROUNDED FROM HERE DO
        .word   $0001,$0060,$A18F,$07D7,$36B9,$0BE5   ; 29
        .word   $0001,$0063,$C9F2,$C9CD,$0467,$4EDF   ; 30
        .word   $0001,$0066,$FC6F,$7C40,$4581,$2296   ; 31
TEN32   .word   $0001,$006A,$9DC5,$ADA8,$2B70,$B59E   ; 32
        .word   $0001,$00D4,$C278,$1F49,$FFCF,$A6D5   ; 64
        .word   $0001,$01A9,$93BA,$47C9,$80E9,$8CE0   ; 128
        .word   $0001,$0352,$AA7E,$EBFB,$9DF9,$DE8E   ; 256
        .word   $0001,$06A4,$E319,$A0AE,$A60E,$91C7   ; 512
        .word   $0001,$0D49,$C976,$7586,$8175,$0C17   ; 1024
        .word   $0001,$1A93,$9E8B,$3B5D,$C53D,$5DE5   ; 2048
        .word   $0001,$3526,$C460,$5202,$8A20,$979B   ; 4096

        debugend 'MC%PWRTE',0

ÿ