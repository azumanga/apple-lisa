        
        (* File LibFP/SaneImp2, Version 22 February 1984. *)
        
        {-----------------------------------------------------------------
        ** Numerical 'library' procedures and functions.
        -----------------------------------------------------------------}

        procedure RemX    { (x : Extended; var y : Extended;
                                                         var quo : integer) } ;
                                                                      external;
            { new y := remainder of { ({ (old y) / x), such that
                       |new y| <= |x| / 2;
              quo := low order seven bits of integer quotient y / x,
                     so that -127 <= quo <= 127.                     }
        procedure SqrtX   { (var x : Extended) } ;   external;
            { x := sqrt { (x) }
        procedure RintX   { (var x : Extended) } ;   external;
            { x := rounded value of x }
        
        {$X- }
        procedure NegX    { (var x : Extended) } ;
        begin
            x[0] := x[0] + $8000 ; (* Faster than calling assembler. *)
        end;
            { x := -x }
        {$X+ }
        
        procedure AbsX    { (var x : Extended) } ;   external;
            { x := |x| }
        procedure CpySgnX { (var x : Extended; y : Extended) } ;   external;
            { x := x with the sign of y }



        procedure NextSxxx (var x : Single; var y : Single); external;
        procedure NextS   { (var x : Single;   y : Single) } ;
        begin
            NextSxxx(x, y)
        end;

        procedure NextD   { (var x : Double;   y : Double) } ; external;

        procedure NextX   { (var x : Extended; y : Extended) } ; external;


        function  ClassSxxx(var x : Single; var sgn : integer) : NumClass;
                                                                external;
        function  ClassS  { (x : Single;   var sgn : integer) : NumClass } ;
        begin
            ClassS := ClassSxxx(x, sgn)
        end;
        function  ClassD  { (var x : Double;   var sgn : integer) : NumClass } ;
                                                                external;
        function  ClassC  { (var x : Comp;     var sgn : integer) : NumClass } ;
                                                                external;
        function  ClassX  { (var x : Extended; var sgn : integer) : NumClass } ;
                                                                external;
            { sgn := sign of x { (0 for pos, 1 for neg) }

        procedure ScalbXxxx (var n : integer; var y : Extended); external;
        procedure ScalbX { (n : integer; var y : Extended) } ;
        begin
            ScalbXxxx(n, y)
        end;
            { y := y * 2^n }
        procedure LogbX  { (var x : Extended) } ; external;
            { returns unbiased exponent of x }
{^ne 16 }
        {-----------------------------------------------------------------
        ** Manipulations of the static numeric state.
        -----------------------------------------------------------------}

        procedure SetRnd  { (r : RoundDir) } ;   external;

        procedure SetEnv;   external;
        
        procedure ProcExtxxx (var e : Environ); external;
        procedure ProcExit  {(e : Environ)} ;
        begin
            ProcExtxxx(e)
        end;

        function  GetRnd  { : RoundDir } ;          external;
        procedure GetEnv  { (var e : Environ) } ;   external;
        procedure ProcEntry { (var e : Environ) } ; external;

        function  TestXcp { (x : Exception) : boolean } ;          external;
        procedure SetXcp  { (x : Exception; OnOff : boolean) } ;   external;
        function  TestHlt { (x : Exception) : boolean } ;          external;
        procedure SetHlt  { (x : Exception; OnOff : boolean) } ;   external;

    {------------------------------------------------------------------------}

ÿ