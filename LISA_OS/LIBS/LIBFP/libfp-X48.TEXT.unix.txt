; Copyright 1983, Apple Computer Inc.

        
;       File L:X48, Version 31 October 1982.
        
        .proc   %%%x48
        .def    x%sto,x%tos,x%comp,x%mul,x%div,x%int,x%pot,x%dec
        .def    %x2prelude,%xpostlude
        .ref    %xcomp,%xmul,%xdiv,%xint,%xdec
        .ref    %xpot

        ; Routine %X2PRELUDE saves a3/d4-d7,
        ; loads Y into D4/D5,
        ; loads X into D1/D2.
        ; Uses A0, A1, A3, D1, D2, D4, D5.
        
%x2prelude 
        debugbegin
        movea.l (sp)+,a0     ; A0 gets x2%prelude return address.
        movem.l a3/d4-d7,-(sp)  ; Save registers.
        xload   28(sp),a1,d4,d5 ; Load Y into D4/D5.
        xload   32(sp),a1,d1,d2 ; Load X into D1/D2.
        initfpcb                ; Set up pointer to FPCB.
        jmp     (a0)            ; Return.
        debugend '%x2prelu',0

        ; Routine %XPOSTLUDE restores registers a3/d4-d7,
        ; then stores the result z from D1/D2 to the address on the stack,
        ; then returns to the previous caller.
        ; %xpostlude should be called by JMP.

%xpostlude 
        debugbegin
        endop                ; Process exceptions.
        movem.l (sp)+,a3/d4-d7  ; Restore registers.
        movea.l (sp)+,a0        ; A0 gets previous return address.
        movea.l (sp)+,a1        ; A1 gets address of z.
        addq.l  #8,sp           ; Pass over addresses of x and y.
        storex  a1,d1,d2        ; Store z and return.
        debugend '%xpostlu',0

; procedure x%sto ( r : real ; var x : internal ) ;
;       x := r ;
        .ref    f32%aunpack
x%sto
        debugbegin
        saveret
        movea.l  (sp)+,a1        ; Address of X.
        move.l  (sp)+,d0        ; D0 gets R.
        movem.l a3/d4-d7,-(sp)  ; Save registers.
        initfpcb
        jsr     f32%aunpack
        endop
        movem.l (sp)+,a3/d4-d7  ; Restore registers.
        storex  a1,d1,d2
        debugend 'x%sto',3

; function  x%tos ( var x : internal ) : real ;
;       r := x 
        .ref    f32%pack
        
x%tos
        debugbegin
        saveret
        loadx   a1,d1,d2        ; Get X.
        bne.s   @1              ; Branch if non-zero significand.
        move.l  #kzero,d0       ; Mark 'zero'.
        bra.s   @2
@1      move.l  #kfinite,d0     ; Mark 'finite'.
@2      movem.l a3/d4-d7,-(sp)  ; Save registers.
        initfpcb               ; Because Packr will OR texcep into excep.
        jsr     f32%pack
        movem.l (sp)+,a3/d4-d7  ; Restore registers.
        move.l  d0,(sp)        ; Store result.
        jmp     (a0)
        debugend 'x%tos',3

; function x%comp ( var x : internal ; var y : internal ) : integer ;
; Returns -1 if x < y, 0 if x = y, +1 if x > y.
        .ref    %xcomp
        
x%comp
        debugbegin
        movem.l d3-d5,-(sp)     ; Save registers.
        xload   16(sp),a0,d4,d5 ; Load y.
        xload   20(sp),a0,d1,d2 ; Load x.
        ;initfpcb               ; Not needed for %xcomp
        jsr     %xcomp
        ;endop
        move    d3,24(sp)        ; Store result.
        movem.l (sp)+,d3-d5     ; Restore registers.
        movea.l  (sp)+,a0        ; A0 gets x%comp return address.
        addq.l  #8,sp           ; Pass over x and y addresses.
        jmp     (a0)            ; Return
        debugend 'x%comp',2
        
; procedure x%mul ( var x, y, z : internal ) ; 
;       z := x * y
        .ref    %xmul
        
x%mul
        debugbegin
        jsr     %x2prelude
        jsr     %xmul
        jmp     %xpostlude
        debugend 'x%mul',3
        
; procedure x%div ( var x, y, z : internal ) ; 
;       z := x / y
        .ref    %xdiv
        
x%div
        debugbegin 
        jsr     %x2prelude
        jsr     %xdiv
        jmp     %xpostlude
        debugend 'x%div',3
        
; procedure x%int ( var x, z : internal ) ;
;       z := integralpart ( x ) 
        .ref    %xint
        
x%int
        debugbegin
        saveret
        move.l  (sp)+,a2        ; Address of Z.
        loadx   a1,d1,d2        ; Load X.
        jsr     %xint
        storex  a2,d1,d2        ; Save Z.
        debugend 'x%int',3
        
; procedure x%pot ( p : integer ; var x : internal ) ;
        .ref    %xpot
        
x%pot
        debugbegin
        saveret
        move.l  (sp)+,a1        ; Address of X.
        move    (sp)+,d0        ; D0 gets P.
        movem.l a3/d4-d7,-(sp)  ; Save registers.
        initfpcb
        jsr     %xpot
        endop
        movem.l (sp)+,a3/d4-d7  ; Restore registers.
        storex  a1,d1,d2        ; Store X.
        debugend 'x%pot',3

; procedure x%dec ( var s : fp_string  ; var x : internal ; var e : integer ) ;
;       x * 10 ** e := s, a string of ascii digits.
        .ref    %xdec
        
x%dec
        debugbegin
        movem.l a3/d4-d7,-(sp)  ; Save registers.
        movea.l 32(sp),a1       ; A1 gets address of s.
        initfpcb
        jsr     %xdec
        endop                   ; Process exceptions.
        movem.l (sp)+,a3/d4-d7  ; Restore registers.
        movea.l (sp)+,a0        ; A0 gets x%dec return address.
        movea.l (sp)+,a1        ; A1 gets address of e.
        movea.l (sp)+,a2        ; A2 gets address of x.
        addq.l  #4,sp           ; Pass over address of s.
        move    d3,(a1)         ; Store e.
        storex  a2,d1,d2        ; Store x.
        debugend 'x%dec',3

ÿ