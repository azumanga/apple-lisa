        PAGE
        .proc   mc%UTIL  ; 0,0

      .def    mc%iop
;
;
;************************************************************************
;
;
;       U T I L I T Y   R O U T I N E S
;
;       REVISION HISTORY:
;         DATE          REVISIONIST     REASON
;       23.APR.81       G.WALKER        mc%iop NOW RETURNS A NAN IN D0-D3
;        7.JUL.81       D.CAWTHORN      CHANGED TO EXORMACS STRUCTURED
;                                          ASM SYNTAX
;        3.AUG.81       G.WALKER        ADD COMMENT REFFERING TO "FIX"
;       16 Jan 83       Hough           Place mc%iop code in NaN significand.
;
;************************************************************************
;
;       THESE ARE ROUTINES USED BY VARIOUS FP FUNCTIONS.
;
;
;
;***********************************************************************
;
;  mc%iop
;
;       SET THE mc%iop BIT IN THE TEMPORARY STATUS AND STORE THE
;       PROPER mc%iop CODE IN THE STATUS
;
;       NOTE: THIS CODE IS DUPLICATED IN THE ROUTINE "FIX_B" AND
;               MODIFICATIONS HERE MUST ALSO BE DONE THERE.
;
;  ON ENTRY:
;       D0 CONTAINS THE mc%iop CODE RIGHT JUSTIFIED
;       A3 CONTAINS A POINTER TO THE FPRB
;
;  ON EXIT:
;       D0-D2 =  NAN WITH INSTAD ADDRESS
;       ALL OTHER REGISTERS RESTORED
;
;************************************************************************
;
mc%iop     EQU     *
        debugbegin
        ANDI.B  #$03,STATUS(A3)     ; CLEAR OUT OLD mc%iop CODE
        LSL.B   #2,D0               ; POSITION mc%iop CODE
        OR.B    D0,STATUS(A3)       ; SET IN NEW CODE
        BSET    #ENIOP_M,TEMPSTAT(A3) ; SET mc%iop STATUS BIT
        lsr     #2,d0           ; Unshift.
        andi.l  #$7f,d0         ; Clear extra bits.
        move.l  d0,d1           ; D1 gets mc%iop code in byte 0.
        swap    d1              ; D1 gets mc%iop code in byte 2.
        MOVE.L  #$3FFF+NAN_L,D0 ; Set up NaN exponent and code.
        clr.l   d2              ; Clear lower significand.
        RTS
        debugend 'MC%IOP',2

ÿ