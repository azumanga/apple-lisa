;-----------------------------------------------------------
; 02JUL82: WRITTEN J. COONEN
; 12AUG82: TIDIED UP (JTC)
; 01SEP82: RND MODE ENCODINGS CHANGED (JTC)
; 12DEC82: PROJ MODE OUT (JTC)
;
; ASSUME REGISTER MASK: DO-ARITHMETIC
;-----------------------------------------------------------

;-----------------------------------------------------------
; TO SUBTRAC JUST FLIP THE SIGN AND XOR-SIGN BITS IN D6.B.
;-----------------------------------------------------------
SUBTOP:
        EORI.B  #$A0,D6                 ; BITS #7 AND #5
        
ADDTOP:
        .IF PCOK
        MOVE.W  ADDCASE(PC,D3),D3       ; INDEX TO D3
        JMP     ADDTOP(PC,D3)           ; CALL SPECIAL CASE
        .ELSE
        MOVE.W  ADDCASE(D3),D3
        JMP     ADDTOP(D3)
        .ENDC

ADDCASE:                                ; DST + SRC
        .WORD   ADDNUM - ADDTOP         ; NUM + NUM
        .WORD   ADDS0  - ADDTOP         ; NUM + 0
        .WORD   RSRC   - ADDTOP         ; NUM + INF

        .WORD   ADDD0  - ADDTOP         ;   0 + NUM
        .WORD   ADD00  - ADDTOP         ;   0 + 0
        .WORD   RSRC   - ADDTOP         ;   0 + INF

        .WORD   RDSTSGN- ADDTOP         ; INF + NUM
        .WORD   RDSTSGN- ADDTOP         ; INF + 0
        .WORD   ADDINF - ADDTOP         ; INF + INF

;-----------------------------------------------------------
; ADD 2 FINITE NUMBERS HAS TWO SPECIAL CASES, WHEN ONE OF
; THE SRC OR DST IS 0.  IN THAT CASE JUST BE SURE NONZERO
; OPERAND IS PLACED IN RESULT BUFFER, TO BE SUBJECT TO THE
; COERCION TO THE DESTINATION.
;-----------------------------------------------------------
ADDNUM:

;-----------------------------------------------------------
; FIRST ALIGN SO "LARGER" EXP IN A4, LARGER SIGN IN D6.#7
; "SMALLER" DIGITS ARE IN D4,5 FOR SHIFTING; "LARGER" DIGITS
; ARE IN D3,A2 (CANNOT USE A1 SINCE NEED TO ADDX.L.
; ASSUME SRC IS "LARGER", SO SWAP ITS DIGS WITH DST.
;-----------------------------------------------------------
        MOVE.L  D4,D3           ; CAN'T ADDX FROM A REGS
        MOVE.L  A1,D4
        EXG     D5,A2
        MOVE.W  A4,D0           ; SEXP, WORD IS ENOUGH
        SUB.W   A3,D0           ; SEXP - DEXP
        BEQ.S   @3              ; NO SHIFT IF EXP'S =
        BGT.S   @1              ; JUST SHIFT DST IN D4,5

;-----------------------------------------------------------
; DST IS LARGER:
; AS PART OF SWAP, MUST MOVE DST SIGN TO LEAD BIT OF D7 BYTE
; BUT WITHOUT MOVING THE XOR, WHICH WILL BE TESTED...
;-----------------------------------------------------------
        EXG     D5,A2           ; SWAP LO BITS
        EXG     D4,D3           ; SWAP HI BITS
        NEG.W   D0              ; TRUE SHIFT COUNT
        MOVEA.L A3,A4           ; LARGER EXP
        ADD.B   D6,D6           ; SHIFT SRC SIGN OUT
        ASR.B   #1,D6           ; RESTORE X0R TO PLACE
@1:
        BSR     RTSHIFT
@3:

;-----------------------------------------------------------
; OPERANDS ARE NOW ALIGNED.  TEST FOR +/- AND DO IT.
;-----------------------------------------------------------
        BTST    #5,D6           ; TEST XOR OF SIGNS
        BNE.S   SUBMAG

;-----------------------------------------------------------
; ADD MAGNITUDE: ADD THE WORDS AND CHECK FOR CARRY-OUT.
;-----------------------------------------------------------
        ADD.L   A2,D5
        ADDX.L  D3,D4
        BCC.S   @15

        ROXR.L  #1,D4           ; ADJUST RIGHT
        ROXR.L  #1,D5
        ROXR.W  #1,D7           ; NO STICKIES CAN BE LOST
        ADDQ.L  #1,A4           ; BUMP EXP
@15:
        BRA     COERCE

;-----------------------------------------------------------
; SIMPLIFY BY SUBTRACTING LARGE OP IN D3,A2 FROM SMALL IN
; D4,5,7 AND THEN CHECKING FOR SPECIAL CASES.  IF ZERO, JUMP
; OUT TO 0+0 CODE.  IF GREATER, FLIP SIGN.  IF LESS (USUAL)
; JUST NEGATE.
;-----------------------------------------------------------
SUBMAG:
        NOT.B   D6              ; ASSUME >, WITH SIGN CHG
        SUB.L   A2,D5
        SUBX.L  D3,D4
        BEQ.S   ZEROSUM         ; STORE ZERO WITH SIGN
        BCC.S   @7              ; GOT IT RIGHT

        NEG.W   D7              ; FLIP DIGITS
        NEGX.L  D5
        NEGX.L  D4
        NOT.B   D6              ; FLIP SIGN BACK
@7:
        BRA     NORMCOERCE

;-----------------------------------------------------------
; NOW SET EXP=0 AND FIX SIGN ACCORDING TO ROUNDING MODE.
; IN THE SPECIAL CASE OF TWO 0'S, AVOID THE UNDERFLOW
; COERCION WILL SIGNAL IN S/D RESTRICTION.
;-----------------------------------------------------------
ADD00:
        BTST    #5,D6           ; SAME SIGN?
        BEQ.S   ADDQ00          ; YES, EASY
ZEROSUM:
        SUBA.L  A4,A4           ; 0 EXP
        CLR.B   D6              ; ASSUME POSITIVE
        BTST    #RNDHI,(A0)     ; 10 -- RND MINUS
        BEQ.S   ADDQ00
        BTST    #RNDLO,(A0)
        BNE.S   ADDQ00
        NOT.B   D6              ; MAKE NEG
ADDQ00:
        RTS                     ; DON'T COERCE 0


;-----------------------------------------------------------
; IF DST=0, HAVE RES=SRC.  BUT IF SRC=0 MUST SET RES=DST.
; THESE CASES AVOID EXTRANEOUS SHIFTING OF ZERO OPERAND.
;-----------------------------------------------------------
ADDS0:
        MOVE.L  A2,D5           ; LO DIGS
        MOVE.L  A1,D4           ; HI DIGS
        MOVE.L  A3,A4           ; EXP
        ADD.B   D6,D6           ; SIGN
ADDD0:
        BRA     COERCE


;-----------------------------------------------------------
; SINCE PROJECTIVE MODE OUT,
; SUM OF TWO INFS ALWAYS DEPENDS UPON THEIR SIGNS.
;-----------------------------------------------------------
ADDINF:
        BTST    #5,D6           ; SAME SIGN?
        BNE.S   @25
        RTS
@25:
        MOVEQ   #nanadd,D0      ; MARK ERROR
        BRA     INVALIDOP

ÿ