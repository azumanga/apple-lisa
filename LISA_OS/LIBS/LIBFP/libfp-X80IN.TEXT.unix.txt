(* Copyright 1983, Apple Computer Inc. *)

(* File L:X80In, Version 6 February 1983. *)

procedure x80scan ( var instring : fp_string ; var sn : scannednumber ; 
                        var x : fp_extended ) ;

        (* x := sn.  S is used only for diagnostic trapping. *)
        
var
inan : integer ;
nansig : fp_int64 ;
fpcb : fp_blocktype ;
trapcoming : boolean ;

procedure postinput ( name : fp_string ; var s : fp_string ; var x : fp_extended ) ;
        (* Routine to set up trapping for an ascii to fp_extended routine. *)

var
r : fp_traprecord ;

begin (* postinput *)
with r do
        begin (* with *)
        gettexcepset( es ) ;
        optype1 := tfp_string ;
        op1 :=  @ s  ;
        op2 := nil ;
        resulttype := tfp_extended ;
        result :=  @ x   ;
        procname := @ name ;
        fp_postoperation ( r) ;
        end   (* with *) ;
end   (* postinput *) ;

procedure bcdtofp0 ( neg : boolean ; var s : fp_string ; ie : integer ;
        eneg : boolean ; var es : fp_string ) ;
        (* Same as Asciitofp0 except:
                S may have leading zeros but may not exceed Fpbuf in length.
                Es may have length in the range 0..4.
                                                *)
var
i, p, ee : integer ;
nib : nibble ;
b : bcdstring ;
limit, delta  : integer ;
topointer, offset : integer ;

begin (* bcdtofp0 *)
while s[1] = '0' do delete(s,1,1) ; (* Delete leading zeros.  *)
        (* Don't forget that the nibbles in BCD are reversed in
                even-odd pairs.  *)
if neg then b[0] := $f else b[0] := $0 ;
for i := 4 to 7 do b[i] := 0 ; (* Clear exponent field.  *)
p := - ie ; (* Pointer to position of point.  *)
if (p < 0) or (p > maxink) (* pointer p is bad *)
        or
   ( (length(s) < maxink) and (not eneg) ) (* Candidate for adding zeros. *)
        then
        begin (* recalculate exponent *)
        if length(es) = 0 then ee := 0 else
                begin (* get explicit exponent *)
                ee := ord(es[1]) - 48 ;
                for i := 2 to length(es) do
                        ee := 10 * ee + ord(es[i]) - 48 ;
                if eneg then ee := - ee ;
                end   (* get explicit exponent *) ;
        ee := ee + ie ; (* Adjust explicit exponent.  *)
                (* Determine if the effective exponent can be reduced by
                adding zeros to the significand.  *)
        delta := maxink - length(s) ;
        if ee < delta then delta := ee ;
        if delta < 0 then delta := 0 ;
        ee := ee - delta ; (* Reduce exponent.  *)
        if ee < 0 then b[1] := $f else b[1] := $0 ;
        ee := abs(ee) ;
        topointer := 7 ;
        while ee > 0 do
                begin (* generate new explicit exponent digit *)
                nib := ee mod 10 ;
                ee := ee div 10 ;
      if odd(topointer) then b[topointer-1] := nib else b[topointer+1] := nib ;
                topointer := topointer - 1 ;
                end   (* generate new explicit exponent digit *) ;
        p := 0 ; (* Recalculate p.  *)
                (* Move significand string to b.  *)
        for i := (27-delta) to 27 do b[i] := 0 ; (* Add zeros at end. *)
        limit := 28 - length(s) - delta ;
        if limit > 27 then limit := 27 ;
        for i := 8 to limit do b[i] := 0 ; (* Clear extra digit positions.  *)
        offset := 27 - length(s) - delta ;
        for i := 1 to length(s) do
                begin (* move digit *)
                nib := ord(s[i]) - 48 ;
                topointer := i + offset ;
      if odd(topointer) then b[topointer-1] := nib else b[topointer+1] := nib ;
                end   (* move digit *) ;
        end   (* recalculate exponent *)
        else
        begin (* don't recalculate *)
        if eneg then b[1] := $f else b[1] := $0 ;
        offset := 7 - length(es) ;
        for i := 1 to length(es) do
                begin (* transfer explicit exponent digit *)
                nib := ord(es[i]) - 48 ;
                topointer := i + offset ;
      if odd(topointer) then b[topointer-1] := nib else b[topointer+1] := nib ;
                end   (* transfer explicit exponent digit *) ;
        limit := 28 - length(s) ;
        if limit > 27 then limit := 27 ;
        for i := 8 to limit do b[i] := 0 ; (* Clear extra digit positions.  *)
        offset := 27 - length(s) ;
        for i := 1 to length(s) do
                begin (* move digit *)
                nib := ord(s[i]) - 48 ;
                topointer := i + offset ;
      if odd(topointer) then b[topointer-1] := nib else b[topointer+1] := nib ;
                end   (* move digit *) ;
        end   (* don't recalculate *) ;
b[2] := p mod 16 ;
b[3] := p div 16 ;
cmovefp ( b ) ;
end   (* bcdtofp0 *) ;

procedure asciitofp0 ( neg : boolean ; var s : fp_string ; ie : integer ;
        eneg : boolean ; var es : fp_string ) ;
        (* Converts Ascii to FP0.
                Neg is true if the number is negative.
                S contains the significand string of at least 1 ASCII digit.
                        S should have no leading or trailing zeros.
                Ie is the implicit exponent.
                Eneg is true if the explicit exponent is negative.
                Es is the explicit exponent string.
                        Es should have no leading zeros unless Es
                                is exactly '0'.
        Then
                FP0 := Neg * S * 10^( Ie + Eneg * Es )
                                                                *)
const
chunk = 12 ; (* Maximum size of substring.  *)
var
s1, s2 : fp_string ;
fp1 : fp_register ;
i : integer ;

begin (* asciitofp0 *)
if length(es) > 3 then
        begin (* max exponent is 8000 *)
        if length(es) > 4 then es := '8000' else
        if es[1] >= '8' then es := '8000' ;
        end   (* max exponent is 8000 *) ;
if length(s) <= maxink then
        begin (* normal length significand *)
        bcdtofp0( neg, s, ie, eneg, es) ;
        end   (* normal length significand *)
        else
        begin (* long significand *)
        s1 := copy(s,1,chunk) ;
        s2 := copy(s,chunk+1,length(s)-chunk) ; (* Divide S into S1+S2.  *)
        if length(s2) > chunk then
                begin (* Really long significand *)
                if s2[chunk] = '0' then s2[chunk] := '1' ; (* Sticky bit.  *)
                delete( s2, chunk+1, length(s2)-chunk ) ;
                end   (* Really long significand *) ;
        bcdtofp0 ( neg, s2,
                ie + length(s) - length(s1) - length(s2), eneg, es) ;
                (* FP0 gets less significant contribution.  *)
        fp1move(fp1) ; (* Save FP1.  *)
        fpswap ; (* FP1 gets less significant part.  *)
        bcdtofp0( neg, s1,
                ie + length(s) - length(s1), eneg, es) ;
                (* FP0 gets more significant part.  *)
        fpadd ; (* FP0 gets sum.  *)
        movefp1(fp1) ; (* Restore FP1.  *)
        end   (* long significand *) ;
end   (* asciitofp0 *) ;

begin (* x80scan *)

with sn do
begin (* with sn *) 
case kind of
inf :   begin
        infinity(x) ;
        if sign then fpnegx(x,x) ;
        end ;

nan :   begin (* nan *)
        nanscan( sn, nansig ) ;
        infinity(x) ;
        for inan := 0 to 7 do x[inan+2] := nansig[inan] ;
        if sign then fpnegx(x,x) ;
        end   (* nan *) ;

normal : begin (* normal *)
        if length(significand) < 1 then 
                begin (* zero *)
                wmovex( 0, x ) ;
                if sign then fpnegx(x,x) ;
                end   (* zero *)
                else
                begin (* nonzero *)
                blockprelude(fpcb) ;
                if moresignificand then if significand[maxfpstring] = '0' then
                        significand[maxfpstring] := '1' ; (* Sticky bit! *)
                asciitofp0(sign, significand, implicit, esign, exponent) ;
                fpmovex(x) ;
                blockpostlude( fpcb, trapcoming ) ;
                if trapcoming then postinput ( 'x80scan', instring, x) ;
                end   (* nonzero *) ;
        end   (* normal *) ;

end   (* case kind *) ;

end   (* with sn *) ;
end   (* x80scan *) ;

procedure pmovefp ;

var
sn : scannednumber ;
x : fp_extended ;

begin (* pmovefp *)
stringscan ( s, first, last, next, sn ) ;
error := sn.error ;
if error then errorsn( sn ) ;
x80scan( s, sn, x ) ;
xmovefp( x ) ;
end   (* pmovefp *) ;

procedure asciimovex ;

var
sn : scannednumber ;

begin (* asciimovex *)
if fileio then
        begin
        filescan ( infile, sn, s ) ;
        end
        else
        begin
        stringscan ( s, first, last, next, sn ) ;
        end ;
error := sn.error ;
if error then errorsn( sn ) ;
x80scan( s, sn, x ) ;
end   (* asciimovex *) ;

ÿ