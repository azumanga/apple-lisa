        PAGE
        .title 'FADDS - ADD/SUBTRACT'
        .proc   mc%fpadds ; 0,0
        .ref mc%valid
;***********************************************
;
; 22 SEPT 80        SGL     ORIGINAL
;
; 19 JAN 81         SGL     COMPLEMENT FIX TO G-ROUND
;
; 13 FEB 81         SGL     REWRITE FOR SPEED
;
; 22 APR 81         SGL     2'S COMPLEMENT FOR G-RND-S
;                           SPEED ENHANCEMENTS
;
; 28 APR 81         SGL     VAN'S SPEED FIXES
;
;  7 JUL 81         DWC     CHANGED TO EXORMACS STRUCTURED ASM SYNTAX
;
;  2 SEP 81         SGL     CONFUSION (.L LEFT OFF OF IF STATEMENT)
;
; 16 Jan 83       Hough     Large exponent difference case fixed to insure correct
;                           results in directed rounding modes.
;***********************************************
;
;     FADDS - 68K FLOATING POINT ADDITION/SUBTRACTION
;
;
;     ENTER WITH:   D0-D3   CONTAIN ARG 1 WITH
;                           G-ROUND-STICKY LWORD CLEAR            PAGE
;
;                   A2      POINT TO ARG 2 IN REG BLOCK
;
;                   A3      POINT TO FP REG BLOCK
;
;                   A4      POINT TO USER MEMORY
;
;
;          31               15             0
;           ________________________________
;     D0   | S |     | TAG |    EXPONENT    |
;          |---------------|----------------|
;     D1   | MANTISSA MSW  | MANTISSA NMSW  |
;          |---------------|----------------|     ARGUMENT 1
;     D2   | MANTISSA NLSW | MANTISSA LSW   |
;          |---------------|----------------|
;     D3   | G |   ROUND   |    STICKY      |
;          |---------------|----------------|
;
;
;
;          31               15              0
;           ________________________________
;          |               |                |   LO MEMORY
;          |---------------|----------------|
;     A5 ->| S |    | TAG  |    EXPONENT    |
;          |---------------|----------------|
;          | MANTISSA MSW  | MANTISSA NMSW  |
;          |---------------|----------------|     ARGUMENT 2
;          | MANTISSA NLSW | MANTISSA LSW   |
;          |---------------|----------------|
;          | G |   ROUND   |    STICKY      |
;          |---------------|----------------|
;
;
;
;    EXIT WITH:   D0-D3   CONTAINS RESULT REPLACING ARG 1
;                         WITH TAG FIELD CLEARED AND G-ROUND-
;                         STICKY IN D3 AS ROUND LEFT IT.
;
;                 A2      POINTS TO RESULT REPLACING ARG 2?
;
;                 A0,A1   DESTROYED
;
;                 D4-D7   DESTROYED
;
;
;******************************************************************
;
;       ALGORITHM FOR FADDS         (FROM VAN)
;
;
;     ADD ARG 1 IN REGS D0 - D2 TO ARG 2 POINTED TO BY
;     REG A2 IN FP REGISTER BLOCK, AND RETURN WITH RESULT
;     IN D0 - D3.
;
;     THE EXPONENT OF THE RESULT IS THE LARGEST EXPONENT
;     OF THE TWO ARGUMENTS.
;
;     IF THE DIFFERENCE IN THE ARGUMENT'S EXPONENTS IS BEYOND
;     EXTENDED INTERNAL FORMAT PRECISION, THE 'LARGER' ARGUMENT
;     IS RETURNED.
;
;     -- ELSE, THE 'SMALLER EXPONENT' ARGUMENT'S MANTISSA IS
;     DENORMALIZED TO ALIGN THE RADIX POINTS; THE DENORMALIZED
;     SHIFTING IS PROPROGATED THRU THE G, RND, AND STICKY BITS
;     WITH THE BITS SHIFTED OUT OR'ED INTO THE STICKY BYTE.
;
;     REMEMBER WHETHER EITHER RESULTING MANTISSA IS NORMALIZED.
;
;     THE MANTISSAS ARE THEN COMPARED TO DETERMINE THE ARGUMENT
;     WHICH IS LARGEST IN MAGNITUDE, HEAEAFTER REFERRED TO AS
;     'LARGER'. NOTE THAT THIS PROCEDURE ALWAYS NAMES THE ARGUMENT
;     WHICH IS LARGER IN NUMERIC VALUE THE 'LARGER' ARGUMENT.
;
;     THE SIGN OF THE RESULT IS THEN THE SIGN OF THE 'LARGER'
;     ARGUMENT.
;
;     IF THE SIGNS OF THE ARGUMENTS DIFFER, THE DENORMALIZED
;     ARGUMENT'S MANTISSA IS TWO'S COMPLEMENTED.
;     THIS IS DONE BY CHECKING THE STICKY BYTE; IF STICKY ALL
;     CLEAR THEN TWO'S COMPLEMENT THE MANTISSA STARTING WITH
;     THE LSB OF THE ROUND BITS, ELSE (STICKY CONTAINS A '1')
;     ONE'S COMPLEMENT THE MANTISSA STARTING WITH THE LSB OF
;     ROUND BITS.
;
;     THE TWO ARGUMENT MANTISSAS ARE ADDED TOGETHER. AN
;     OVERFLOW CAUSES THE RESULT TO BE SHIFTED RIGHT BY ONE
;     AND THE RESULT EXPONENT TO BE INCREMENTED BY ONE.
;
;     IF ALL BITS OF THE UNROUNDED SIGNIFICAND DIGIT FIELD
;     (THIS IS MANTISSA BITS ALONG WITH G-RND-STKY BITS) ARE
;     ZERO, SET THE SIGN TO '+' FOR ROUNDING MODES RN, RZ &
;     RP OR TO '-' FOR ROUNDING MODE RM; ALSO IF ONE OF THE
;     MANTISSAS WAS NORMALIZED AT THE TIME OF ALIGNING THE
;     RADIX POINTS, SET THE RESULT EXP TO ITS MINIMUM VALUE -
;     GO TO POST-PROCESSING.
;
;     IFF ONE OF THE MANTISSAS WAS NORMALIZED AT THE TIME
;     OF ALIGNING THE RADIX POINTS, THE NON-ZERO RESULT IS
;     NORMALIZED.
;
;     POST PROCESSING AND -DONE-.
;
;
;
;****  EQUATES
FRCNDX EQU 7 ; INDEX TO LAST BYTE OF FRACTION
ZEROEX EQU $C000 ; EXPONENT FOR NORMAL ZERO
;
;
; COMPARG1 - 2'S COMPLEMENT ARG 1 (SMALLER)
; GET SIGN FROM LARGER ARGUMENT
;
        .macro  COMPARG1
 EXG   D0,A0 ; COMBINE RESULT EXPONENT WITH SIGN
 MOVE.W A0,D0 ; PLACE SIGN AND EXP IN D0
 NEG.L D2
 NEGX.L D1
 .endm
;
;
; COMPARG2 - 2'S COMPLEMENT ARG 2 (SMALLER)
; ARG 1 SIGN IS RETURNED
; ARG IN D5,D6, AND G-RND STK IN D3
;
        .macro  COMPARG2
 NEG.L D3
 NEGX.L D6
 NEGX.L D5
 .endm
;
;****************************************
;
;   ADD - mc%fpadds
;
;****************************************
        debugbegin
;
 MOVEM.L (A2),D4/D5/D6 ; MOVE ARG TO REGISTERS
; INITIALIZE ALL FLAGS TO 0
;  B31 IS NORMAL/UNNORMAL FLAG
;  B16 IS COMPLEMENT FLAG
 moveq   #0,D7 ; FLAGS ARE IN UPPER WORD OF D7
; FIND WHICH ARGUMENT IS SMALLER - BASED ON SIZE OF EXP
; LEAVE LARGER IN D0-D2, SMALL MANTISSA IN D5,D6
; PUT ABSOLUTE EXPONENT DIFFERENCE IN D7.W
 MOVE.W D0,D7
 SUB.W D4,D7
  bpl   @1
;  ARG 2 .GT. ARG 1 SO EXCHANGE
 NEG.W D7
 EXG   D4,D0
 EXG   D5,D1
 EXG   D6,D2
@1
;
; IF DIFFERENCE BETWEEN EXPONENTS IS GREATER THAN 65
; BITS, THEN SIGNIFICANCE OF SMALLER NUMBER IS LOST.
; AND BITS CAN BE OR'D INTO STICKY.
        CMPI.W #65,D7
        ble     adddenorm               ; Branch if exponent difference <= 65.
        move.l  d4,a0                   ; Save smaller sign and exponent in A0.
; OR FRACTION OF SMALLER INTO STKY BYTE
        OR.L D5,D6 ; ASSUME D3 CLEAR ON INPUT
        SNE   D3
        clr.l   d5                      ; Simulate large shift.
        clr.l   d6
        bra.s   endloop
;
; DENORMALIZE SMALLER AND SHIFT BITS
; OUT OF RIGHT INTO STICKY BYTE
; ASSUME G-ROUND-STICKY D3 = 0
; D7 IS DIFFERENCE BETWEEN EXPONENTS
;
adddenorm
 MOVE.L D4,A0 ; SAVE SIGN AND SMALLER EXPONENT
 SUB.W #1,D7
 BMI ENDLOOP
LOOP LSR.L #1,D5
 ROXR.L #1,D6
 ROXR.L #1,D3 ; SHIFT INTO G-RND-STKY REG
 SCS D4 ; AVOID CLEARING D3 IF NO ADDITIONAL STKY BITS
 OR.B D4,D3
 DBRA D7,LOOP
ENDLOOP EQU *
;
; TEST NORMALIZATION OF FRACTIONS
; D7.L MSB = 0 IF AT LEAST ONE WAS NORMAL
;          = 1 IF BOTH UNNORMAL
;
 MOVE.L D1,D4
 OR.L D5,D4
  bmi   @4
  BSET   #31,D7
@4
;
; IF SIGNS DIFFER, COMPLEMENT SMALLER ARG FRACTION
 MOVE.L A0,D4 ; RESTORE SMALLER EXP & SIGN
 EOR.L D0,D4
  bpl   @9            ; SIGNS NOT =
; SET COMPLEMENT FLAG
 BSET #16,D7
 moveq   #0,D4 ; NEED ZERO REG TO PROPAGATE CARRY IN COMPLEMENT
; COMPARE SIZE OF FRACTIONS
;OPT MEX
    cmp.l       d5,d1
    bcc         @5
;                    ARG 2 .GT. ARG 1
        COMPARG1
     bra        @9              ; ARG1 MSLW .GE. ARG2 MSLW
@5
        bne     @8              ; CHECK LSLW
           cmp.l        d6,d2
           bcc          @6
;                         ARG2 > ARG1
               COMPARG1
           bra          @7       ; MSLW'S =
@6
;                       ARG1 .LE. ARG2
               COMPARG2
@7
        bra     @9      ; ARG1 < ARG2
@8
            COMPARG2
@9
;
;OPT NOMEX
; IF SIGNS EQUAL FALL THRU
;
;********************************
;        ADD FRACTIONS
;********************************
;
 ADD.L D6,D2 ; ADD LOW WORD
 ADDX.L D5,D1 ; HI WORD W/ CARRY
  bcc   cmere        ; CHECK CARRY BIT
  BTST #16,D7 ; CHECK COMPLEMENT FLAG
  bne   cmere        ; ADJUST IF NOT COMPLEMENTED
     ROXR.L #1,D1
     ROXR.L #1,D2
     ROXR.L #1,D3
     SCS D4
     OR.B D4,D3 ; SET BACK INTO STKY
     ADD.W #1,D0 ; INC EXP
cmere
; COME HERE IF EXPONENT DIFFERENCE TOO LARGE
;
; CHECK IF FRACTION = 0
 MOVE.L D1,D4
 OR.L D2,D4
 OR.L D3,D4 ; GET G-RND-STKY
 bne    @13
 TST.L D7 ; CHECK IF LEAST ARG NORMAL
 bmi    @11        ; AT LEAST ONE ARG NORMAL
; SET ZERO EXPONENT
 MOVE.W #ZEROEX,D0
@11
;
; SET SIGN DEPENDING ON ROUNDING MODE
 BCLR   #31,D0 ; SET SIGN POSITIVE
 MOVE.B CNTRL(A3),D4
 AND.B #MDRND_B,D4
 cmp.b  #3,d4   ; RM MODE
 bne    @12
  BSET   #31,D0 ; SET SIGN NEGATIVE
@12
;
; FRACTION IS NON-ZERO
  bra   chk_max
@13
  TST.L D1 ; NORMALIZED?
  bmi   chk_max        ; RESULT IS UNNORMALIZED
; NORMALIZE RESULT
    TST.L D7 ; CHECK NORMAL FLAG
    bmi   chk_max    ; AT LEAST ONE ARG NORMAL
      moveq   #65,D4
NLOOP equ *
      LSL.L #1,D3
      ROXL.L #1,D2 ; LEFT SHIFT W/CARRY
      ROXL.L #1,D1
      SUBQ.W #1,D0
      TST.L D1 ; DEC EXPONENT
      DBMI D4,NLOOP
chk_max             ; CHK MAX mc%valid EXP
        
        jmp    mc%valid ; GO CHECK FOR EXCEPTIONAL CONDITIONS AND ROUND
        debugend 'MC%FPADD',0
 
ÿ