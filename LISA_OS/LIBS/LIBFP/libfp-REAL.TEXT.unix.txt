; Copyright 1983, Apple Computer Inc.

        
;       File L:Real, Version 21 December 1982  

        .PROC   %%%Real   
        
        ;       This is the dummy routine for the 32 bit floating point
        ;       arithmetic routines for SVS Pascal.
        
        .DEF    %f_ADD,%f_SUB,%f_MUL,%f_DIV,%f_NEG,%f_ABS
        .DEF    %i_FLT,%_ROUND,%_TRUNC
        .DEF    %f_LT,%f_LE,%f_GT,%f_GE,%f_EQ,%f_NE
        
        .ref    f32%add,f32%sub,f32%mul,f32%div
        .ref    f32%eq,f32%ne,f32%gt,f32%ge,f32%lt,f32%le
        .ref    f32%i32,%i32f32
        .ref    f32%aunpack, f32%bunpack, f32%pack, %xdiv32        
        
;
; $_ROUND - Round real
;
; Parameters: ST.L - Real
;
; Returns:    ST.L - Result
;
;

%_ROUND:
        debugbegin
        movem.l a3/d0-d4/d7,-(sp)          ; Save registers.
        move.l  32(sp),d0               ; D0 gets X.
        move    #-1,d3                  ; D3 gets -1 flag for biased round.
        jsr     f32%i32
        move.l  d0,32(sp)               ; Result slot gets longint I.
        movem.l (sp)+,a3/d0-d4/d7          ; Restore registers.
        rts
        debugend '%_round',1

;
; $_TRUNC - Truncate real
;
; Parameters: ST.L - Real
;
; Returns:    ST.L - Result
;
;

%_TRUNC:
        debugbegin
        movem.l a3/d0-d4/d7,-(sp)          ; Save registers.
        move.l  32(sp),d0               ; D0 gets X.
        moveq   #1,d3                   ; D3 gets +1 flag for Round to Zero.
        jsr     f32%i32
        move.l  d0,32(sp)               ; Result slot gets longint I.
        movem.l (sp)+,a3/d0-d4/d7          ; Restore registers.
        rts
        debugend '%_trunc',1
;
; $I_FLT - Float integer
;
; Parameters: ST.L - Integer to float
;
; Returns:    ST.L - Result
;

%I_FLT:
        debugbegin
        movem.l a3/d0-d2/d7,-(sp)          ; Save registers.
        move.l  24(sp),d0               ; D0 gets int32 I.
        jsr     %i32f32                 ; D0 will gets real X.
        move.l  d0,24(sp)               ; Result slot gets X.
        movem.l (sp)+,a3/d0-d2/d7          ; Restore registers.
        rts
        debugend '%i_flt',2
;
; $F_NEG - Floating point negation
;
; Parameters: ST.L - Number to negate
;
; Returns:    ST.L - Result
;

%f_NEG:
        debugbegin
        BCHG    #31,4(sp)
        RTS
        debugend     '%f_neg',2

;
; $F_ABS - Floating point absolute value
;
; Parameters: ST.L - Number to abs
;
; Returns:    ST.L - Result
;

%f_ABS:
        debugbegin
        bclr    #31,4(SP) ; Clear sign bit
        RTS
        debugend     '%f_abs',2

        .macro  realarith       ; Does +-*/ according to %1; uses AMD or %2.
        debugbegin
        .if     amdcode
        move    d0,-(sp)
        fps9512 10(sp),%1,6(sp),10(sp)
        move.l  2(sp),6(sp)            ; Move return address.
        move    (sp)+,d0
        .else
        movem.l a3/d0-d7,-(sp)
        move.l  40(sp),d3
        move.l  44(sp),d0
        jsr     %2
        move.l  36(sp),40(sp)           ; Move return address.
        move.l  d0,44(sp)               ; Place result.
        movem.l (sp)+,a3/d0-d7
        .endc
        addq.l  #4,sp                   ; Skip argument.
        rts
        debugend '_f_%1',2
        .endm
        
;
; $F_ADD - Floating point addition
;
; Parameters: ST.L - Number to add
;             ST.L - Other number to add
;
; Returns:    ST.L - Result
;

%f_ADD:
        realarith       add,f32%add

;
; $F_SUB - Floating point subtraction
;
; Parameters: ST.L - Subtractor
;             ST.L - Subtractee
;
; Returns:    ST.L - Result
;

%f_SUB:
        realarith       sub,f32%sub
;
; $F_MUL - Floating point multiplication
;
; Parameters: ST.L - Multiplicand
;             ST.L - Multiplier
;
; Returns:    ST.L - Result
;

%f_MUL:
        realarith       mul,f32%mul
;
; $F_DIV - Floating point division
;
; Parameters: ST.L - Dividend
;             ST.L - Divisor
;
; Returns:    ST.L - Result
;

%f_DIV:
        realarith       div,f32%div



;
; Floating point compares:
;
; Parameters: ST.L - First floating point number
;             ST.L - Second floating point number
;
; Returns:    ST.B - Boolean result
;

%F_LT:
        debugbegin
        movem.l a3/d0-d1/d3/d7,-(sp)
        move.l  28(sp),d0               ; D0 gets A.
        move.l  24(sp),d3               ; d3 gets B.
        jsr     f32%lt
        BRA.S   CMPDONE
        debugend     '%f_lt',3
%F_LE:
        debugbegin
        movem.l a3/d0-d1/d3/d7,-(sp)
        move.l  28(sp),d0               ; D0 gets A.
        move.l  24(sp),d3               ; d3 gets B.
        jsr     f32%le
        BRA.S   CMPDONE
        debugend     '%f_le',3
%F_GT:
        debugbegin
        movem.l a3/d0-d1/d3/d7,-(sp)
        move.l  28(sp),d0               ; D0 gets A.
        move.l  24(sp),d3               ; d3 gets B.
        jsr     f32%gt
;
; Finish real compare
;
CMPDONE 
        ANDI.W  #1,d0
        MOVE.B  d0,30(SP)       ; Store result
        MOVE.L  20(SP),26(SP)   ; Set up return address
        MOVEM.L (SP)+,a3/D0-D1/d3/d7
        ADDQ.L  #6,SP
        RTS
        debugend     '%f_gt',3
%F_GE:
        debugbegin
        movem.l a3/d0-d1/d3/d7,-(sp)
        move.l  28(sp),d0               ; D0 gets A.
        move.l  24(sp),d3               ; d3 gets B.
        jsr     f32%ge
        BRA.S   CMPDONE
        debugend     '%f_ge',3
%F_EQ:
        debugbegin
        movem.l a3/d0-d1/d3/d7,-(sp)
        move.l  28(sp),d0               ; D0 gets A.
        move.l  24(sp),d3               ; d3 gets B.
        jsr     f32%eq
        BRA.S   CMPDONE
        debugend     '%f_eq',3
%F_NE:
        debugbegin
        movem.l a3/d0-d1/d3/d7,-(sp)
        move.l  28(sp),d0               ; D0 gets A.
        move.l  24(sp),d3               ; d3 gets B.
        jsr     f32%ne
        BRA.S   CMPDONE
        debugend     '%f_ne',3
        

; The following routines are designed to invoke the indicated routines
; in FPLIB without requiring % signs in the FPLIB interface.
; Each is a separate procedure to avoid loading everything every time.

        .proc   %_pwr10
;
; $_PWR10 - Power of Ten: returns 10 ^ n, abs(n) <= 127.
;
; Parameters: ST.W - Integer
;
; Returns:    ST.L - Result
;

        .ref    f32_pwrten
        debugbegin
        link    a6,#0           ;  0(a6) contains link.
                                ;  4(a6) contains %_pwr10 return.
                                ;  8(a6) contains n.
        clr.l   -(sp)           ; Space for result.
        move.w  8(a6),-(sp)     ; Set up n.
        jsr     f32_pwrten
        movea.l 4(a6),a0        ; A0 gets %_pwr10 return.
        move.l  (sp)+,6(a6)     ; Store result from f32_pwrten.
        unlk    a6
        addq.l  #2,sp           ; Position sp to point to result.
        jmp     (a0)
        debugend     '%_pwr10',1
        
        .proc   %r_r
; %r_r invokes f32_r_r after adjusting stack.
; %r_r is called with input parameter on stack, returns with function value
; on stack.
; f32_r_r follows Pascal convention, requires slots for input parameter
; and function result to be separate.

        .ref    f32_r_r
        debugbegin
        movem.l (sp)+,d0-d1     ; Save return address and argument.
        subq.l  #4,sp           ; Allocate space for function result.
        movem.l d0-d1,-(sp)     ; Restore return address and argument.
        jmp     f32_r_r
        debugend '%r_r',4

        .proc   %w_e
        .ref    f32_w_e
        debugbegin
        jmp     f32_w_e
        debugend '%w_e',4
        
        .proc   %w_f
        .ref    f32_w_f
        debugbegin
        jmp     f32_w_f
        debugend '%w_f',4
        
        .proc   %_sqrt
        .ref    fpsqrts
        debugbegin
        jmp     fpsqrts
        debugend '%_sqrt',2

        .proc   %_exp
        .ref    f32_exp
        debugbegin
        jmp     f32_exp
        debugend '%_exp',3

        .proc   %_ln
        .ref    f32_ln
        debugbegin
        jmp     f32_ln
        debugend '%_ln',4

        .proc   %_sin
        .ref    f32_sin
        debugbegin
        jmp     f32_sin
        debugend '%_sin',3

        .proc   %_cos
        .ref    f32_cos
        debugbegin
        jmp     f32_cos
        debugend '%_cos',3

        .proc   %_atan
        .ref    f32_atan
        debugbegin
        jmp     f32_atan
        debugend '%_atan',2

ÿ