(* File Libfp/Misc, Version 6 December 1983. *)

{$ifc fdbgok }

procedure showx ( x : extended ) ;

var
sqrij : decstr ;
form : free_format ;

begin
with form do 
        begin
        maxsig := 25 ;
        sig_fform := false ;
        trail_point := true ;
        int_eform := true ;
        plus_eform := false ;
        end ;
fp_free_ascii( x , 40, form, sqrij ) ;
writeln(sqrij ) ;
end ;

{$endc }

        procedure errorNaN  (error : integer; var z : Extended)  ;
        
            { Builds a quiet NaN in z with error code = error
              and signals INVALID.                            }
            
            { Used by: log12, Log2X, Log2X, Ln1X, Exp2X,
                       Exp1X, XpwrI, XpwrY, Compound, Annuity }
        
            var
            
                err { temporary value for control integer. }
                    : integer;
            
            procedure createNaN (error : integer; var z : extended);
                                    
                { Creates a quiet NaN in z . }
                
type
Nibble = 0..15;

                var
                
                    d   { temporary Decimal variable. }
                      : Decimal;
                      
                    k   { temporary Nibble variable. }
                      : Nibble;
                    
                    c   { temporary char variable. }
                      : char;
                
            begin { createNaN }
            
                with d do begin
                
                    sig[0] := chr(3) ;
                    sig[1] := 'N' ;
                    k := error div 16;
                    if k >= 10 then c := chr (k - 10 + ord ('A'))
                               else c := chr (k + ord ('0'));
                    sig [2] := c;
                    
                    k := error mod 16;
                    if k >= 10 then c := chr (k - 10 + ord ('A'))
                               else c := chr (k + ord ('0'));
                    sig [3] := c
                
                end;
                
                Dec2X (d, z)
            
            end   { createNaN } ;
        
        begin { errorNaN }
        
            if error = 0 then err := NaNZERO
                         else err := error;
                         
            createNaN (err, z);
            SetXcp (INVALID, TRUE)
        
        end   { errorNaN } ;
        
function getexponent ( var x : extended ) : integer ;
        (* Returns exponent field of x without judgments about validity. *)
var e : integer ;
begin
e := x[0] ;
if e < 0 then e := e + $8000 ; (* Remove sign of x. *)
getexponent := e - $3fff ; (* Remove bias. *)
end ;

function  getprecision ;
var pp: fp_environ ;
begin
pp := pointer(Sane_Environ) ;
getprecision := pp^.xprec ;
end ;

procedure setprecision ;
var pp: fp_environ ;
begin
pp := pointer(Sane_Environ) ;
pp^.xprec   := p ;
end ;

procedure clearxcps       ;
var pp : fp_environ ;
begin
pp := pointer(Sane_Environ) ;
pp^.exceps := 0 ;
end ;

procedure clearhlts  ;
var pp : fp_environ ;
begin
pp := pointer(Sane_Environ) ;
pp^.halts  := 0 ;
end ;

{$%+ }

procedure %_newl( var p : longint ; n : longint ) ; external ;

function fp_new  ;
        (* 
           Tries to get n bytes on heap.
           If success, returns address.
           If failure, returns ord(nil). 
                                        *)

var p : longint ;

begin (* donew *)
%_newl( p, n ) ;
if heapresult = 0 then
        begin
        fp_new := p ;
        end
        else
        begin (* not ok *)
        fp_new := ord(nil) ;
        end   (* not ok *) ;
end   (* donew *) ;

{$%- }

ÿ