
(* File L:Sort, Version 8 September 1983. *)

procedure math_sort ;
        
const 
        maxsmallsegment = 8 ; (* Size of segment sorted by n^2 method. *)
        
var 
        pi, pj, pk, pi1, pj1, pk1 : ^ integer ;
        i, j, k, ilast, m, segstart, jlast, nbytes, offset, nalt : longint ;
        perm, alt, tp  : longint ;
        hr1, hr2 : boolean ;
        tswap : integer ;
        cc : boolean ;
        ptr : longint ;
        marker : ^ integer ;

begin (* math_sort *)
mark(marker) ;
nbytes := last ;
nbytes := 2*( (nbytes-first)+1) ;
ptr := fp_new( nbytes ) ; (* Permutation array. *)
hr1 := ptr = ord(nil) ;
perm := (ptr - first ) - first ;
ptr := fp_new( nbytes ) ; (* Alternate array. *)
hr2 := ptr = ord(nil) ;
alt := (ptr - first ) - first ;

error := hr1 or hr2 ;
if not error then
        begin
        pi := pointer( (perm + first) + first) ;
        for i := first to last do 
                begin
                pi^ := i ; (* Initialize permutation array. *)
                pi := pointer ( ord(pi)+2) ;
                end ;
        segstart := first ;
        while segstart < last do
                begin (* choose another initial segment *)
                jlast := segstart + maxsmallsegment ; 
                if jlast > last then jlast := last ; (* will sort segstart..jlast *)
                for j := segstart + 1 to jlast do
                        begin (* sort initial segment *)
                        k := j-1 ;
                        pk := pointer( perm + 2*k ) ;
                        pj := pointer( perm + 2*j ) ;
                        cc := sorted(pk^,pj^) ;
                        while (not  cc) and (k > segstart) do 
                                begin
                                k := k-1 ;
                                pk := pointer(ord(pk)-2   ) ;
                                cc := sorted(pk^ ,pj^ ) ;
                                end ;
                        if not  cc then k := k - 1 ;
                        tswap := pj^  ;
                        pi := pj ;
                        for i := j-1 downto k+1 do 
                                begin 
                                pi1 := pi ;
                                pi := pointer( ord(pi) - 2  ) ;
                                pi1^ := pi^ ;
                                end ;
                        pk := pointer(perm+2*(k+1)) ;
                        pk^ := tswap ;
                        end   (* sort initial segment *) ;
                segstart := jlast + 1 ; 
                end   (* choose another initial segment *) ;
        m := maxsmallsegment + 1 ; 
                (* m is the length of a maximum sorted subsequence *)
        while first <= (last-m) do
                begin (* merge pairs of subsequences of length m *)
                segstart := first ; (* The pair begins at segstart.  *)
                while segstart <= (last-m) do 
                        begin (* merge pair of subsequences at segstart.. *)
                        nalt := segstart ;
                        i := segstart ;
                        j := i + m ;
                        ilast := j - 1 ;
                        jlast := j + m - 1 ;
                        if jlast > last then jlast := last ;
                                (* The subsequences to be merged are
                                        i..ilast 
                                        j..jlast *)
                        pi := pointer( perm + 2*i) ;
                        pj := pointer( perm + 2*j) ;
                        cc := sorted(pi^ ,pj^ );
                        while (i <= ilast) or  (j <= jlast) do
                                begin (* move subsequences to pa^ *)
                                if j > jlast then
                                        begin (* move final Ai's *)
                                        pk  := pointer( perm + 2 * i ) ;
                                        pk1 := pointer(alt + 2*(jlast - ilast+i)) ;
                                        for k := i to ilast do
                                                begin
                                                pk1^ := pk^  ;
                                                pk1 := pointer(ord(pk1)+2) ;
                                                pk  := pointer( ord(pk)+2) ;
                                                end ;
                                        i := ilast+1 ;
                                        end   (* move final Ai's *)
                                        else
                                        begin (* move some Ai's *)
                                        pj := pointer( perm + 2*j ) ;
                                        pi1 := pointer( alt+2*nalt ) ;
                                        while cc and (i <= ilast) do
                                                begin (* move Ai *)
                                                pi1^ := pi^ ;
                                                nalt := nalt + 1 ;
                                                pi1  := pointer(ord(pi1)+2) ;
                                                i := i + 1 ;
                                                pi  := pointer( ord(pi)+2 ) ;
                                                cc := sorted(pi^ ,pj^ );
                                                end   (* move Ai *) ;
                                        end   (* move some Ai's *) ;
                                if i > ilast then
                                        begin (* move final Aj's *)
                                        pk1 := pointer( alt + 2*j ) ;
                                        pk  := pointer( perm+ 2*j ) ;
                                        for k := j to jlast do
                                                begin
                                                pk1^   := pk^   ;
                                                pk1 := pointer(ord(pk1)+2 ) ;
                                                pk  := pointer(ord(pk )+2 ) ;
                                                end ;
                                        j := jlast+1 ;
                                        end   (* move final Aj's *)
                                        else
                                        begin (* move some Aj's *)
                                        pi := pointer( perm + 2*i ) ;
                                        pj1 := pointer( alt + 2*nalt ) ;
                                        while (not cc) and (j < jlast) do
                                                begin (* move Aj *)
                                                pj1^ := pj^ ;
                                                nalt := nalt + 1 ;
                                                pj1 := pointer(ord(pj1)+2) ;
                                                j := j + 1 ;
                                                pj  := pointer(ord(pj)+2     ) ;
                                                cc := sorted(pi^ ,pj^ );
                                                end   (* move Aj *) ;
                                        pj1 := pointer (alt + 2*nalt ) ;
                                        if (j=jlast) and not cc then
                                                begin (* move Aj *)
                                                pj1^ := pj^ ;
                                                nalt := nalt + 1 ;
                                                pj1  := pointer(ord(pj1)+2) ;
                                                j := j + 1 ;
                                                end   (* move Aj *) ;
                                        end   (* move some Aj's *) ;
                                end   (* move subsequences to pa^ *) ;
                        segstart := jlast + 1 ;
                        end   (* merge pair of subsequences at segstart.. *) ;
                pk1 := pointer( alt + 2*segstart ) ;
                pk  := pointer( perm + 2*segstart ) ;
                for k := segstart to last do (* clean up remaining odd items *)
                        begin
                        pk1^ := pk^ ;
                        pk1 := pointer(ord(pk1)+2 ) ;
                        pk  := pointer(ord(pk )+2 ) ;
                        end ;
                m := 2 * m ;
                tp := perm ;
                perm := alt ;
                alt := tp ;
                end   (* merge pairs of subsequences of length m *) ;
        
        for i := first to last-1 do
                begin (* check for a permutation *)
                pi := pointer( perm + 2*i ) ;
                k := pi^  ;
                if i <> k then 
                        begin
                        j := i ;
                        while i <> k do
                                begin (* follow permutation *)
                                swap(j,k) ; (* Swap j/k elements. *)
                                pj := pointer( perm + 2*j ) ;
                                pj^  := j ;  (* Record permutation finished. *)
                                j := k ;
                                pk := pointer( perm + 2*k ) ;
                                k := pk^  ;
                                end   (* follow permutation *) ;
                        pj := pointer( perm + 2*j ) ;
                        pj^ := j ;
                        end ;
                end   (* check for a permutation *) ;
end ;

release(marker) ; (* Release space for permutation array. *)

end   (* math_sort *) ;

ÿ