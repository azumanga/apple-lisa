;-----------------------------------------------------------
; 25JUL82: BUILT FROM COMPACT VERSION OF PTEN.
; 14AUG82: TABLE CUT DOWN TO 0-14 FROM 0-28 (JTC).
; 30AUG82: HI ENTRIES MODIFIED TO GET 10^206, ACCURATE (JTC)
; 13OCT82: ASSURE PROPERLY DIRECTED RESULTS (JTC).
; 30DEC82: CLEAN UP DIRECTED ROUNDINGS (JTC).
;
; COMPUTE POWER OF TEN INTO SLOT ADDRESSED BY (A1).
; POWER IS ABSOLUTE VALUE OF D3.
; ALLOWED TO CHANGE D0-D2 AND A2.
; QUICK VERSION USES PUFFY TABLE OF POWERS OF TEN TO
; AVOID MULTIPLIES AT TAIL END.
;-----------------------------------------------------------

TAB10SZ .EQU    9

;-----------------------------------------------------------
; TABLE ENTRIES ARE 7 WORDS LONG:
;     1   -- N, WHERE TABLE VALUE IS 10^N
;     2   -- ROUNDING ERROR, +1 IF ROUNDED UP, -1 IF DOWN
;     3-7 -- EXTENDED VALUE
;-----------------------------------------------------------
TAB10:
        .WORD   14
        .WORD   0
        .WORD   $402D
        .WORD   $B5E6
        .WORD   $20F4
        .WORD   $8000
        .WORD   $0000

        .WORD   27
        .WORD   0
        .WORD   $4058
        .WORD   $CECB
        .WORD   $8F27
        .WORD   $F420
        .WORD   $0F3A

        .WORD   55
        .WORD   1
        .WORD   $40B5
        .WORD   $D0CF
        .WORD   $4B50
        .WORD   $CFE2
        .WORD   $0766

        .WORD   108
        .WORD   1
        .WORD   $4165
        .WORD   $DA01
        .WORD   $EE64
        .WORD   $1A70
        .WORD   $8DEA

        .WORD   206
        .WORD   -1
        .WORD   $42AB
        .WORD   $9F79
        .WORD   $A169
        .WORD   $BD20
        .WORD   $3E41

        .WORD   412
        .WORD   1
        .WORD   $4557
        .WORD   $C6B0
        .WORD   $A096
        .WORD   $A952
        .WORD   $02BE

        .WORD   824
        .WORD   1
        .WORD   $4AB0
        .WORD   $9A35
        .WORD   $B246
        .WORD   $41D0
        .WORD   $5953

        .WORD   1648
        .WORD   1
        .WORD   $5561
        .WORD   $B9C9
        .WORD   $4B7F
        .WORD   $A8D7
        .WORD   $6515

;-----------------------------------------------------------;
; TABLE IS ACCESSED FROM HIGH EXPONENTS TO LOW.  IT IS
; ADDRESSED FROM BOTTOM UP FOR HISTORICAL REASONS.
;-----------------------------------------------------------
TAB10E:
        .WORD   3296
        .WORD   1
        .WORD   $6AC4
        .WORD   $86D4
        .WORD   $8D66
        .WORD   $26C2
        .WORD   $7EEC


;-----------------------------------------------------------
; START CODE.  TWO SPECIAL CASES:
;     EXP < 15   -- JUST PULL VALUE FROM TABLE BELOW.
;     EXP > 5000 -- OUTRAGEOUS VALUES ARE SET TO 5000.
;-----------------------------------------------------------
POW10:
        MOVEQ   #TAB10SZ,D1     ; NOTE D1.HI IS 0
        MOVE.W  D3,D0           ; GET SIGNED EXP,
        BPL.S   @1              ; THEN ITS ABSOLUTE VALUE
        NEG.W   D0
@1:
        CMPI.W  #15,D0          ; EASY CASE WHEN < 15
        BCS.S   PTQUICK

        CMPI.W  #5000,D0        ; EXP BIGGER THAN 5000?
        BCS.S   @10
        MOVE.W  #5000,D0        ; FORCE OVERFLOW

;-----------------------------------------------------------
; LOOP THROUGH TABLE FROM HI VALS TO LO, ACCUMULATING
; POWERS OF TEN.
;-----------------------------------------------------------
@10:
        .IF PCOK                ; GET TABLE ADDRESS
        LEA     TAB10E(PC),A2
        .ELSE
        LEA     TAB10E,A2
        .ENDC
PTLOOP:
        CMP.W   (A2),D0         ; TABLE EXP VS. EXP
        BCS.S   PTSKIP          ; CARRY -> D0 < (A2)

;-----------------------------------------------------------
; WHEN EXPONENT EXCEEDS CURRENT TABLE ENTRY, DECREMENT THE
; EXPONENT AND MULTILY/STORE BY THE POWER OF TEN.
; IF THE POWER MUST BE FIXED, A COPY IS MADE ON THE STACK.
; RECALL THAN #RNDUP=01B, #RNDDN=10B, #RND0=11B.
;-----------------------------------------------------------
        SUB.W   (A2)+,D0        ; DEC EXP AND SET A2 TO ERR

        tst.w   (a2)            ; Check inexact info.
        beq.s   @31             ; Branch around correction if exact.
        bset    #errx,(a0)      ; Set inexact otherwise.
        
        BTST    #RNDHI,(A0)     ; NONZERO --> RNDDN OR RND0
        BEQ.S   @13

        TST.W   (A2)            ; (A2) <= 0 --> ERROR OK
        BLE.S   @31
        BRA.S   @15
@13:
        BTST    #RNDLO,(A0)     ; NONZERO --> RNDUP
        BEQ.S   @31

        TST.W   (A2)
        BGE.S   @31             ; (A2) >= 0 --> ERROR OK

;-----------------------------------------------------------
; IF MUST ADJUST VALUE, COPY IT TO STACK FIRST, BEING SURE
; TO SAVE A2 POINTER FOR LATER RESTORATION.
; FIXES: ERROR=1 --> SUBTRACT 1 FROM LSB.  ERROR=-1 --> ADD.
; VALUES ARE SUCH THAT NO CARRY PROPAGATION HAPPENS.
;
; TRICKY USE OF A2: WHEN LEAST SIGNIFICANT WORD IS ACCESSED,
; A2 POINTS TO ERROR WORD; THEN WHEN ERROR WORD IS TESTED,
; A2 IS INCREMENTED TO SIGN/EXP WORD.
;-----------------------------------------------------------
@15:
        MOVE.L  A2,-(SP)        ; SAVE POINTER TO ERROR
        MOVE.W  10(A2),-(SP)    ; LOW SIGNIFICANT WORD
        TST.W   (A2)+           ; NOTE CHANGE IN A2
        BPL.S   @21             ; IF ERROR=1, SUBTRACT

        ADDQ.W  #1,(SP)         ; FORCE OPPOSITE ROUNDING
        BRA.S   @23
@21:
        SUBQ.W  #1,(SP)
@23:
        MOVE.L  4(A2),-(SP)     ; MIDDLE 32 SIG BITS
        MOVE.L  (A2),-(SP)      ; EXP AND HI 16 SIG BITS
        MOVEA.L SP,A2           ; POINT TO FIXED VALUE

        BSR.S   PTMUL
        ADDQ.L  #8,SP           ; KILL FIXED VALUE
        ADDQ.L  #2,SP
        MOVEA.L (SP)+,A2        ; RESTORE POINTER TO ERR
        ADDQ.L  #2,A2           ; POINT TO NUMBER
        BRA.S   @33

;-----------------------------------------------------------
;-----------------------------------------------------------
@31:
        ADDQ.L  #2,A2           ; SKIP OVER ERROR
        BSR.S   PTMUL
@33:
        SUBQ.L  #4,A2           ; POINT TO TABLE ENTRY

;-----------------------------------------------------------
; NEXT TABLE ENTRY IS 7 WORDS (14 BYTES) UP.
;-----------------------------------------------------------
PTSKIP:
        SUBA.W  #14,A2          ; SKIP TO NEXT TABLE ENTRY
        SUBQ.W  #1,D1           ; DECREMENT NUM COUNTER
        BNE.S   PTLOOP          ; ZERO WHEN FINISHED

;-----------------------------------------------------------
; NOW HAVE EXP <= 14.  IF D1<0 THEN MUST MULTIPLY IN, ELSE
; JUST MOVE IT FROM TABLE.
;-----------------------------------------------------------
PTQUICK:
        MULU    #10,D0          ; POWER * 10

        .IF PCOK
        LEA     TAB10S(PC,D0),A2
        .ELSE
        LEA     TAB10S(D0),A2
        .ENDC

;-----------------------------------------------------------
; NOTE THIS IS SEQUENCE IS USED AS ROUTINE BY TABLE CODE
; AT START AND IS FALLEN INTO FROM JUST ABOVE.
; TRICK WITH HIGH BIT OF D1: 0 IMPLIES FIRST PASS THROUGH
; MULTIPLY CODE, SO JUST LOAD VALUE, RATHER THAN MULTIPLY
;-----------------------------------------------------------
PTMUL:
        TST.L   D1              ; PLUS MEANS MUST NOT MULT
        BPL.S   @42

        PEA     (A2)
        PEA     (A1)
        MOVE.W  #OPMUL,-(SP)
        BSR     REFP68K
        RTS
@42:
        MOVE.W  (A2)+,(A1)+
        MOVE.L  (A2)+,(A1)+
        MOVE.L  (A2),(A1)
        SUBQ.L  #6,A1
        SUBQ.L  #6,A2
        BSET    #31,D1          ; MARK FOR LATER MULTS
        RTS


;-----------------------------------------------------------
;-----------------------------------------------------------
TAB10S:
        .WORD   $3FFF   ; 10 ^ 0
        .WORD   $8000
        .WORD   $0000
        .WORD   $0000
        .WORD   $0000

        .WORD   $4002   ; 10 ^ 1
        .WORD   $A000
        .WORD   $0000
        .WORD   $0000
        .WORD   $0000

        .WORD   $4005   ; 10 ^ 2
        .WORD   $C800
        .WORD   $0000
        .WORD   $0000
        .WORD   $0000

        .WORD   $4008   ; 10 ^ 3
        .WORD   $FA00
        .WORD   $0000
        .WORD   $0000
        .WORD   $0000

        .WORD   $400C   ; 10 ^ 4
        .WORD   $9C40
        .WORD   $0000
        .WORD   $0000
        .WORD   $0000

        .WORD   $400F   ; 10 ^ 5
        .WORD   $C350
        .WORD   $0000
        .WORD   $0000
        .WORD   $0000

        .WORD   $4012   ; 10 ^ 6
        .WORD   $F424
        .WORD   $0000
        .WORD   $0000
        .WORD   $0000

        .WORD   $4016   ; 10 ^ 7
        .WORD   $9896
        .WORD   $8000
        .WORD   $0000
        .WORD   $0000

        .WORD   $4019   ; 10 ^ 8
        .WORD   $BEBC
        .WORD   $2000
        .WORD   $0000
        .WORD   $0000

        .WORD   $401C   ; 10 ^ 9
        .WORD   $EE6B
        .WORD   $2800
        .WORD   $0000
        .WORD   $0000

        .WORD   $4020   ; 10 ^ 10
        .WORD   $9502
        .WORD   $F900
        .WORD   $0000
        .WORD   $0000

        .WORD   $4023   ; 10 ^ 11
        .WORD   $BA43
        .WORD   $B740
        .WORD   $0000
        .WORD   $0000

        .WORD   $4026   ; 10 ^ 12
        .WORD   $E8D4
        .WORD   $A510
        .WORD   $0000
        .WORD   $0000

        .WORD   $402A   ; 10 ^ 13
        .WORD   $9184
        .WORD   $E72A
        .WORD   $0000
        .WORD   $0000

        .WORD   $402D   ; 10 ^ 14
        .WORD   $B5E6
        .WORD   $20F4
        .WORD   $8000
        .WORD   $0000

ÿ