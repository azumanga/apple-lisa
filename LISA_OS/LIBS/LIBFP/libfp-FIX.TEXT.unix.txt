        PAGE
        .title 'FIX, REVISION: 3.1, %H% - %T% - %I%'
        .proc   mc%FIX  ; 0,0
        .def    mc%fix_A,mc%fix_B,mc%fix_C,mc%fix_D,mc%fix_E
        .ref    mc%int_A,mc%int_B,mc%iop
;
;
;*************************************************************************
;
;       REVISION HISTORY
;         DATE          REVISIONIST     REASON
;        7.JUL.81       DWC             CHANGED TO EXORMACS STRUC.ASM SYNTAX
;       31.JUL.81       G.WALKER        CORRECT ERROR IN mc%fix_B
;        3.AUG.81       G.WALKER        FIX THE FIX IN mc%fix_B
;       28.SEP.81       G.WALKER        NORMALIZE UNNORMED INPUT NUMBERS
;       16 Jan 83       Hough           Handle largest negative integer.
;
;*************************************************************************
;
;       F I X   (MOVE.X FPN,<EA> ; WHERE X = B,W OR L)
;
;*************************************************************************
;
;       CONVERT THE EXTENDED FP VALUE IN FPN INTO AN INTEGER IN D1
;
;
; ON ENTRY:
;
;       D0-D3 CONTAINS THE NUMBER TO FIX
;       A3 POINTS TO FPRB
;       D7 CONTAINS DESTINATION PRECISION INDEX
;               0 FOR .B
;               2 FOR .W
;               4 FOR .L
;
; ON EXIT:
;
;       D1 CONTAINS THE INTEGER
;       OTHER DATA REGISTERS ARE DESTROYED
;       ADDRESS REGISTERS ARE RESTORED
;
;       INTEGER OVERFLOW IS SET IF THE RESULT WAS TOO BIG FOR THE
;               DESTINATION.
;       INEXACT IS SET IF THE RESULT WAS ROUNDED OF IF INTEGER
;               OVERFLOW OCCURED.
;
; APPROXIMATE EXECUTION TIME:
;   AVG.    15USEC + INTEGER PART TIME = 15 + 64 = 79USEC
;   BEST    12USEC ......
;   WORST   20USEC .....
;
;
;******************* W H O  C A L L S  W H O ************************
;
;  THIS PROCEDURE CALLS: mc%iop, FINT
;
;  THIS PROCEDURE IS CALLED BY: STFP
;
;***********************  F L A G S   ******************************
;
;  EXCEPTION    SET BY     REASON
;
;  RSVX         ---        NOT AFFECTED BY THIS ROUTINE
;
;  IOVF         FIX        NUMBER WAS INFINITY OR TOO BIG TO FIT
;                             IN THE DESTINATION BINARY INTEGER
;
;  INEX         INT        THE NUMBER WAS NOT AN EXACT INTEGER OR WAS
;                             TOO SMALL TO BE AN INTEGER BUT WAS NOT ZERO.
;
;  DZ           ---        NOT AFFECTED BY THIS ROUTINE
;
;  UNFL         ---        NOT AFFECTED BY THIS ROUTINE
;
;  OVFL         ---        NOT AFFECTED BY THIS ROUTINE
;
;  mc%iop=3        mc%iop        TRIED TO CONVERT A NAN TO A BINARY INTEGER
;
;*********************************************************************
;
;**************************************************************************
;
;
;       TABLE OF exponents that correspond to largest negative integer.
;
FIXMAXEX EQU    *
         .word  7,15,31       ; BYTE, WORD, LONG WORD
;
;**********************
;
;       FIX ROUTINE E
;               FPN IN UNNORMALIZED
;
;**********************
;
mc%fix_E   EQU     *
        debugbegin
  jSR     mc%int_B ; TAKE INTEGER PART OF UNNORMALIZED NBR.
;       NORMALIZE THE UNNORMED VALUE (NOW AN INTEGER).
  MOVE.L  D1,D3
  OR.L    D2,D3
  bne     @1                    ; IF MANTISSA IS ZERO, SET EXPONENT
    MOVE.W        #$C000,D0         ; TO NORMAL ZERO.
  bra     @3
@1
    TST.L     D1
@2                                 ; SHIFT MANTISSA LEFT
      blt     @3
      LSL.L         #1,D2          ; AND DECREMENT EXPONENT
      ROXL.L        #1,D1          ; UNTIL MSBIT IS NON-ZERO.
      SUBQ.W        #1,D0
      TST.L         D1
      bra     @2
@3
  BRA.S fix_d1  ; JOIN MAIN PROCESSING
        debugend 'MC%FIX_E',0
;
;***********************
;
;       FIX ROUTINE D
;               FPN IS NORMALIZED
;
;***********************
;
mc%fix_D EQU *
        debugbegin
        jSR  mc%int_A  ; TAKE INTEGER PART; RESULT IS IN D0-D2
fix_d1 EQU *
        cmp   fixmaxex(d7),d0  ; { IF NUMBER TOO BIG FOR RESULT SIZE}
        blt.s   goodfix         ; Branch if definitely OK.
        bgt.s   badfix          ; Branch if definitely too big.
        tst.l   d0
        bpl.s   badfix          ; Branch if the number is positive.
        cmpi.l  #$80000000,d1
        bne.s   badfix          ; Branch if not the most negative integer.
        cmpi    #31,d0
        beq.s   retfix          ; Branch if -2^31 so following code doesn't test
                                ; for zero shift.
goodfix
        MOVEQ #31,D6   ; CALCULATE THE SHIFT COUNT
        SUB  D0,D6
        LSR.L D6,D1   ; RIGHT JUSTIFY THE RESULT
        TST.L D0      ; WAS FPN NEGATIVE
        bpl   retfix     ; IF SO
        NEG.L D1    ; NEGATE THE RESULT
retfix
        RTS
        debugend 'MC%FIX_C',0
  PAGE
;
;********************
;
;       FIX ROUTINE A
;               FPN IS INFINITY OR A NUMBER TOO BIG TO REPRESENT
;
;********************
;
;       TABLE OF MAXIMUM POSITIVE INTEGERS
;
FIXBIG  EQU *
        .long   $7F,$7FFF,$7FFFFFFF
;
badfix
mc%fix_A   EQU  *
        debugbegin
  ORI.B  #STIOVF_B+STINEX_B,TEMPSTAT(A3) ; SET INTEGER OVERFLOW AND INEXACT
  LSL   #1,D7            ; DOUBLE THE PRECISION INDEX
  MOVE.L FIXBIG(D7),D1   ; GET MAX POSITIVE INTEGER
  LSR    #1,D7           ; RESTORE D7 TO ORIGINAL INDEX
  TST.L  D0
  bpl    @21          ; IF FPN WAS NEGATIVE THEN
    NOT.L  D1         ; MAKE SMALLEST NEGATIVE NBR.
@21
  RTS
        debugend 'MC%FIX_A',0
;
;*************************
;
;       FIX ROUTINE C
;               FPN IS ZERO
;
;*************************
;
mc%fix_C   EQU  *
        debugbegin
  CLR.L  D1
  RTS
        debugend 'MC%FIX_C',0
;
;**************************
;
;       FIX ROUTINE B
;               FPN IS A NAN
;
;**************************
;
mc%fix_B  EQU  *
        debugbegin
  MOVE          #3,D0         ; iop = 3
  ANDI.B        #$03,STATUS(A3)       ; SET iop CODE IN STATUS
  LSL.B         #2,D0                   ; (THIS DUPLICATES CODE
  OR.B          D0,STATUS(A3)            ; IN THE iop SUBROUTINE.)
  BSET          #ENIOP_M,TEMPSTAT(A3)
  MOVE.L        D2,D1                 ; MOVE NAN ADDRESS AS THE (INTEGER)
  RTS                                    ; RESULT
        debugend 'MC%FIX_B',0

ÿ