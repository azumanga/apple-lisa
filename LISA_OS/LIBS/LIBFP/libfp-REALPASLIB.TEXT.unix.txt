{$setc backuptext := 2 } { How do you back up text files?
                           0 = blkiointr doesn't define %_backupinput or
                                %_setioresult
                           1 = blkiointr defines %_backupinput ( fib )
                           2 = blkiointr defines %_backupinput ( text ) }

program realpaslib ; { Procedures required to support Pascal REAL arithmetic,
                        required to be visible to linker but invisible to
                        compiler. }

{ File Libfp/RealPaslib, Version 9 April 1984.  }

{$C Copyright 1983, 1984, Apple Computer Inc. }

{$%+ }

{$ifc backuptext = 0 }
uses (*$U- *) (*$U libfp/newfplib *) fplib ;
{$elsec }
uses blkiointr, (*$U- *) (*$U libfp/newfplib *) fplib ;
{$endc }

const

nanascbinstring = 'N11' ; (* NaN for bad ascii floating point token. *)

        (* Character constants for file input. *)

backspace = 8 ; (* Control-H to cancel last character. *)
carriagereturn = 13 ;
cancel = 24 ; (* Control-X to cancel current input token. *)
rubout = 127 ;(* Rubout to signal abort for tokenscan. *)

fpioresult = 6101 ; (* IORESULT code for floating point read. *)

{$I libfp/fdbgok } { This file defines FDbgOK and FSymOK. }

{ Pascal REAL support library: the equivalent Pascal is shown as a comment. }
  
function  f32%r_r ( var f : text ) : real ;     { read(f,real) }
        forward ;
procedure %w_e ( var f : text ; x : real ; width : integer ) ;
                                                { write(f,x:width) }
        forward ;
procedure %w_f ( var f : text ; x : real ; width, after : integer ) ;
                                                { write(f,x:width:after) }
        forward ;
    
{$ifc backuptext = 0 }
procedure %_setioresult ( i : integer ) ; external ;
procedure %_backupinput ( var t : text ) ; external ;
{$endc }

{$ifc fdbgok }
{$R+ }
{$V+ }
{$elsec }
{$R- }
{$V- }
{$endc }

{$ifc fsymok }
{$D+ }
{$elsec }
{$D- }
{$endc }

{$S realin }

{$I libfp/realin }

{$S realout}

{$I libfp/realout }

{$C- }
begin
end.

ÿ