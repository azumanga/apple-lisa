;-----------------------------------------------------------
; 03JUL82: WRITTEN BY JEROME COONEN
; 12AUG82: TIDIED UP (JTC)
; 12DEC82: PROJ MODE OUT (JTC)
;
; WITH ALL NUMBERS NORMALIZED, COMPARISONS ARE QUITE EASY.
; THE TRICK IS TO PICK UP THE UNORDERED CASES FROM NAN
; COERCIONS AND TO AVOID FLOATING COERCIONS (SINCE THE ONLY
; RESULT IS A CCR VALUE).
;-----------------------------------------------------------


;-----------------------------------------------------------
; DO A JSR RATHER THAN JMP TO SPECIAL CASE ROUTINES IN ORDER
; TO TIDY UP END CASES:  EXPECT CCR SETTING IN D0.W.
; AT END: MOVE FROM D0.LO TO D7.HI AND SIGNAL INVALID
; IN CMPX ON UNORD.
;-----------------------------------------------------------
CMPTOP:
        .IF PCOK
        MOVE.W  CMPCASE(PC,D3),D3
        .ELSE
        MOVE.W  CMPCASE(D3),D3
        .ENDC

        .IF PCOK
        JSR     CMPTOP(PC,D3)
        .ELSE
        JSR     CMPTOP(D3)
        .ENDC

CMPFIN:                         ; PICK UP HERE FROM NANS
        CMPI.W  #CMPU,D0        ; UNORDERED?
        BNE.S   @1
        BTST    #OPIFCPX+16,D6  ; CHECK WHETHER TO BARF
        BEQ.S   @1
        BSET    #ERRI+8,D6
@1:
        MOVE.W  D0,D7           ; ALIGN CCR BITS IN D7.HI
        SWAP    D7
        RTS


;-----------------------------------------------------------
; WITH PROJ MODE OUT SEVERAL CASES COLLAPSE:
;       NUM - INF  -->    0 - NUM
;       INF - NUM  -->  NUM -   0
;       
;-----------------------------------------------------------
CMPCASE:                                ; DST - SRC
        .WORD   CMPNUM - CMPTOP         ; NUM - NUM
        .WORD   CMPS0  - CMPTOP         ; NUM - 0
        .WORD   CMPD0  - CMPTOP         ; NUM - INF

        .WORD   CMPD0  - CMPTOP         ;   0 - NUM
        .WORD   CMP0   - CMPTOP         ;   0 - 0
        .WORD   CMPD0  - CMPTOP         ;   0 - INF

        .WORD   CMPS0  - CMPTOP         ; INF - NUM
        .WORD   CMPS0  - CMPTOP         ; INF - 0
        .WORD   CMPINF - CMPTOP         ; INF - INF


;-----------------------------------------------------------
; NUM VS. 0: DISGUISE AS (0 VS. -NUM) AND FALL THROUGH.
;-----------------------------------------------------------
CMPS0:
        ADD.B   D6,D6           ; DST SGN -> SRC SLOT
        NOT.B   D6

;-----------------------------------------------------------
; 0 VS. NUM: SIGN OF NUM DETERMINES >.
;-----------------------------------------------------------
CMPD0:
        MOVEQ   #CMPG,D0        ; ASSUME >
        TST.B   D6              ; TST SRC SIGN
        BMI.S   @1
        MOVEQ   #CMPL,D0        ; 0 < POSITIVE
@1:
        RTS

;-----------------------------------------------------------
; INF VS. INF: EITHER =, OR SAME AS 0 VS. NUM.
;-----------------------------------------------------------
CMPINF:
        BTST    #5,D6           ; EQ -> SIGNS =
        BNE.S   CMPD0
CMP0:
        MOVEQ   #CMPE,D0
        RTS


;-----------------------------------------------------------
; NUM VS. NUM: IF SIGNS DIFFER, SAME AS 0 VS. NUM.
; IF SAME JUST COMPARE THE WORDS, TAKING ACCOUNT FOR COMMON
; SIGN.
;-----------------------------------------------------------
CMPNUM:
        BTST    #5,D6           ; NE -> TRIVIAL
        BNE.S   CMPD0
        
        CMPA.L  A4,A3           ; DST - SRC EXP'S
        BGT.S   @1
        BLT.S   @2
        CMPA.L  D4,A1           ; DST.HI - SRC.HI
        BHI.S   @1              ; HI -> UNSIGNED GREATER
        BCS.S   @2              ; CS -> UNSIGNED LESS
        CMPA.L  D5,A2
        BEQ.S   CMP0            ; THEY ARE =
        BCS.S   @2

;-----------------------------------------------------------
; THEY'RE > UNLESS NEGATIVE.
;-----------------------------------------------------------
@1:
        NOT.B   D6
;-----------------------------------------------------------
; THEY'RE < UNLESS NEGATIVE.
;-----------------------------------------------------------
@2:
        MOVEQ   #CMPL,D0
        TST.B   D6
        BPL.S   @21
        MOVEQ   #CMPG,D0
@21:
        RTS

ÿ