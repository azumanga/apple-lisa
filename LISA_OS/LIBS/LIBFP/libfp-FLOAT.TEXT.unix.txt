        .proc   mc%FLOAT  ; 0,0
        .ref    mc%round
;
;*************************************************************************
;
;       F L O A T
;
;*************************************************************************
;
;       7.JUL.81     DWC     CHANGED TO EXORMACS STRUCTURED ASM SYNTAX
;      28.AUG.81     JFB     CHANGED SOME SIGNED IF'S TO UNSIGNED
;
;*************************************************************************
;
; ON ENTRY:
;       D1 CONTAINS THE INTEGER EXTENDED TO 32 BITS
;
; ON EXIT:
;       D0-D3 CONTAINS ROUNDED FP NUMBER
;       D4 IS TRASHED
;       D5-D7 ARE RESTORED
;       A0-A7 ARE RESTORED
;
; APPROXIMATE EXECUTION TIMES:
;       BEST CASE       20   USEC
;       AVG. CASE       28   USEC
;       WORST CASE      40   USEC (EXCEPT IN mc%round SINGLE)
;
;******************* W H O  C A L L S  W H O ************************
;
;  THIS PROCEDURE CALLS: mc%round
;
;  THIS PROCEDURE IS CALLED BY: LDFP
;
;***********************  F L A G S   ******************************
;
;  EXCEPTION    SET BY     REASON
;
;  RSVX         ---        NOT AFFECTED BY THIS ROUTINE
;
;  IOVF         ---        NOT AFFECTED BY THIS ROUTINE
;
;  INEX         mc%round      CAN ONLY OCCUR IN mc%round TO SINGLE MODE WHEN
;                            THE INTEGER WILL NOT FIT IN THE 23 BIT
;                            FRACTION WITHOUT ROUNDING
;
;  DZ           ---        NOT AFFECTED BY THIS ROUTINE
;
;  UNFL         ---        NOT AFFECTED BY THIS ROUTINE
;
;  OVFL         ---        NOT AFFECTED BY THIS ROUTINE
;
;  IOP          ---        NOT AFFECTED BY THIS ROUTINE
;
;*********************************************************************
;
;
;
;
        debugbegin
  MOVE.L #NORM_L+31,D0 ; INIT TO NORMALIZED. START WITH EXP = 31
  MOVEQ #0,D2         ; CLEAR LSB'S OF RESULT SIGNIFICAND
  MOVEQ #0,D3
  TST.L D1            ; LOOK FOR SPECIAL CASES OF ZERO AND NEGATIVE
  bne   not_zero        ; IF ZERO
    MOVE.L #ZERO_L+$C000,D0 ; SET TO TRUE ZERO
    bra    adios
not_zero                   ; {NOT ZERO}
    bpl     @1                ; IF NEGATIVE INTEGER
      BSET  #31,D0            ; SET SIGN BIT AND...
      NEG.L D1                ; MAKE THE INTEGER POSITIVE
@1
;
;   WE NOW HAVE THE INTEGER RIGHT JUSTIFIED IN D1 WITH THE PROPER
;   EXPONENT (31) FOR A RIGHT JUSTIFIED NUMBER. NOW WE MUST RENORMALIZE
;   THE NUMBER BY SHIFTING LEFT WHILE DECREMENTING THE EXPONENT. FOR
;   SPEED THE ACTUAL NORMALIZING ALGORITHM DOES THE INITIAL NORMALIZATION
;   BY SWAPS AND MULTISHIFTS IF POSSIBLE.
;
    CMP.L #$10000,D1
    bcc    @2                         ; IF NO BITS SET IN 16 MSB'S {CS = LOWER}
      SWAP D1                         ; MOVE THE BITS UP 16 BITS
      SUB  #16,D0                     ; DECR EXPONENT BY 16
@2
    CMP.L #$1000000,D1
    bcc     @3                        ; IF NO BITS SET IN 8 MSB'S {CS = LOWER}
      LSL.L #8,D1                     ; MOVE BITS UP BY 8
      SUBQ  #8,D0                     ; DECR EXPONENT BY 8
@3
;
;   DO THE REST OF THE NORMALIZATION WITH SHIFTS. WE ARE NOW GUARANTEED
;   THAT AT LEAST 1 OF THE UPPER 8 BITS IS SET
;
    TST.L  D1             ; TEST FOR ALREADY NORMALIZED
    BRA.S  FLTBOT         ; GO JOIN THE BOTTOM OF THE DBMI LOOP
FLTLOP EQU *
    ADD.L  D1,D1          ; SHIFT LEFT 1 BIT
FLTBOT DBMI D0,FLTLOP     ; LOOP TIL NORMALIZED
;
;  IN round TO SINGLE MODE WE HAVE TO CALL THE round ROUTINE
;
    MOVE.B  MODE(A3),D4   ; GET THE ROUNDING PRECISION BITS
    AND.B   #MDPREC_B,D4
    beq     adios         ; IF NOT round TO EXTENDED (DEFAULT)
      cmp.b #$10,d4
      bne   adios
        jmp  mc%round        ; IF round TO SINGLE
adios
  RTS                   ; ADIOS
        debugend 'MC%FLOAT',0
    
ÿ