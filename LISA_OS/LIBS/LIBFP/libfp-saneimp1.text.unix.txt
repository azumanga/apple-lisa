        {-----------------------------------------------------------------
        ** 01SEP82: Written by Jerome Coonen.
        ** 13OCT82: Financial functions added -- later removed.
        ** 12DEC82: Remove projective from nextafter, add logb & scalb.
        **      Force all 16/32-bit params to be passed by reference.
        ** 05MAY83: Change parameter to SetEnv from VAR.
        **  3 Aug 83 : (DGH) Split into two files.
        -----------------------------------------------------------------}

        {-----------------------------------------------------------------
        ** WARNING: External procedure and function names must be distinct
        ** from 68K assembly language reserved words, particularly
        ** instruction mnemonics.  Thus names like AddX (corresponding to
        ** "Add with Extend Bit") must be redefined.  Here three X's are
        ** appended.  This results in extra overhead since the parameters
        ** must be copied on the stack, and of course more stack space
        ** is required.
        -----------------------------------------------------------------}

        {-----------------------------------------------------------------
        ** Two address, extended-based arithmetic operations.
        -----------------------------------------------------------------}

        procedure AddSxxx(var x : Single;   var y : Extended);  external;
        procedure AddS { (x : Single;   var y : Extended) } ;
        begin
            AddSxxx(x, y)
        end;
        procedure AddD { (x : Double;   var y : Extended) } ;   external;
        procedure AddC { (x : Comp;     var y : Extended) } ;   external;
        procedure AddXxxx(x : Extended; var y : Extended);      external;
        procedure AddX { (x : Extended; var y : Extended) } ;
        begin
            AddXxxx(x, y)
        end;
            { y := y + x }

        procedure SubSxxx(var x : Single;   var y : Extended);  external;
        procedure SubS { (x : Single;   var y : Extended) } ;
        begin
            SubSxxx(x, y)
        end;
        procedure SubD { (x : Double;   var y : Extended) } ;   external;
        procedure SubC { (x : Comp;     var y : Extended) } ;   external;
        procedure SubXxxx(x : Extended; var y : Extended);      external;
        procedure SubX { (x : Extended; var y : Extended) } ;
        begin
            SubXxxx(x, y)
        end;
            { y := y - x }

        procedure MulSxxx(var x : Single;   var y : Extended);  external;
        procedure MulS { (x : Single;   var y : Extended) } ;
        begin
            MulSxxx(x, y)
        end;
        procedure MulD { (x : Double;   var y : Extended) } ;   external;
        procedure MulC { (x : Comp;     var y : Extended) } ;   external;
        procedure MulX { (x : Extended; var y : Extended) } ;   external;
            { y := y * x }

        procedure DivSxxx(var x : Single;   var y : Extended);  external;
        procedure DivS { (x : Single;   var y : Extended) } ;
        begin
            DivSxxx(x, y)
        end;
        procedure DivD { (x : Double;   var y : Extended) } ;   external;
        procedure DivC { (x : Comp;     var y : Extended) } ;   external;
        procedure DivX { (x : Extended; var y : Extended) } ;   external;
            { y := y / x }

        function  CmpX { (x : Extended; r : RelOp;
                                    y : Extended) : boolean } ;  external;
            { x r y }

        function  RelX { (x, y : Extended) : RelOp } ;           external;
            { x RelX y, where RelX in [GT, LT, EQ, UNORD] }

{^ne 18 }
        {-----------------------------------------------------------------
        ** Conversions between Extended and the other numeric types,
        ** including the types integer and Longint.
        -----------------------------------------------------------------}

        procedure I2Xxxx(var x : integer; var y : Extended);    external;
        procedure I2X { (x : integer;   var y : Extended) } ;
        begin
            I2Xxxx(x, y)
        end;
        procedure S2Xxxx(var x : Single; var y : Extended);    external;
        procedure S2X { (x : Single;   var y : Extended) } ;
        begin
            S2Xxxx(x, y)
        end;
        procedure D2X { (x : Double;   var y : Extended) } ;   external;
        procedure C2X { (x : Comp;     var y : Extended) } ;   external;
        procedure X2X { (x : Extended; var y : Extended) } ;   external;
            { y := x { (arithmetic assignment) }

        procedure X2I { (x : Extended; var y : integer) } ;   external;
        procedure X2S { (x : Extended; var y : Single) } ;    external;
        procedure X2D { (x : Extended; var y : Double) } ;    external;
        procedure X2C { (x : Extended; var y : Comp) } ;      external;
            { y := x { (arithmetic assignment) }

{^ne 9 }
        {-----------------------------------------------------------------
        ** These conversions apply to 68K systems only.  Longint is
        ** a 32-bit two's complement integer.
        -----------------------------------------------------------------}

        procedure L2Xxxx(var x : Longint; var y : Extended);    external;
        procedure L2X { (x : Longint;  var y : Extended) } ;
        begin
            L2Xxxx(x, y)
        end;
        procedure X2L { (x : Extended; var y : Longint) } ;    external;
            { y := x { (arithmetic assignment) }

{^ne 17 }
        {-----------------------------------------------------------------
        ** Conversions between the numeric types and the intermediate
        ** decimal type.
        -----------------------------------------------------------------}

        procedure S2Decxxx(var f : DecForm; var x : Single; var y : Decimal); external;
        procedure S2Dec { (f : DecForm; x : Single;   var y : Decimal) } ;
        begin
            S2Decxxx(f, x, y)
        end;
        procedure D2Decxxx(var f : DecForm; x : Double; var y : Decimal); external;
        procedure D2Dec { (f : DecForm; x : Double;   var y : Decimal) } ;
        begin
            D2Decxxx(f, x, y)
        end;
        procedure C2Decxxx(var f : DecForm; x : Comp; var y : Decimal); external;
        procedure C2Dec { (f : DecForm; x : Comp;     var y : Decimal) } ;
        begin
            C2Decxxx(f, x, y)
        end;
        procedure X2Decxxx(var f : DecForm; x : Extended; var y : Decimal); external;
        procedure X2Dec { (f : DecForm; var x : Extended; var y : Decimal) } ;
        begin
            X2Decxxx(f, x, y)
        end;
            { y := x { (according to the format f) }

        procedure Dec2S { (x : Decimal; var y : Single) } ;   external;
        procedure Dec2D { (x : Decimal; var y : Double) } ;   external;
        procedure Dec2C { (x : Decimal; var y : Comp) } ;     external;
        procedure Dec2X { (x : Decimal; var y : Extended) } ; external;
            { y := x }

{^ne 18 }
        {-----------------------------------------------------------------
        ** Conversions between the numeric types and strings.
        ** { (These conversions have a built-in scanner/parser to convert
        ** between the intermediate decimal type and a string.)
        -----------------------------------------------------------------}

ÿ