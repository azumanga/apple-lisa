(* File L:Matrix, Version 25 September 1983. *)

procedure mat_mult ;

const
sizex = 10 ; (* size of extended item *)

var
marker : ^ integer ;
prod : extended ;
i, j : integer ;
px : ^ extended ;
ptr, offset, pi : longint ;

procedure prodij ; (* Computes prod := B[i,j]. *)

var
aik, xkj : extended ;
k : integer ;

begin (* prodij *)
afetch( i, 1, prod) ;
xfetch( 1, j, xkj ) ;
mulx( xkj, prod) ;
for k := 2 to p do
        begin
        afetch( i, k, aik ) ;
        xfetch( k, j, xkj ) ;
        mulx( xkj, aik ) ;
        addx( aik, prod ) ;
        end ;
end   (* prodij *) ;

begin (* mat_mult *)
error := p < 1 ;
if not error then if overlap then
        begin (* overlap *)
        mark(marker) ;
        ptr := fp_new( sizex * ord4(m) * n ) ;
        error := ptr = ord(nil) ;
        if not error then
                begin (* no error *)
                ptr := ptr - ord4(m+1) * sizex ;
                for i := 1 to n do 
                        begin (* for i *)
                        pi := ptr + sizex * ord4(m) * i ;
                        for j := 1 to m do
                                begin (* compute bij *)
                                prodij ;
                                pi := pi + sizex ;
                                px := pointer( pi ) ;
                                px^ := prod ;
                                end   (* compute bij *) ;
                        end   (* for i *) ;
                for i := 1 to n do 
                        begin (* for i *)
                        pi := ptr + sizex * ord4(m) * i ;
                        for j := 1 to m do
                                begin (* store bij *)
                                pi := pi + sizex ;
                                px := pointer( pi ) ;
                                bstore( i, j, px^ ) ;
                                end   (* store bij *) ;
                        end   (* for i *) ;
                end   (* no error *) ;
        release(marker) ;
        end   (* overlap *)
        else
        begin (* no overlap *)
        for i := 1 to n do for j := 1 to m do
                begin (* compute bij *)
                prodij ;
                bstore( i, j, prod ) ;
                end   (* compute bij *) ;
        end   (* no overlap *) ;
end   (* mat_mult *) ;

ÿ