(* File Libfp/MathCTVX, Version 18 January 1984.  *)

{$setc solvetest := false }

const

        { CONSTANTS for NaN Error Codes peculiar to MathLib routines. }

nanzero         = $15 ; { Attempt to create a NaN with zero significand. }
naninvtrig      = $22 ; { Invalid argument to inverse trig routine.  }
nanirr          = $27 ; { Invalid result of financial rate of return function. }
nandet          = $31 ; { Attempt to compute determinant of non-square matrix. }
nancond         = $32 ; { Attempt to estimate condition number failed. }

        (* Column indices of QR factorization. *)
        
pivotindex =   -1 ;     (* Word 0 contains pivot index. *)
reducednorm =  0 ; (* Really norm squared. *)

    {*
    ** The constants specify properties of the binary and decimal
    ** formats.  A decimal value is a packed array of BCD digits.
    ** A binary value is a packed array of bytes, with 8 bits per
    ** byte in this implementation.
    **
    ** The constants DEXPMAX and BEXPMAX are not tight bounds.
    ** Rather, they limit the width of the decimal and binary buffers
    ** that must be used to hold input values.  The bounds should
    ** at least cover the range of exponents of all representable
    ** numbers in a NORMALIZED form.
    *}
    
    DDIGLEN  = lsigdiglen;{max decimal precision }
    DEXPMAX  = 9999 ;    { max magnitude of decimal exponent }
    
    BBITLEN  =  64 ;     { max binary precision in bits }
    BEXPMAX  = 16500  ;  { max magnitude of binary exponent }
    BITSDIG  = 8 ;       { bits per machine 'digit' (byte) }
    BDIGLEN  =  9 ;      { max bytes = BBITLEN / BITSDIG, less 1 }
    MAXB     = 255;      { byte ranges from 0 to maxb}
    
    {*
    ** Constants determining the buffer widths are based on the
    ** interface values.  Each buffer must accommodate exactly
    ** any value representable in the respective UnpXXX format,
    ** with several extra digits for rounding.
    *}

    DBUFLEN  = 10050 ;   { DEXPMAX + DDIGLEN + several }
    BBUFLEN  = 2080 ;    { (BEXPMAX / BITSDIG) + BDIGLEN + several }
    MAXB2    = 128;      { MAXB div 2 }

type

packedenviron = packed record
                        hibit : 0..1 ;
                        rnd : rounddir ;
                        exceps : 0..31 ;
                        lastround : 0..1 ;
                        xprec  : RoundPrecision ;
                        halts : 0..31 ;
                        end ;
                        
fp_environ = ^ packedenviron ;
                        
QR_Record = record { Decomposed matrix representing QRP. }
        n, p : integer ; { Dimensions. }
        pivoted : boolean ; { True if pivoting occurred. }
        pdetneg : boolean ; { If true, det(P) = -1; otherwise +1. }
        diagprod : Extended ; { Product of diagonal elements of R. }
        {QR : array[-1..n,1..p] of Extended ; }
        end ;
        
ptr_qr_record = ^ qr_record ;
                        
    {*
    ** Binary and decimal values are manipulated in wide byte and
    ** digit buffers.  For efficiency, the values head and tail
    ** refer to the most and least significant ends of the 'relevant'
    ** part of the string.  An exponent is maintained separately.
    ** Depending on time and space constraints, a DBuf dig may either
    ** be a packed hex nibble (0..4) or a full byte.  Though consuming
    ** twice as much space, and unable to take advantage of a computer's
    ** BCD operations in assembly-language support routines, the latter
    ** are much more easily indexed.
    *}
    
    {*
    ** If space is an issue, these may be redefined as 'packed' records.
    *}
    UnpDec = { unpacked decimal format }
        record
            sgn : 0..1;
            exp : -DEXPMAX..DEXPMAX;
            dig : array [0..DDIGLEN] of 0..9
        end;

    UnpBin = { unpacked binary format }
        record
            sgn : 0..1;
            exp : -BEXPMAX..BEXPMAX;
            dig : array [0..BDIGLEN] of 0..MAXB
        end;

    RDir = (RNEAR, RUP, RDOWN, RZERO);  { rounding directions }
    
    {*
    ** If style is FloatStyle, pre is the number of significant digits
    ** output; if style is FixedStyle pre is the number, possibly negative,
    ** of fraction digits output.   Because it is presumed that decimal
    ** to binary conversion will only be used to convert to machine types,
    ** type FloatStyle is presumed in the D2BEnv.  In both environment
    ** records, the error flags inexact, uflow, oflow are NOT sticky;
    ** they are set according to the result of the latest conversion.
    *}
    B2DEnv =
        record
            pre    : integer;
            style  : (FixedStyle, FloatStyle);
            rnd    : RDir;
            MinExp : integer;
            MaxExp : integer;
            inexact: boolean;
            uflow  : boolean;
            oflow  : boolean
        end;
                  
    D2BEnv =
        record
            pre    : integer;
            rnd    : RDir;
            MinExp : integer;
            MaxExp : integer;
            inexact: boolean;
            uflow  : boolean;
            oflow  : boolean
        end;
                  
    DBuf =
        {packed}  record
            head : integer;
            tail : integer;
            dig : {packed} array [0..DBUFLEN] of  0..10 ; (* Sometimes last is 10. *) 
        end;

    BBuf =
        {packed} record
            head : integer;
            tail : integer;
            dig : {packed} array [0..BBUFLEN] of 0..MAXB
        end;


{*
** SYSTEM DEPENDENCY :  The ordering of bytes in a floating-point
** "word" is the vital issue here.
*}

    fp_byte = -128..+127 ;
    
    SByte =
    record
        case char of
        's' : (s : Single);
        'b' : (b : packed array [0..3] of fp_byte)
    end;
        
    DByte =
    record
        case char of
        'd' : (d : Double);
        'b' : (b : packed array [0..7] of fp_byte)
    end;
        
    EByte =
    record
        case char of
        'e' : (e : Extended);
        'b' : (b : packed array [0..9] of fp_byte)
    end;
        
VAR

qr00, qrifactor, qrjfactor : longint ;
qrij : extended ;

function signofx ; external ;
procedure fp_size ; external ;

{ Double precision secret procedures. }

{$%+ }
function  %d_minus ( x : double ) : boolean ; external ;
procedure %d_neg ( var z : double ) ; external ;
procedure %d_abs ( var z : double ) ; external ;
procedure %d_cpysgn ( var x : double ; y : double ) ; external ;
procedure %d_add ( x, y : double ; var z : double ) ; external ; (* z := x + y *)
procedure %d_sub ( x, y : double ; var z : double ) ; external ; (* z := x - y *)
procedure %d_mul ( x, y : double ; var z : double ) ; external ; (* z := x * y *)
procedure %d_div ( x, y : double ; var z : double ) ; external ; (* z := x / y *)
procedure %d_sqrt( var z : double ) ; external ;
function  %d_rel ( x, y : double ) : relop ; external ;
{$%- }

ÿ