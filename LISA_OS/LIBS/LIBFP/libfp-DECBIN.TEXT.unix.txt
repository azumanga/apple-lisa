 PAGE
        .proc   mc%DECBIN ; 0,0
        .ref    mc%fmult,mc%fdiv,mc%rtinf,mc%rtminf,mc%eorzero
        .ref    mc%iop,mc%pwrten
;
;******************************************
;
; DECBIN
;
;  29 JAN 81 SGL FIX FOR +0 INPUT GENERATED -0
;  04 MAY 81 SGL ROUNDING FIX, LET MULT/DIV DO ROUNDING
;  14 MAY 81 SGL GENERAL CLEAN UP AND SPEED UP
;   7 JUL 81 DWC CHANGED TO EXORMACS STRUCTURED ASM SYNTAX
;  30 JUL 81 SGL MOVE INEXACT BIT CLEAR TO mc%pwrten, REMOVE FROM HERE
;  22 SEP 81 SGL PROBLEMS W/OVFLOW & UNDFLOW, ERROR CONDITIONS
;  17 Jan 83 Hough Changed ending exception handling.
;
;******************************************
;
; CONVERT A FLOATING POINT NUMBER REPRESENTED BY
; 19 PACKED BCD DIGITS. CONVERT TO INTERNAL FORMAT.
;
; MOVE.P <EA>,FPN        CALLS DECBIN
;
;   ON ENTRY A1 POINTS TO A BCD BLOCK OF FOLLOWING FORMAT:
;
;   15                                           0
;   ---------------------------------------------
;   | BSGNEXP | BSGNMAN | P (# DIGITS  RT OF DP) |
;   |--------------------------------------------|
;   |           16 BIT EXPONENT                  |
;   |--------------------------------------------|
;   | XXXX |     19 PACKED BCD DIGITS            |
;   |-------                                 ----|
;   |-----                                   ----|
;   |-----                                   ----|
;   |-----                                   ----|
;   |--------------------------------------------|
;
;   XXXX ARE 4 UNUSED BITS
;   BSGNEXP = EXPONENT SIGN     $0 = POS     $F = NEG
;                               $A = +INF    $B = -INF
;                               $C = NAN
;   BSGNMAN = MANTISSA SIGN
;
; GENERAL ALGORITHM
;
; CHECK FOR AND RETURN ACCORDINGLY : NAN,+INF,-INF
; CHECK MANTISSA FOR ZERO - RETURN TRUE ZERO
; CONVERT BCD EXP TO BINARY, SAVE IN BCD BLOCK AS EXP  (STRINT)
; IF EXP SIGN NEG, COMPLEMENT EXP
; CONVERT BCD FRACTION TO NORMALIZED BINARY FP WITH EXP (STRBIN)
; ADJUST EXP (CONVERTED BCDEXP - P)
; ERROR IF P NEG OR EXCEED MAX SIZE  mc%iop=10, SET P=MAXSIZE
; SET MODE FOR ROUND TO NEAREST
; CALCULATE 10^(BCDEXP-P)          (mc%pwrten)
; MULTIPLY (+) OR DIVIDE (-) DEPENDING ON SIGN  (FMUL/mc%fdiv)
; RESTORE ORIG ROUNDING MODE
; ROUND RESULT        (ROUND)
; CHECK FOR OVERFLOW OR UNDERFLOW
; GO TO APPROPRIATE ROUTINE, IF TRAP SET RETURN NAN
;
;
 PAGE
;*** DECBIN ****
; ENTER WITH A1 POINTING TO BCD BLOCK
;
; RETURN D0-D3 = INTERNAL REPRESENTATION
; D5,D7 POINT TO BEG AND END OF BCD BLOCK OFF A1
;
; CALLS STRINT  RETURNS WITH EXPONENT IN D2
;               ENTER WITH D5,D7 SET
;               CALLS MUL10
;                 D6 USED AS TEMP
;                 RETURN D1,D2 AS RESULT
;                 USES D3,D4
;
; EXP(A2) = CONVERTED EXP
;
; CALLS STRBIN WITH D5,D7 INDEX OFF A1 TO MANTISSA
;               USES D3,D4,D6
;               RETURN WITH D1,D2 = BINARY NORMALIZED
;               D0.W = NEW EXP
;
; D5 <= CONVERTED BCD EXP - P FORM BCD BLOCK (W-P)
; D4 TEMP STORAGE
; SAVE MODE BYTE ON STACK A7
; A2 NEEDS TO BE SET, PNT TO FP REG
;
; CALLS mc%pwrten WITH D7 AND A2 SET
;              RETURN A2 POINT TO RESULT
;
; CALL mc%fmult OR mc%fdiv
;
;******************************************************
;
 PAGE
;************************************
;
; DECBIN
; CALLED WITH A1 POINTING TO BCD BLOCK
;             DESTROYS D4,D5,D7
;             A2 POINTS TO FPN RESULT - USED AS TEMPORARY STORAGE
;             A3 POINTS TO FP BLOCK
;
; EQUATES
BCDFRACT EQU 4 ; BEGINNING BCD FRACTION
MAXFRACT EQU 13 ; LAST MANTISSA BYTE
BCDEXP EQU 2 ; INDEX OFF A1 (BCD BLOCK) TO EXP
BCDP EQU 1 ; 2ND BYTE OF BCD BLOCK
MAXP EQU 19
;
        
        debugbegin
; SET SIGN FOR MANTISSA
 moveq   #0,D0
 MOVE.B (A1),D4 ; GET SIGNS
 ANDI.B #$0F,D4 ; CHK MANTISSA SIGN
; CHECK FOR NAN OR INFINITY
 cmp.b  #$0F,d4
 bne    @3
 MOVE.L #$80000000,D0 ; SET SIGN BIT - NEG
@3
; CHECK FOR VALID EXPONENT
; GENERATE INFINITY OR NAN
 MOVE.B (A1),D4 ; GET SIGNS
 LSR.B #4,D4 ; SHIFT WITH  0 FILL
; CHECK FOR NAN OR INFINITY
 cmp.b  #$C,d4
 bne    @4
; CREATE NAN USING ADDRESS FROM INPUT BCD BLOCK
 MOVE.L #$3FFF+NAN_L,D0
 CLR.L D1
 MOVE.L BCDFRACT+6(A1),D2
 RTS
@4
 cmp.b  #$A,d4           ; +INF
 bne    @5
 jmp mc%rtinf ; NEED TO SET FOR +
@5
 cmp.b  #$B,d4           ; -INF
 bne    @6
 jmp mc%rtminf ; NEED TO SET FOR -
@6
; CHECK FOR ZERO
 AND.B #$F,BCDFRACT(A1)
 MOVE.L BCDFRACT(A1),D4
 OR.L BCDFRACT+4(A1),D4 ; GET 32 BITS
 OR.W BCDFRACT+8(A1),D4 ; NEXT WORD
 TST.L D4
 bne    @7        ; CHECK IF ZERO
; SIGNS ALREADY SET, RETURN ZERO
; WITHOUT CHANGING SIGN BIT
 MOVE.W #$C000,D0
 BSET   #ZERO_R,D0 ; SET ZERO BIT
 CLR.L D1
 CLR.L D2
 RTS
@7
;
; CONVERT EXPONENT
; ASSUME A1 POINTS TO BEGINNING BCD BLK
; SET D5 = INDEX OFF A1 TO 1ST BYTE OF EXP
; D7 = INDEX OFF A1 TO LAST BYTE OF EXP
 moveq   #2,D5
 moveq   #3,D7
 BSR STRINT ; RETURN W/EXP IN D2
; CHECK EXP SIGN IF NEG
 BTST   #7,(A1) ; POINTS TO EXP SIGN
 beq    @8
 NEG.W D2 ; COMPLEMENT SIGN
@8
 MOVE.W D2,EXP(A2) ; SAVE CONVERTED EXP IN ARG2
; CONVERT BCD FRACTION TO AN INTEGER
; SET 1ST BYTE, LAST BYTE POINTERS
 BSR STRBIN ; CONVERT FRACTION AND NORMALIZE
;
; MASSAGE FP INTEGER TO ACCOUNT FOR BASE 10 EXP (BCDEXP).
; REPEATED MULT OR DIV USING EXP AS COUNTER.
; BASE 10 EXP FIRST ADJUSTED BA A FACTOR OF P TO TAKE
; INTO ACCOUNT THE LOCATION OF THE DECIMAL IN THE ORIGINAL
; BCD FRACTION. P IS LOCATION OF DECIMAL POINT FROM LEAST
; SIGNIFICANT END OF BCD STRING.
; SUBTRACT P FROM BASE 10 EXPONENT.
;
; SAVE A1 FOR mc%pwrten CALL
 MOVE.L A1,-(A7)
; SAVE REGISTERS
 MOVEM.L D0-D2,-(A7) ; SAVE ARG
; NEED TO VALIDATE P - EXCEED MAX?
 MOVE.B BCDP(A1),D5 ; GET P FROM BCD BLOCK
 cmp.b  #maxp,d5    ; SET P = MAX
 bls    @9
 moveq   #10,D0 ; mc%iop CODE
 jSR mc%iop
 MOVE.W #MAXP,D5 ; SET P = MAX
@9
 MOVE.W EXP(A2),D7 ; GET CONVERTED EXP
 SUB.W D5,D7 ; LEAVE RESULT IN D7.W
; PERFORM OPERATIONS WITH ROUND TO NEAREST
; GET, SAVE AND RESET MODE BYTE
 MOVE.B MODE(A3),-(A7) ; GET MODE BYTE
 AND.B #$FC,MODE(A3) ; SET FOR RND TO NEAREST - CLEAR B0,B1
; CALCULATE 10^(W-P) AND PLACE IN FP REG (A2)
; ADJUSTED BASE 10 EXP IS IN D7.W
; LET D4 B31 INDICATE NEG (W-P)
 BCLR   #31,D4
 BTST   #15,D7 ; NEG
 beq    @10
 NEG.W D7 ; COMPLEMENT IF NEGATIVE
 BSET   #31,D4 ; SET NEG FLAG
@10
 jSR mc%pwrten ; RETURN WITH RESULT IN D0-D3
; RESTORE MODE BYTE WITH ORIG ROUNDING MODE
 MOVE.B (A7)+,MODE(A3)
; MULT IF POS OR DIVIDE IF NEG EXPONENT
 MOVE.L (A7)+,(A2) ; MOVE ARG
 MOVE.L (A7)+,4(A2)
 MOVE.L (A7)+,8(A2)
 MOVE.L #0,D3
; CHECK IF OVERFLOW BIT SET BY mc%pwrten
 ;BCLR   #STOVFL_M,TEMPSTAT(A3)
 ; beq    @13
         ;TST.L D4
         ;bpl     @11
             ;MOVE.W #EXTMINXP-1,D0
             ;bra @12
 ;@11
             ;MOVE.W #EXTMAXP+1,D0
 ;@12
   ;bra   @15
 ;@13
   TST.L D4 ; CHECK SIGN OF EXP
   bmi  @14
   jSR mc%fmult ; MULTIPLY IF POSITIVE
     bra        @15
@14
      jSR mc%fdiv ; DIVIDE IF NEGATIVE
@15
; RESTORE A1
 MOVE.L (A7)+,A1
; CHECK OVERFLOW AND UNDERFLOW
 ; MOVE.L #0,D3
 ; cmp.w  #extmaxp-1,d0
 ; bls    @20
   ;cmp.w #extminxp,d0
  ;bcc   @20
  ;TST.W D0
  ;bpl        @18
  ;BSET   #STUNFL_M,TEMPSTAT(A3)
  ;BTST   #ENUNFL_M,ENABLE(A3)
  ;beq     @16
  ;jmp RTNAN
  ;bra     @17
  ;@16
  ;jSR UNF_N_TR ; NO TRAP HANDLER
  ;@17
; CHECK OVERFLOW
  ;bra        @20
  ;@18
  ;BSET   #STOVFL_M,TEMPSTAT(A3)
  ;BTST   #ENOVFL_M,ENABLE(A3)
  ;beq     @19
  ;jmp RTNAN ; IF SET RETURN A NAN
  ;bra     @20
  ;@19
  ;jmp OVF_N_TR ; NO TRAP HANDLER
  ;@20
 RTS
 PAGE
;
;    MUL10 MACRO
;
; TAKE INTEGER IN D1 AND D2 AND MULTIPLY BY 10.
; USEFUL FOR DECIMAL TO BINARY CONVERSIONS.
; USES REG D3,D4.
;
        .macro  MUL10
; MULTIPLY BY 2, I.E. LEFT SHIFT ONCE
 LSL.L #1,D2
 ROXL.L #1,D1
; COPY ARG TO TEMP REG
 MOVE.L D1,D3
 MOVE.L D2,D4
; LEFT SHIFT ARG TWICE MORE TO YIELD 8 * INPUT
 LSL.L #1,D2
 ROXL.L #1,D1
 LSL.L #1,D2
 ROXL.L #1,D1
; ADD 8 * INPUT TO 2 * INPUT TO YIELD 10 * INPUT
 ADD.L D4,D2
 ADDX.L D3,D1
 moveq   #0,D4 ; RESET TO 0
 .endm
;
 PAGE
;
; STRINT SUBROUTINE
; CALLED TO CONVERT BCD EXPONENT AND MANTISSA TO BINARY
; A1 POINTS TO BCD BLOCK
;    UPPER 4 BITS OF BCD BLOCK ARE MODIFIED (TO ZERO)
; D5 INDEX TO FIRST BYTE OF BCD STRING
; D7 INDEX TO LAST BYTE OF BCD STRING
; D6 HOLDS BCD BYTE
; USES D1,D2 AS ACCUMULATOR
;
STRINT EQU *
; INITIALIZE ACCUMULATORS
 moveq   #0,D6 ; ZERO UPPER BITS
 moveq   #0,D1
 moveq   #0,D2 ; ACCUMULATORS D1 AND D2
 moveq   #0,D4 ; USE FOR PROPAGATE CARRY
; SKIP ZEROES IN BCD STRING - CHANGE D5
 SUB.W D5,D7 ; CALCULATE LOOP COUNTER
STRLOOP TST.B 0(A1,D5.W)
 BNE CONLOOP ; OUT OF LOOP IF NOT ZERO
 ADDQ.W #1,D5 ; INCR INDEX
 DBRA D7,STRLOOP
; FALL THRU WHEN ALL ZERO
 RTS
;
; CONVERT REMAINING DIGITS TO BINARY INTEGER
CONLOOP MOVE.B 0(A1,D5.W),D6
; SHIFT OFF LOW NIBBLE
 LSR.L #4,D6
; MULTIPLY ACCUMULATORS BY 10
 MUL10
; ADD IN NEXT BCD DIGITS
 ADD.L D6,D2
 ADDX.L D4,D1 ; PROPAGATE CARRY
 MOVE.B 0(A1,D5.W),D6 ; GET LS NIBBLE
; REMOVE UPPER NIBBLE
 AND.B #$0F,D6
 MUL10
; ADD IN LOW NIBBLE
 ADD.L D6,D2
 ADDX.L D4,D1 ; CARRY
 ADDQ.B #1,D5 ; NEXT BCD BYTE
 DBRA D7,CONLOOP ; LOOP ON REST OF CHARACTERS
 RTS
 PAGE
;************************************************
;
; STRBIN SUBROUTINE
;
; CONVERT SIGNED, PACKED BCD STRING REPRESENTING A
; FP SIGNIFIACAND. CONVERT TO INTERNAL FORMAT.
;
; ON ENTRY: A1 POINTS TO BCD BLOCK
;    USED:  D5,D7 INDICES OFF A1, SET FOR STRINT CALL
; ON EXIT:  D0-D3 CONTAIN CONVERTED FP NUMBER
;
; EQUATES
FRACTSIZ EQU 64
;
; SET 1ST BYTE AND LAST BYTE POINTERS (D5,D7)
STRBIN moveq   #4,D5 ; 1ST BYTE OF MANTISSA IN BCD STRING
 moveq   #13,D7 ; LAST BYTE OF MANTISSA
 BSR STRINT ; RETURN W/D1,D2 = BINARY NUMBER
; SIGN IN D0 HAS ALREADY BEEN SET
; SET EXPONENT AND LEFT JUSTIFY
 MOVE.W #FRACTSIZ-1,D0
; NORMALIZE SIGNIFICAND
 TST.L D1
@1
 blt   @2
 LSL.L #1,D2 ; LEFT SHIFT
 ROXL.L #1,D1 ; SHIFT W/CARRY
 SUBQ.W #1,D0 ; DEC EXP
 TST.L D1
 bra    @1
@2
 RTS
;
        debugend 'MC%DECBI',0

ÿ