(* File Libfp/RealIn, Version 9 April 1984.  *)

(* Copyright 1984, Apple Computer Inc. *)

function f32%r_r (* var f : text ) : real *);
        (* The Pascal procedure called via %r_r to read a real value
        from Infile.  *)

label 1 ;

var
{$ifc backuptext <> 0 }
pfib : ^ fib ;
{$endc }
sn : decimal ;
x : real ;
ls : integer ;
s : decstr ;
nblanks, index : integer ;
validprefix : boolean ;

procedure bump ;

var
c : char ;
i : integer ;
bs, sp : decstr ;

procedure appc ;
begin
if ls < decstrlen then ls := ls + 1 ;
s[ls] := c ;
end ;

begin (* bump *)
read( f, c ) ;
case ord(c) of

backspace : begin (* backspace *)
        if (ls+nblanks) > 0 then
                begin (* do backspace *)
                write(f, chr(backspace),' ', chr(backspace)) ;
                if ls > 0 
                        then ls := ls - 1
                        else nblanks := nblanks - 1 ;
                end   (* do backspace *) ;
        goto 1 ;
        end (* backspace *) ;
                
cancel, rubout : begin (* rubout *)
        for i := 1 to ls do
                begin
                bs[i] := chr(backspace) ;
                sp[i] := ' ' ;
                end ;
        bs[0] := chr(ls) ;
        sp[0] := chr(ls) ;
        write( f, bs ) ; write( f, sp ) ; write( f, bs ) ;
        for i := (ls+1) to nblanks do
                begin
                bs[i] := chr(backspace) ;
                end ;
        bs[0] := chr(nblanks) ;
        write( f, bs ) ; 
        ls := 0 ;
        nblanks := 0 ;
        goto 1 ;
        end (* rubout *) ;
        
otherwise begin (* normal *)
        if eof(f) then
                begin (* eof *)
                c := chr(carriagereturn) ;
                appc ;
                end   (* eof *)
                else
                begin (* not eof *)
                if eoln(f) then
                        begin (* eoln *)
                        if ls = 0 then
                                begin (* only blank so far *)
                                nblanks := 0 ;
                                end   (* only blank so far *)
                                else
                                begin (* started token *)
                                c := chr(carriagereturn) ;
                                appc ;
                                end   (* started token *) ;
                        end   (* eoln *)
                        else
                        begin (* char *)
                        if (ls=0) and (c = ' ') 
                                then nblanks := nblanks + 1 
                                else appc ;
                        end   (* char *) ;
                end   (* not eof *) ;
        end (* normal *) ;

end (* case ord(c) *) ;
end   (* bump *) ;

begin (* f32%r_r *)

ls := 0 ;
nblanks := 0 ;

1 :
while ls = 0 do bump ; (* Remove leading blanks.  *)

index := 1 ;
s[0] := chr(ls) ;
str2dec( s{ignificand}, index, sn, validprefix ) ;

while validprefix do
        begin
        bump ;
        index := 1 ;
        s{ignificand}[0] := chr(ls{ig}) ;
        str2dec( s{ignificand}, index, sn, validprefix ) ;
        end ;

{$ifc backuptext = 1 }
pfib := pointer(@f) ;
%_backupinput( pfib^ ) ;
{$elsec }
%_backupinput( f ) ;
{$endc }

if index <= 1 then sn.sig := nanascbinstring ; (* BAD input! *)

if ( index < 2 ) (* error if no characters taken *) or
   ( index < ls ) (* error if characters lost *) then
        if ioresult=0 then %_setiorslt( fpioresult ) ;
dec2s( sn, x ) ;
f32%r_r := x ;
end   (* f32%r_r *) ;

ÿ