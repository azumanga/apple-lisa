; Copyright 1983, Apple Computer Inc.

;       File LibFP/Double,  Version 23 November 1983  

        .proc   %d_minus
x       .equ    8               ; Address of x relative to a6.
b       .equ    12              ; Address of boolean relative to a6.
        link    a6,#0
        movea.l x(a6),a0        ; A0 gets address of argument.
        btst    #7,(a0)         ; Test sign bit.
        sne     b(a6)           ; Set result.
        andi.b  #1,b(a6)        ; Clear higher bits of result.
        move.l  4(a6),8(a6)     ; Move return address.
        unlk    a6
        addq.l  #4,sp           ; Skip argument.
        debugrts '%D_MINUS'
        
        .proc   %d_abs
;
; procedure absd ( var z : double ) ;
;
        link    a6,#0
        movea.l 8(a6),a0                ; A0 gets address of z.
        bclr    #7,(a0)                 ; Clear sign bit.
        move.l  4(a6),8(a6)             ; Move return address.
        unlk    a6
        addq.l  #4,sp                   ; Skip parameter.
        debugrts '%D_ABS  '

        .proc   %d_neg
;
; procedure negd ( var z : double ) ;
;
        link    a6,#0
        movea.l 8(a6),a0                ; A0 gets address of z.
        bchg    #7,(a0)                 ; Reverse sign bit.
        move.l  4(a6),8(a6)             ; Move return address.
        unlk    a6
        addq.l  #4,sp                   ; Skip parameter.
        debugrts '%D_NEG  '
        
        .proc   %d_cpysgn
;
; procedure cpysgnd ( var x : double ; y : double ) ;
;
        link    a6,#0
        movea.l 8(a6),a0                ; A0 gets address of y.
        movea.l 12(a6),a1               ; A1 gets address of x.
        btst    #7,(a0)
        beq.s   @1
        bset    #7,(a1)
        bra.s   @2
@1
        bclr    #7,(a1)
@2
        move.l  4(a6),12(a6)            ; Move return address.
        unlk    a6
        addq.l  #8,sp                   ; Skip parameters.
        debugrts '%D_CPYSG'

        dblearith       ADD
        dblearith       SUB
        dblearith       MUL
        dblearith       DIV
;
; procedure d%1d ( x, y : double ; var z : double ) ;
;
        
        dblefunction SQRT,4
;
; procedure %1d ( var z : double ) ;
;
        
; function reld ( x, y : double ) : relop 
        
        .proc   %d_rel
r       .equ    16                      ; Result is at r(a6).
x       .equ    12                      ; X is at  12(a6).
y       .equ    8                       ; Y is at  8(a6).
t       .equ    -10                     ; T is at -10(a6) = temporary extended.
        link    a6,#t                   ; Allocate space for T.
        move.l  x(a6),-(sp)             ; var x : double
        pea     t(a6)                   ; var t : extended
        fd2x                            ; t := x
        move.l  y(a6),-(sp)             ; var y : double
        pea     t(a6)                   ; var t : extended
        MOVEQ   #7,D0           ; ASSUME UNORDERED
        FCMPd
        FBU     @9              ; UNORDERED
        FBNE    @1
        MOVEQ   #3,D0           ; EQUAL
        BRA.S   @9
@1:
        FBGT    @3
        MOVEQ   #1,D0           ; LESS
        BRA.S   @9
@3:
        MOVEQ   #0,D0           ; GREATER
@9:
        MOVE.b  D0,r(a6)
        move.l  4(a6),x(a6)             ; Move return address into place.
        unlk    a6
        adda.l  #x-4,sp                 ; Skip arguments.
        debugrts '%D_REL  '

ÿ