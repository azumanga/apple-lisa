; Copyright 1983, Apple Computer Inc.

;
; File L:F32, Version 31 October 1982.
;
; This file contains the Pascal interfaces to various 32 bit floating point
; routines.


        .proc   %%%f32
        
        .def    f32_kind,f32_minus,f32_integral,f32_fraction,f32_ilogb,f32_scale
        
; function f32_kind ( x : real ) : fpkindtype ;
;       Returns 0 if x is zero
;               2 if normalized or denormalized
;               3 if infinity
;               4 if NAN
        .ref    f32%aunpack
f32_kind
        debugbegin
        saveret
        move.l  (sp)+,d0        ; D0 gets X.
        movem.l a3/d4-d7,-(sp)  ; Save registers.
        initfpcb
        jsr     f32%aunpack
        ;endop                  ; Not needed because kind causes no exceptions.
        movem.l (sp)+,a3/d4-d7  ; Restore registers.
        move.b  d0,(sp)         ; Stack function result.
        jmp     (a0)
        debugend 'f32_kind',2
        
; function f32_minus ( x : real ) : boolean ;
;       Returns false if sign is + ; true if sign is -.

f32_minus
        debugbegin
        saveret
        move.l  (sp)+,d0        ; D0 gets X.
        tst.l   d0
        bmi.s   minus
        clr.b   (sp)            ; 0 for positive.
        jmp     (a0)
minus   move.b  #1,(sp)         ; 1 for negative.
        jmp     (a0)
        debugend 'f32_minus',1


; function f32_integral ( x : real ) : boolean
; returns true if x is an integral value or zero, false if not or inf or nan

f32_integral
        debugbegin
        movea.l (sp)+,a0        ; A0 gets return address.
        move    (sp),d0         ; D0 gets sign, exp, and 7 bits.
        move.l  (sp)+,d1        ; D1 gets x.
        bclr    #15,d0          ; Clear sign bit.
        cmpi    #$7f80,d0       
        bge.s   false           ; Not integral if inf or nan.
        andi.l  #$7fffff,d1     ; D1 gets significand.
        lsr     #7,d0           ; D0 gets exponent right justified.
        beq.s   minimum         ; Minimum exponent is zero or denorm.
        cmpi    #150,d0
        bge.s   true            ; Exponent >= 23 implies integral.
        cmpi    #127,d0
        blt.s   false           ; Exponent < 0 implies not integral.
                        ; 0 <= exponent <= 22.
        clr.l   d2
        neg     d0
        addi    #150,d0         ; D0 := 23-exponent.  1 <= D0 <= 23.
        bset    d0,d2           ; D2 gets 2^0 bit; rest of D2 is zero.
        subq.l  #1,d2           ; D2 gets mask for fraction bits.
        and.l   d1,d2           ; D2 gets fraction bits.
        beq.s   true
false
        clr.b   (sp)            ; Not integral.
        jmp     (a0)            ; Return.
true
        move.b  #1,(sp)         ; Integral.
        jmp     (a0)            ; Return.
minimum                 ; Minimum exponent - number was zero or denorm.
        tst.l   d1
        beq.s   true
        bra.s   false
        debugend 'f32_inte',0
        
        
; function f32_fraction ( x : real ) : real ;
;
; Returns the f32_fraction part of x, which is the difference between x and
; x rounded toward zero to an integer.
; Returns zero for x = zero, integer, or inf..
; Returns x if abs(x) < 1 and for nan.

        .ref    f32%fct
        
f32_fraction
        debugbegin
        saveret                 ; A0 gets return address.
        move.l  (sp)+,d0        ; D0 gets X.
        movem.l a3/d3/d4/d7,-(sp)     ; Save registers.
        jsr     f32%fct
        movem.l (sp)+,a3/d3/d4/d7     ; Restore registers.
        move.l  d0,(sp)         ; Push result.
        jmp     (a0)            ; Return to caller.
        debugend 'f32_frac',0
        
; function f32_ilogb ( x : real ) : integer ;
;
; Returns the unbiased exponent of x.
; Set the Invalid flag if x is zero, infinity, or NAN.

        .ref    f32%ilogb
        
f32_ilogb
        debugbegin
        saveret                 ; A0 gets return address.
        move.l  (sp)+,d0        ; D0 gets X.
        movem.l a3/d7,-(sp)     ; Save registers.
        jsr     f32%ilogb
        movem.l (sp)+,a3/d7     ; Restore registers.
        move    d1,(sp)         ; Push result.
        jmp     (a0)            ; Return to caller.
        debugend 'f32_ilogb',3
        
        
; function f32_scale ( x : real, i : integer ) : real ;
;
; Returns x * 2^i.  Doesn't change x if x is zero, infinity, or nontrapping
; NAN.
; May set overflow, underflow, inexact, invalid.

        .ref    f32%scale
        
f32_scale
        debugbegin
        saveret                 ; A0 gets return address.
        move    (sp)+,d1        ; D1 gets I.
        move.l  (sp)+,d0        ; D0 gets X.
        movem.l a3/d3/d7,-(sp)     ; Save registers.
        jsr     f32%scale
        movem.l (sp)+,a3/d3/d7     ; Restore registers.
        move.l  d0,(sp)         ; Push result.
        jmp     (a0)            ; Return to caller.
        debugend 'f32_scale',3

ÿ