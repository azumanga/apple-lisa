{ Copyright 1983, Apple Computer Inc. }


(* File L:FPModes, Version 30 January 1983. *)

procedure setxcpn (* e : xcpn ; b : boolean *) ;
var
es : excepset ;
begin 
getexcepset( es ) ;
if b then setexcepset( es + [e] ) else setexcepset ( es - [e] ) ;
end   ;

function getxcpn (* e : xcpn *) (*: boolean*) ;
var
es : excepset ;
begin 
getexcepset( es ) ;
getxcpn := e in es ;
end   ;

procedure gettexcepset (* var es : excepset *) ;
var
equiv : record case boolean of
        false : (e : excepset );
        true  : ( b : bite ) ;
        end ;
begin (* gettexcepset *)
equiv.b := fpcb_.block.status.texcep ;
es := equiv.e ;
end   (* gettexcepset *) ;

procedure getexcepset (* var es : excepset *) ;
var
equiv : record case boolean of
        false : (e : excepset );
        true  : ( b : bite ) ;
        end ;
begin (* getexcepset *)
equiv.b := fpcb_.block.status.excep ;
es := equiv.e ;
end   (* getexcepset *) ;

procedure setexcepset (* es : excepset *) ;
var
equiv : record case boolean of
        false : (e : excepset );
        true  : ( b : bite ) ;
        end ;
begin (* setexcepset *)
equiv.e := es ;
fpcb_.block.status.excep := equiv.b ;
end   (* setexcepset *) ;

procedure settexcepset (* es : excepset *) ;
var
equiv : record case boolean of
        false : (e : excepset );
        true  : ( b : bite ) ;
        end ;
begin (* settexcepset *)
equiv.e := es ;
fpcb_.block.status.texcep := equiv.b ;
end   (* settexcepset *) ;

procedure clrexcepset ;
begin
fpcb_.block.status.excep := 0 ;
end ;

procedure gettrapset (* var es : excepset *) ;
var
equiv : record case boolean of
        false : (e : excepset );
        true  : ( b : bite ) ;
        end ;
begin (* gettrapset *)
equiv.b := fpcb_.block.status.trap ;
es := equiv.e ;
end   (* gettrapset *) ;

procedure clrtrapset ;
begin
fpcb_.block.status.trap := 0 ;
end ;

procedure fp_zero_ascii (*
        sign : boolean ; before, after : integer ; format : fp_format ;
        var s : fp_string ; var error : boolean*) ;
        
        (* S := ascii representation of zero, according to format:
        
        fp_lisa,fp_free,fp_i : '0' or '-0'
        fp_f                 '-0.0' with After-1 trailing blanks.
                                No trailing zero if after <= 0.
                                No trailing blanks if after <= 1.
        fp_en                '0.0' or '-0.0' followed by:
                                n+2 blanks if after <= 0
                                after+n+1 blanks if after >= 1
                                No leading zero if before <= 0.  
                                No trailing zero if after <= 0.
        Error is true if the string size would exceed maxfpstring because
        After is too big.
        If Error is true, s contains the string but excess trailing zeros
        or blanks are omitted.
        
                                                        *)

var
is, is0, isn, count : integer ;
c : char ;

procedure app ( c : char ) ; (* Appends one character to s *)
begin
is := is + 1 ;
s[is] := c ;
end ;

begin (* fp_zero_ascii *)
if format < fp_f then
        begin (* lisa, free, i *)
        if sign then s := '-0' else s := '0' ;
        error := false ;
        end   (* lisa, free, i *) 
        else
        begin (* f or e *)
        is := 0 ; 
        if sign then app('-') ; 
        if (format = fp_f) or (before > 0) then app('0') ; (* Leading zero *)
        app('.') ;
        if after > 0 then app('0') ; (* Trailing zero *)
        if format = fp_f then
                begin (* f - append blanks *)
                if after <= 0 then count := 0 else count := after - 1 ;
                end   (* f - append blanks *) 
                else
                begin (* e - append blanks *)
                if format = fp_e then count := 0 else
                        count := 3 + ord(format) - ord(fp_e1) ;
                if after > 0 then count := count + after - 1 ;
                end   (* e - append blanks *) ;
        c := ' ' ;
        error := (is+count) > maxfpstring ;
        if error then count := maxfpstring - is ; 
        if count > 0 then
                begin (* append *)
                is0 := is+1 ; isn := is + count ;
                for is := is0 to isn do s[is] := c ; (* Append 0 or blank *)
                is := isn ; (* control variable is undefined *)
                end   (* append *) ;
        s[0] := chr(is) ;
        end   (* f or e *) ;
end   (* fp_zero_ascii *) ;

procedure fp_inf_ascii (*
        sign : boolean ; width : integer ; 
        var s : fp_string ; var error : boolean*) ;
                        
        (* S := an ascii representation of +Infinity or -Infinity
        according to sign.  length(s) will be width.
        Error is true if width < 2 or width > maxfpstring.
        Then length(s) will be 2 or maxfpstring.
                                                *)
        
var
c : char ;
i : integer ;

begin (* fp_inf_ascii *)
error := (width < 2) or (width > maxfpstring) ;
if error then 
        begin
        if width < 2 then width := 2 else width := maxfpstring 
        end ;
if sign then c := '-' else c := '+' ;
for i := 1 to width do s[i] := c ;
s[0] := chr(width) ; (* Set length *)
end   (* fp_inf_ascii *) ;

procedure fp_nan_ascii (
        sign : boolean ; width : integer ; var pre, post : fp_string ;
        var s : fp_string ) ;
                        
        (* S := an ascii representation of a NaN according to Sign
        and Pre and Post.  Pre and Post are strings of hexits representing the
        significand of the NaN.  Leading zeros of Pre and trailing zeros of Post
        are deleted.
                The length of s will be minimal and <= width but no less than 3.
                                                *)
        
var
i, lcat, ls, lpre, lpost : integer ;

procedure appc( c : char ) ;
begin
ls := ls + 1 ;
s[ls] := c ;
end ;

procedure apps( p : fp_string ; n : integer ) ;
var i : integer ;
begin
for i := 1 to n do s[ls+i] := p[i] ;
ls := ls + n ;
end ;

begin (* fp_nan_ascii *)
if width <= 3 then s := 'NaN' else
        begin (* width >= 4 *)
        if sign then s := '-NaN' else s := 'NaN' ;
        ls := length(s) ;
        lpre := length(pre) ;
        i := 1 ;
        while (pre[i] = '0') and (i < lpre) do i := i + 1 ; (* Skip leading zeros. *)
        if i >= 2 then delete( pre, 1, i-1) ;
        lpre := length(pre) ;
        lpost := length(post) ;
        i := lpost ;
        while (post[i] = '0') and (i > 1) do i := i - 1 ; (* Skip trailing zeros. *)
        if post[i] = '0' then i := i - 1 ; (* Last zero. *)
        lpost := i ;
        
        lcat := ls + 2 + lpre ;
        if lpost > 0 then lcat := lcat + 1 + lpost ; 
                (* Compute length of whole string. *)
        if lcat <= width then
                begin (* use whole string *)
                appc('''') ; apps(pre,lpre) ; 
                if lpost > 0 then
                        begin (* append trailer *)
                        appc(':') ; apps(post,lpost) ;
                        end   (* append trailer *) ;
                appc('''') ;
                end   (* use whole string *)
                else
                begin (* try omitting tail *)
                lcat := ls + 3 + lpre ;
                if lcat <= width then
                        begin (* omit tail *)
                        appc('''') ; apps(pre, lpre) ; apps(':''',2) ;
                                (* Retain : as clue to missing tail. *)
                        end   (* omit tail *)
                        else
                        begin (* omit significand *)
                        if (width - ls) >= 2 then
                                begin (* add quotes *)
                                apps('''''',2) ;
                                end   (* add quotes *) ;
                        end   (* omit significand *) ;
                end   (* try omitting tail *) ;
        s[0] := chr(ls) ;
        end   (* width >= 4 *) ;
end   (* fp_nan_ascii *) ;

procedure checktrap (* r : fp_traprecord *) ;
        (* Common routine for software invoked fp traps. *)
        (* r.header and r.es are presumed set *)
var
trapset : excepset ;
x : xcpn ;

begin (* checktrap *)
{$ifc not fp_compiler }
gettrapset ( trapset ) ;
trapset := trapset * r.es ; (* Get set of potential traps. *)
if trapset <> [] then
        begin (* a trap will occur *)
        fpcb_.block.status.instad := @ r ; 
                (* This is a flag to trap handler that the
                trap was from a composite rather than an atomic operation. *)
        x := invop ;
        while not (x in trapset) do x := succ(x) ;
                (* Find highest ranking trap. *)
        fp%execute ( fpcb_.ptrapvector[x] ) ; (* Invoke user trap handler *)
        end   (* a trap will occur *) ;
{$endc }
end   (* checktrap *) ;

procedure fp_postoperation;
        (* Simulates exception handling and and trapping of a floating point
        instruction.  *)
        (* r.es is presumed set *)

begin (* excep_composite *) 
r.header := 0 ;
checktrap(r) ;
end   (* excep_composite *) ;

ÿ