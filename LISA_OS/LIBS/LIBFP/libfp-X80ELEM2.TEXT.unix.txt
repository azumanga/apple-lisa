{ Copyright 1983, Apple Computer Inc. }

(* File L:X80Elem2, Version 22 February 1983.  *)

procedure evalue ;
        (* Procedure to return constant e *)
begin
z := fpke ;
end ;

procedure expe1r ( var x : fp_extended ; var z : fp_extended ) ;
        (* Computes e^x-1 for x that is zero, NonNormal, or normal.  *)
var
aintx, fracx : fp_extended ;
xdim : fp_extended ;

begin (* expe1r *)
fpremx( x, fpkloge2, fracx) ;
fpsubx( x, fracx, xdim) ;
fpdivx( fracx, fpkloge2, fracx) ;
fpdivx(  xdim, fpkloge2, aintx) ;
fpintx(aintx,aintx) ; (* Aintx gets integral part of x.  *)
expapprox(fracx,z) ; (* z gets 2^fracx - 1 *)
if fpcomx(aintx,fpk0) <> equal then
        begin (* 2^(i+f)-1 = 2^i(2^f-1 +1) -1 *)
        fpaddx(z,fpk1,z) ; (* z := 2^frac *)
        scalb(z,aintx,z) ;
        fpsubx(z,fpk1,z) ; (* z := 2^x -1 *)
        end ;
end (* expe1r *) ;

procedure expe1 (* x : fp_extended ; var z : fp_extended *) ; (* z := e^x-1 *)
var
fpcb : fp_blocktype ;
r : fp_extended ;
trapcoming : boolean ;

begin
blockprelude(fpcb) ; (* Save environment, clear exceptions and traps.  *)
case fpkindx(x) of
zero : begin
        r := x ;
        end ;

NonNormal, normal : begin
        expe1r(x,r) ;
        end ;

inf : case fpcomx(x,fpk0) of
        lesser : r := fpkm1 ;
        greater: r := x ; (* +Inf *)
        unord  : errornan(nanexp,r) ; (* Make NaN.  *)
        end (* case *) ;

nan : checknan(x,r) ;

end (* case *);
blockpostlude( fpcb, trapcoming) ;
if trapcoming then postmonadic( 'expe1',x,r) ;
z := r ;
end ;

procedure log1e ;
var
r : fp_extended ;
begin
log12(x,r) ;
if fpkindx(r) in [nonnormal, normal] then fpmulx(r,fpkloge2,z) else z := r ;
end ;

procedure sinhx   (* x : fp_extended ; var z : fp_extended *) ; 

var
fpcb : fp_blocktype ;
x2, r, r2 : fp_extended ;
trapcoming : boolean ;

begin (* sinhx *)
blockprelude(fpcb) ; (* Save environment, clear exceptions and traps.  *)

case fpkindx(x) of
zero : r := x ;
nonnormal, normal :
        begin
        expe(x,r2) ; (* r2 := exp(x). *)
        if getexponent(x) < 0 then
                begin (* force early cancellation *)
                fpscalex( x, +1, x2) ; (* x2 := 2x. *)
                fpnegx(x2, x2) ; (* x2 := -2x. *)
                expe1r(x2,r) ; (* r := exp(-2x)-1. *)
                fpnegx( r, r) ;
                fpmulx(r, r2, r) ;
                end   (* force early cancellation *)
                else
                begin (* cancellation doesn't matter *)
                fpdivx( fpk1, r2, r) ;
                fpsubx( r2, r, r) ; (* r := exp(x) - exp(-x). *)
                end   (* cancellation doesn't matter *) ;
        fpscalex(r, -1, r) ; (* Divide by two. *)
        end ;
inf  : if fpcomx( x, fpk0) = unord then errornan( nanexp, r) else r := x ;
nan  : checknan( x, r) ;
end (* case *) ;

blockpostlude( fpcb, trapcoming) ;
if trapcoming then postmonadic( 'sinhx',x,r) ;
z := r ;
end   (* sinhx *) ;

procedure coshx   (* x : fp_extended ; var z : fp_extended *) ; 

var
fpcb : fp_blocktype ;
r, r1 : fp_extended ;
trapcoming : boolean ;

begin (* coshx *)
blockprelude(fpcb) ; (* Save environment, clear exceptions and traps.  *)

case fpkindx(x) of
zero : r := fpk1 ;
nonnormal, normal :
        begin
        expe(x,r) ;
        fpdivx( fpk1, r, r1) ;
        fpaddx( r, r1, r) ;
        fpscalex( r, -1, r) ;
        end ;
inf  : fpabsx( x, r) ; (* Result is always +Infinity. *)
nan  : checknan( x, r) ;
end (* case *) ;

blockpostlude( fpcb, trapcoming) ;
if trapcoming then postmonadic( 'coshx',x,r) ;
z := r ;
end   (* coshx *) ;

procedure tanhx   (* x : fp_extended ; var z : fp_extended *) ; 

var
fpcb : fp_blocktype ;
x2, r, r2 : fp_extended ;
trapcoming : boolean ;

begin (* tanhx *)
blockprelude(fpcb) ; (* Save environment, clear exceptions and traps.  *)

case fpkindx(x) of
zero : r := x ;
nonnormal, normal :
        begin
        fpscalex(x, +1, x2) ; (* x2 := 2 * x. *)
        expe(x2,r2) ; (* r2 := exp(2x). *)
        if getexponent(x) < 0 then
                begin (* force early cancellation *)
                expe1r(x2,r) ; (* r := exp(2x)-1. *)
                end   (* force early cancellation *)
                else
                begin (* cancellation doesn't matter *)
                fpsubx( r2, fpk1, r) ; (* r := exp(2x)-1. *)
                end   (* cancellation doesn't matter *) ;
        fpaddx( r2, fpk1, r2) ; (* r2 := exp(2x)+1. *)
        fpdivx( r, r2, r) ;
        end ;
inf  : case fpcomx( x, fpk0) of
        lesser : r := fpkm1 ;
        greater: r := fpk1 ;
        unord  : errornan(nanexp,r) ;
        end (* case *) ;
nan  : checknan( x, r) ;
end (* case *) ;

blockpostlude( fpcb, trapcoming) ;
if trapcoming then postmonadic( 'tanhx',x,r) ;
z := r ;
end   (* tanhx *) ;

procedure xtoi (* x : fp_extended ; i : integer ; var z : fp_extended *) ;
        (* z := x^i
                        computed by repeated multiplication for small i
                        and by log and exp for large i.  *)

var
r, ax, y, p : fp_extended ;
fpcb : fp_blocktype ;
k : integer ;
trapcoming : boolean ;

begin
blockprelude(fpcb) ; (* Save old floating point environment and standardize.  *)
case fpkindx(x) of
zero : begin
        if i = 0 then r := fpk1 (* Kahan says 0.0^0=1.  *)
        else if i > 0 then r := fpk0
                else fpdivx( fpk1, fpk0, r ) ;
                        (* Bug Fix - 0**-1 didn't set DIV0 flag. *)
        if odd(i)  then copysign(x,r,r)   ;
                (* -0 to odd power gives -0 or -inf.  *)
        end (* zero *) ;

NonNormal, normal : begin
        if i=0 then r := fpk1 else
        if abs(i) < 256 then begin (* Exponentiate by multiplying.  *)
                xpwry( x, i, r )
                end
                else begin (* Large power - use log and exp. *)
                fpabsx(x,ax) ; (* Ax gets abs(x).  *)
                wmovex( i, y ) ;
                xexpy(ax, y, r ) ; (* r gets abs(x)^i. *)
                if odd(i)  then copysign(x,r,r) ;
                        (* Reverse sign if odd power of negative number.  *)
                end ;
        end (* NonNormal, normal *) ;

inf : begin
        if i = 0 then errornan(nanpower,r)
        else if i < 0 then r := fpk0
                else r := fpkinf ;
        if odd(i)  then copysign(x,r,r) ;
                (* -inf to odd power gives -0 or -inf.  *)
        end (* inf *) ;

nan : checknan(x,r) ;

end (* case x *) ;

blockpostlude(fpcb, trapcoming) ;
if trapcoming then
        begin
        wmovex(i,y) ; (* Have to set up "y" value in case of error.  *)
        postdyadic( 'xtoi',x,y,r) ;
        end ;
z := r ;
end (* xtoi *);

ÿ