{ Copyright 1983, Apple Computer Inc. }

(* File L:X80Trig2, Version 6 February 1983.  *)

procedure abs2x (* x, y : fp_extended ; var z : fp_extended *) ;
        (* z := sqrt(x^2+y^2) *)
var
fpcb : fp_blocktype ;
trapcoming : boolean ;
fpkx, fpky : fp_kindtype ;
r : fp_extended ;
mult : fp_extended ;
quo  : fp_register ;
ax, ay : fp_extended ;
incomplete : boolean ;

begin (* abs2x *)
blockprelude(fpcb) ; (* Save old floating point environment and standardize.  *)

fpkx := fpkindx(x) ; fpky := fpkindx(y) ;
if (fpkx = nan) or (fpky = nan) then choosenan(x,y,r)
else
if (fpkx = inf) or (fpky = inf) then r := fpkinf (* Result always +Inf. *)
else
        begin (* finite *)
        fpabsx( x, ax ) ; fpabsx( y, ay) ;
        incomplete := true ;
        case fpcomx(ax,ay) of
        equal :
                begin (* ax = ay *)
                fpaddx( ax, ay, mult ) ; 
                        (* This insures non-normalization will not be lost. *)
                xmovefp(fpksqrthalf) ;
                incomplete := false ;
                end   (* ax = ay *) ;
        lesser :
                begin (* ax < ay *)
                mult := ay ;
                xmovefp(ax) ;
                xmovefp1(ay) ;
                end   (* ax < ay *) ;
        greater :
                begin (* ax >= ay *)
                mult := ax ;
                xmovefp(ay) ;
                xmovefp1(ax) ;
                end   (* ax >= y *) ;
        end (* case *) ;
        if incomplete then
                begin
                fp%normalize( fpcb_.block.f[1] ) ; (* Divisor should be normalized. *)
                fpdiv ; (* FP0 gets min/max *)
                fpmove(quo) ;
                movefp1(quo) ;
                fpmul ; (* FP0 gets (min/max)^2 *)
                setxcpn( underfl, false ) ; (* Underflow here doesn't matter. *)
                wmovefp1(1) ;
                fpadd ;
                fpsqrt ; (* FP0 gets sqrt(1+(min/max)^2) *)
                end ;
        xmovefp1(mult) ;
        fpmul ;
        fpmovex(r) ;
        end   (* finite *) ;

blockpostlude(fpcb, trapcoming) ;
if trapcoming then postdyadic( 'abs2x',x,y,r) ;
z := r ;
end (* abs2x *);

procedure atan2x (* x, y : fp_extended ; var z : fp_extended *) ;
        (* z := x^y computed by logarithms and exponentiation.  *)
var
r, t : fp_extended ;
fpcb : fp_blocktype ;
trapcoming : boolean ;

begin (* atan2x *)
blockprelude(fpcb) ; (* Save old floating point environment and standardize.  *)

if (fpkindx(x) = nan) or (fpkindx(y) = nan) then choosenan(x,y,r)
else
        begin (* number *)
        xmovefp(x) ;
        fp%normalize(fpcb_.block.f[0]) ;
        xmovefp1(y) ;
        fp%normalize(fpcb_.block.f[1]) ;
        fpdiv ;         (* VALID routine legalizes result. *)
        fpmovex(t) ;
        if getxcpn( invop ) then
                begin (* 0/0 or Inf/Inf *)
                clrexcepset ;
                fpmulx( x, y, t) ; 
                copysign( t, fpk0, t ) ; (* t gets 0 with EXOR sign. *)
                end   (* 0/0 or Inf/Inf *) 
                else
                setxcpn( div0, false) ; (* Divide by zero is no error! *)
        fpabsx(t,t) ;
        atanapprox(t,r) ; (* r := abs(atan(x/y)) *)
        if fpminusx(y) then fpsubx( fpkpi, r, r) ;
        copysign( x, r, r) ;
        end   (* number *) ;

blockpostlude(fpcb, trapcoming) ;
if trapcoming then postdyadic( 'atan2x',x,y,r) ;
z := r ;
end (* atan2x *);


ÿ