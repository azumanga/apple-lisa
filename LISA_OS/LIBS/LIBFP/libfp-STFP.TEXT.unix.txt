        PAGE
        .proc  mc%STF  ; 0,0
;*************************************************************************
;
;       RESIDENT LINKING LOADER INFO
;
      .def    mc%stfp
      .ref    mc%stf_A,mc%stf_B,mc%stf_C,mc%stf_D
      .ref    mc%fix_D,mc%fix_A,mc%fix_B,mc%fix_C,mc%fix_E
      .ref    mc%bindec
      .ref    mc_calcea,mc%iop,mc%type
;
;
;************************************************************************
;
;  mc%stfp --  STORE FPN IN USER MEMORY.  (FMOVE  FPN,<EA>)
;
;       THE DESTINATION mc%type AND SIZE IS IN THE UNPACKED
;       INSTRUCTION BLOCK.
;
;  ON ENTRY:
;       A1      POINTS TO THE INSTRUCTION BLOCK
;       A2      POINTS TO FPN
;       A4      POINTS TO USER SUPPLIED FETCH/STORE ROUTINE
;       A5      USER REGISTERS
;       A3      POINTS TO FPRB
;
;  ON EXIT:
;       A0,A1   DESTROYED
;       DATA REGISTERS ARE DESTROYED
;       OTHER ADDRESS REGISTERS ARE RESTORED
;
;  ON ERROR EXIT:
;       A0,A1 DESTROYED
;       D0-D2 = NAN CREATED BY mc%iop
;       OTHER DATA REGISTERS DESTROYED
;       A2-A7 RESTORED.
;
;  REVISION HISTORY
;         DATE          REVISIONIST     REASON
;        7.MAY.81       G.WALKER        CHANGE DOCUMENTATION FOR mc%iop RETURNING
;                                           A NAN
;        7.JUL.81       D.CAWTHRON      CHANGED TO EXORMACS STRUCTURED
;                                           ASM SYNTAX
;       29.JUL.81       D.CAWTHRON      MOVED JFIX TABLE SO THAT BRA.S'S
;                                       WOULD NOT BE OUT OF RANGE WHEN PATH
;                                       COUNTERS ARE ADDED
;       21.SEP.81       D.CAWTHRON      SIGN EXTEND 'K' STATIC TO BYTE
;
;       14 Jan 83       Hough           Change branch tables to go to JMPs.
;       23 Jan 83       Hough           Change branch tables to contain JMPs.
;
;***********************  F L A G S   ******************************
;
;  THIS PROCEDURE CALLS: STFLOAT,mc%fix,mc%bindec,mc%iop,mc%type
;
;  THIS PROCEDURE IS CALLED BY: FRNT
;
;
;  EXCEPTION    SET BY     REASON
;
;  RSVX         ---        NOT AFFECTED BY THIS ROUTINE
;
;  IOVF         mc%fix        NUMBER WAS TOO BIG OR INFINITY
;
;  INEX         STFLOAT    RESULT CAN NOT BE EXACTLY REPRESENTED
;               mc%bindec     RESULT CAN NOT BE EXACTLY REPRESENTED
;               STFLOAT    OVERFLOW WITH TRAP DISABLED
;               mc%fix        NUMBER WAS NOT AN EEXACT INTEGER
;
;  DZ           ---        NOT AFFECTED BY THIS ROUTINE
;
;  UNFL         STFLOAT    NUMBER TOO SMALL FOR DESTINATION
;
;  OVFL         STFLOAT    NUMBER TOO BIG FOR DESTINATION
;
;  iop= 13      iop        ILLEGAL INSTRUCTION
;  iop= 13      STFLOAT    ILLEGAL INSTRUCTION
;  iop= 13      bindec     ILLEGAL INSTRUCTION
;  iop= 12      STFLOAT    INVALID RESULT
;  iop= 10      bindec     'K' OUT OF RANGE
;  iop= 3       fix        TRIED TO CONVERT A NAN TO A BINARY INTEGER
;
;*********************************************************************
;
;
;*************************
;
;  TAG TO INDEX CONVERSION TABLE. IF TAG FIELD IS INVALID (NO BITS
;  SET OR MORE THAN ONE BIT SET) THEN A -1 IS RETURNED AS THE INDEX.
;
;*************************
;
TYPETAB EQU *
        .byte   $FF,0,4,$FF,8,$FF,$FF,$FF     ; 0-7
        .byte   12,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 8-15
        .byte   16,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 16-23
        .byte   $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 24-31
;
;*******************************
;
; TABLES OF OFFSETS FROM THE TABLE START TO THE DESIRED STORE
; FUNCTION (mc%fix OR mc%bindec) FOR THE VARIOUS TYPES OF FPN.
; THESE TABLES ARE INDEXED BY THE mc%type OF FPN
;
;*******************************
;
;*************************************************************************
;
; JUMP TABLE FOR STFLOAT (STORE TO FP DESTINATION)
;
JSTFLT EQU *
    jmp   mc%stf_A        ; NORMALIZED
    jmp   mc%stf_B        ; ZERO
    jmp   mc%stf_C        ; INFINITY
    jmp   mc%stf_D        ; NAN
    jmp   mc%stf_A        ; NOT NORMALIZED
;
;
;       BEGIN
;
;
mc%stfp EQU *
        debugbegin
  MOVEM.L  (A2),D0-D2         ; GET FPN
  MOVEQ    #0,D3
  MOVEQ    #0,D7              ; CLEAR D7
  MOVE.B   DATYP(A1),D7       ; GET DESTINATION DATA mc%type INDEX
;
;  D7 NOW CONTAINS:
;       0       SINGLE FLOATING POINT
;       1       DOUBLE FLOATING POINT
;       2       EXTENDED FLOATING POINT
;       3       BYTE INTEGER
;       4       WORD INTEGER
;       5       LONG WORD INTEGER
;       6       BCD WITH K STATIC
;       7       BCD WITH K DYNAMIC
;
;**********
;
;  CONVERT A FLOATING POINT TAG FIELD INTO AN INDEX
;
;  IF THE TAG FIELD IS INVALID, THEN PROCEDURE 'mc%type' WILL BE
;  CALLED TO SET THE TAGS BASED UPON THE NUMBER.
;
type_ndx EQU *
  MOVE.L D0,D4            ; PUT TAG LONG WORD IN D4
  SWAP   D4               ; TAGS TO LS WORD
  AND    #$1F,D4          ; AND OUT TAGS
  MOVE.B TYPETAB(D4),D4   ; GET INDEX
  bpl    @1                 ; IF INDEX IS MINUS THEN THE TAGS WERE INVALID
    jsr  mc%type               ; THEN GO mc%type IT
    BRA.S  type_ndx         ; GO TRY AGAIN
@1
;
;  D4 NOW CONTAINS:
;       0       NORMALIZED FP NUMBER
;       2       NORMAL ZERO
;       4       + OR - INFINITY
;       6       NAN
;       8       NOT NORMALIZED
;
  cmp    #3,d7
  bge    not_fp                 ; IF DESTINATION IS A FP NUMBER
    LSL  #1,D7                  ; DOUBLE THE INDEX
    Jmp  JSTFLT(D4)             ; GO TO STFLOAT

not_fp                          ; ELSE {NOT FP}
    cmp     #6,d7
    bge     get_k                  ; IF DESTINATION IS AN INTEGER
       SUB  #3,D7                  ; CONVERT INDEX TO: 0=BYTE,
       LSL  #1,D7                  ; 2=WORD, 4=LONG WORD
       JSR  JFIX(D4)                  ; GO TO mc%fix
       BRA  CNTNU
;
; TABLE FOR mc%fix (STORE TO BINARY INTEGER)
;
JFIX  EQU *
    jmp   mc%fix_D            ; NORMALIZED
    jmp   mc%fix_C            ; ZERO
    jmp   mc%fix_A            ; INFINITY
    jmp   mc%fix_B            ; NAN
    jmp   mc%fix_E            ; NOT NORMALIZED
;
;       STORE THE RESULT OF THE FIXED VALUE IN D1
;
CNTNU  SUBQ  #2,D7
;
;       D7 NOW CONTAINS:
;           -2      BYTE
;            0      WORD
;            2      LONG WORD
;
       bmi        @3              ; IF WORD OR LONG WORD
         bne      @2              ; IF WORD
           MOVE   D1,-(A7)        ; PUSH WORD ON STACK
           STRSLT 2,ST_EXIT
           bra    @29
@2                                ; ELSE LONG WORD
           MOVE.L D1,-(A7)        ; PUSH LONG WORD ON STACK
           STRSLT 4,ST_EXIT
@29
       bra        @39             ; ELSE BYTE
@3
         MOVE.B  D1,-(A7)
         STRSLT  1,ST_EXIT
@39
         bra     st_exit
;
;
;   DESTINATION IS A DECIMAL STRING.
;
;
get_k                             ; ELSE
      asr       #1,d4           ; Adjust type index to bindec expectations.
      MOVEQ #0,D5                 ; GET K OR THE REGISTER
      MOVE.B SPECL(A1),D5         ; CONTAINING K IF K IS DYNAMIC
      ASL.B #2,D5                 ; SIGN EXTEND 'K' STATIC TO BYTE -
      ASR.B #2,D5                   ; IF 'K' DYNAMIC THIS WON'T HURT
      cmp       #7,d7             ; IF K IS DYNAMIC
      bne       @5
        cmp     #7,d5
        ble     @4                ; IF THE REGISTER IS OUT OF RANGE
          MOVE  #13,D0                ; mc%iop = 13
          jmp   mc%iop               ; DON'T RETURN A RESULT
        bra     @5                    ; ELSE
@4
          LSL  #2,D5                  ; REGISTER IS OKAY. MULT IT BY 4
          MOVE.B 3(A5,D5),D5          ; LOAD K FROM SAVED USER REGISTERS
@5
      MOVE D5,D7                  ; PUT K IN D7 FOR CALL
      jmp  mc%bindec                 ; CALL mc%bindec
ST_EXIT EQU *                 ; ADIOS
  RTS
        debugend 'MC%STFP',1

ÿ