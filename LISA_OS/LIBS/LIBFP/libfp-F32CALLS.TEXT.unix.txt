{ Copyright 1983, Apple Computer Inc. }

(* File L:F32Calls, Version 6 February 1983. 

        Contains the routines called by the Pascal Compiler's implementation of
        Real Arithmetic. *)

function f32_pwrten ;

var
x, x1 : x48 ;

begin (* f32_pwrten *)
{$ifc not fp_compiler }
if abs(n) > 127 then if n > 0 then n := 127 else n := -127 ;
x%pot( abs(n), x) ;
if n < 0 then
        begin
        x%pot( 0, x1) ; (* x1 := 1 *)
        x%div( x1, x, x ) ;
        end ;
f32_pwrten := x%tos(x) ;
{$endc }
end   (* f32_pwrten *) ;

        (* Elementary Functions for Pascal Real Arithmetic that require
                Extended Precision Arithmetic.  *)
        
function f32_exp ;
var y, z : fp_extended ;

begin (* f32_exp *)
{$ifc not fp_compiler }
smovex( x, y ) ;
expe ( y, z ) ;
f32_exp := xmoves( z ) ;
{$endc }
end   (* f32_exp *) ;

function f32_ln ;
var y, z : fp_extended ;

begin (* f32_ln *)
{$ifc not fp_compiler }
smovex( x, y ) ;
loge ( y, z ) ;
f32_ln := xmoves( z ) ;
{$endc }
end   (* f32_ln *) ;

function f32_sin ;
var y, z : fp_extended ;

begin (* f32_sin *)
{$ifc not fp_compiler }
smovex( x, y ) ;
sinx ( y, z ) ;
f32_sin := xmoves( z ) ;
{$endc }
end (* f32_sin *) ;

function f32_cos ;
var y, z : fp_extended ;

begin (* f32_cos *)
{$ifc not fp_compiler }
smovex( x, y ) ;
cosx ( y, z ) ;
f32_cos := xmoves( z ) ;
{$endc }
end   (* f32_cos *) ;

function f32_atan ;
var y, z : fp_extended ;

begin (* f32_atan *)
{$ifc not fp_compiler }
smovex( x, y ) ;
atan ( y, z ) ;
f32_atan := xmoves( z ) ;
{$endc }
end   (* f32_atan *) ;

        (* f32_trap is called by Pascal Real Arithmetic routines. *)
        
procedure f32_trap ;
        (* Performs trapping for 32 bit Pascal Real Arithmetic operations. *)
var
r : fp_traprecord ;
        
begin (* f32_trap *) 
{$ifc not fp_compiler }
with r do 
        begin (* with *)
        header := 32 ;
        gettexcepset ( es ); (* Get exceptions from this operation. *)
        procname := nil         ;
        optype1 := tfp_real ;
        optype2 := tfp_real ;
        resulttype := tfp_real ;
        op1 := nil ; op2 := nil ; result := nil ;
        end   (* with *) ;
checktrap(r) ;
{$endc }
end   (* f32_trap *) ;
        

ÿ