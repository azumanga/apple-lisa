(* Copyright 1983, Apple Computer Inc. *)

(* File L:Fpmodes2, Version 2 February 1983. *)

function getbite2 ( b : bite ) : byt  ;
begin
if b >= 0 then getbite2 := b else getbite2 := b + 256 ;
end   ;

function setbite2 ( b : byt ) : bite   ;
begin
if b < 128 then setbite2 := b else setbite2 := b - 256 ;
end   ;

function btst ( i : integer ; n : integer ) : boolean ;
        (* Returns value of bit n of i.  *)
var
r : equivalence ;

begin
r.ri := i ;
if n<=7 then btst := r.rb[1,n] else btst := r.rb[0,n-8] ;
end   ;

procedure bclr ( var i : integer ; n : integer )  ;
        (* Clears  bit n of i.  *)
var
r : equivalence ;

begin
r.ri := i ;
if n <= 7 then r.rb[1,n] := false else r.rb[0,n-8] := false  ;
i := r.ri ;
end   ;

procedure bset ( var i : integer ; n : integer ; b : boolean )  ;
        (* Sets value  of bit n of i, to b.  *)
var
r : equivalence ;

begin
r.ri := i ;
if n <= 7 then r.rb[1,n] := b else r.rb[0,n-8] := b ;
i := r.ri ;
end   ;

procedure setround (* x : rmode *) ;
var i,k : integer ;
begin
k := getbite2(fpcb_.block.status.mode) ;
case x of 
rnear : begin
        bclr(k,0) ;
        bclr(k,1) ;
        end   ;
rpos : begin
        bclr(k,0) ;
        bset(k,1, true) ;
        end   ;
rneg : begin
        bset(k,0,true ) ; bset(k,1,true) ;
        end   ;
rzero : begin
        bset(k,0,true) ;
        bclr(k,1) ;
        end   ;
end   ;
fpcb_.block.status.mode := setbite2(k) ;
end   ;

function getround (*: rmode*) ;
var k : integer ;
begin 
k := getbite2(fpcb_.block.status.mode) ;
case (  2 * ord( btst(k,1) ) + ord ( btst(k,0) ) )   of
0 : getround := rnear ;
1 : getround := rzero ;
2 : getround := rpos ;
3 : getround := rneg ;
end   ;
end   ;


ÿ