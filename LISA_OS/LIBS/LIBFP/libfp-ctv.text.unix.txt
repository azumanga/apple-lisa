(* File L:CTV, Version 21 October 1983. *)

const

maxf32lisa = 6 ;(* Maximum number of output significant digits for f32 Lisa. *)
maxf32k  =  9 ; (* Maximum number of output digits in f32 code. *)
maxlisa  = 14 ; (* Maximum number of output significant digits for Lisa format. *)
maxek    = 18 ; (* Maximum number of output significant digits for Motorola E format. *)
fpbuffer = 19 ; (* Maximum number of digits for Motorola buffer. *)
maxfk    = decstrlen ; 
        (* Maximum number of digits after point for Motorola F format. *)
maxink = fpbuffer ;
        (* Maximum number of characters Motorola input routine can handle. *)

        (* Character constants for file input. *)

backspace = 8 ; (* Control-H to cancel last character. *)
carriagereturn = 13 ;
cancel = 24 ; (* Control-X to cancel current input token. *)
rubout = 127 ;(* Rubout to signal abort for tokenscan. *)

fpioresult = 6101 ; (* IORESULT code for floating point read. *)

        (* F32 Constants *)

inerrstring = '11' ; (* ASCII input syntax error.  *)

nonnormal = denormal ;
inf = infinite ;
nan = qnan ;
invop = invalid ; underfl = underflow ; overfl = overflow ; 
div0 = divbyzero ; inxact = inexact ;

greater = gt ; lesser = lt ; equal = eq ;

        (* Column indices of QR factorization. *)
        
pivotindex =   -1 ;     (* Word 0 contains pivot index. *)
reducednorm =  0 ; (* Really norm squared. *)

type

            Nibble = 0..15;
            
fp_blocktype = integer ;
fp_string = decstr ;
fp_extended = extended ;
fp_kindtype = numclass ;

scannednumber = record              (* Intermediate form of scanned text input. *)
        
        (* Subsequent fields always defined. *)
        error : boolean ;           (* False if input was a valid number token,
                                       true if not. 
                                       If true, other fields are undefined.
                                       If false, kind and sign are always defined. *)
        
        (* Subsequent fields are only defined when error = false. *)
        kind : numclass ;           (* Nan for nan, Inf for inf, Normal otherwise. *)
        sign : boolean ;            (* False for positive, true for negative. *)
        
        (* Subsequent fields are only defined when kind = normal or nan. *)
        significand : decstr    ;   (* If kind is normal, contains significant digits.
                                       If kind is nan, contains quoted string. *)
        moresignificand : boolean ; (* True if significant trailing part of 
                                        significand had to be discarded. *)
        
        (* Subsequent fields are only defined when kind = normal. *)
        (* If kind is normal, value of number is 
           sign * (significand+more) * 10^(implicit + esign * (exponent+more). *)
        implicit : integer ;        (* Implicit exponent. *)
        esign : boolean ;           (* False for positive, true for negative
                                        exponent sign. *)
        exponent : decstr    ;      (* Significant exponent digits. *)
        moreexponent : boolean ;    (* True if trailing part of exponent had to be 
                                        discarded. *)
        end ;
        
fourbite = packed array [0..3] of fp_byte ;
eightbite = packed array [0..7] of fp_byte ;

VAR

fpcb : environ ;

qr00, qrifactor, qrjfactor : longint ;
qrij : extended ;

junk : array [1:900] of integer ;

ÿ