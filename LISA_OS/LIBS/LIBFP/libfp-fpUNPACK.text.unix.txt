;-----------------------------------------------------------
; 03JUL82: WRITTEN BY JEROME COONEN
; 10AUG82: MINOR CLEANUPS (JTC)
; 18JAN83: FORCE COMP NAN CODE ON UNPACK OF COMP64.
; 29APR83: CLASS OPERATION NEEDS TO KNOW WHEN DENORM IS
;       UNPACKED.  USE HI BIT OF HI WORD OF D3, THE REG
;       HOLDING THE OPERAND TYPE INFO. (JTC)
; 09JUN83: USE A3 FOR ADRS, RATHER THAN A5 (JTC).
; 01NOV83: ALL NANS UNPACKED THE SAME; INVALID SET FOR SIGNALING (JTC).
;
; ASSUME REGISTER MASK: POST-DECODE, WITH DIRTY INDEX IN D0.
; UNPACK DST, SRC IN TURN, IF INPUT, AND SET UP D2 WITH
;       NAN INFORMATION, D3 WITH NUMBER INFORMATION.
;
;       D2:  2 --> LATTER OPERAND IS NAN
;            4 --> FIRST OF TWO OPERANDS IS NAN
;            6 --> BOTH NANS
;
;       D3:  0 --> BOTH ARE NUMS
;            2 --> FORMER IS NUM, LATTER IS 0
;            4 --> FORMER IS NUM, LATTER IS INF
;            6 --> FORMER IS 0,   LATTER IS NUM
;            8 --> BOTH ARE 0
;           10 --> FORMER IS 0,   LATTER IS INF
;           12 --> FORMER IS INF, LATTER IS NUM
;           14 --> FORMER IS INF, LATTER IS 0
;           16 --> BOTH ARE INF
;
; INPUT OPERAND ADDRESS IN A3.
; UNPACK LEAVES SIGN IN HIGH BIT OF D6 BYTE, EXP IN A4, AND
; DIGITS IN D4,5.  SINCE INPUT INTEGERS ARE ALWAYS CONVERTED
; TO EXTENDED, LOAD AND NORMALIZE THEM.
; UNPACKING IS DONE IN TWO STAGES; FIRST, UNPACK AS ABOVE
; BUT LEAVE A WORD EXP IN D0; SECOND, SET THE CONTROL BITS
; FOR SPECIAL CASES AND MOVE THE EXP TO A4.
; THE ADDRESS IN A3 IS UNCHANGED, IN CASE IT'S NEEDED FOR
; OUTPUT.
;-----------------------------------------------------------

;-----------------------------------------------------------
; UNPACK-TOP MILESTONE +++++++++++++++++++++++++++++++++++ .
;-----------------------------------------------------------

UNPACK:
;-----------------------------------------------------------
; HANDY TO KILL SIGNIFICANT BITS AT OUTSET; ALREADY ROOM FOR
; SIGN.
;-----------------------------------------------------------
        CLR.L   D4              ; HANDY TO KILL BITS HERE
        MOVE.L  D4,D5

        ANDI.W  #$000E,D0       ; KILL EXTRANEOUS BITS

        .IF PCOK
        MOVE.W  UNPCASE(PC,D0),D0
        JMP     UNPACK(PC,D0)
        .ELSE
        MOVE.W  UNPCASE(D0),D0
        JMP     UNPACK(D0)
        .ENDC

UNPCASE:
        .WORD   UNPEXT - UNPACK         ; EXTENDED
        .WORD   UNPDBL - UNPACK         ; DOUBLE
        .WORD   UNPSGL - UNPACK         ; SINGLE
        .WORD   UNPEXT - UNPACK         ; --- ILLEGAL
        .WORD   UNPI16 - UNPACK         ; INT16
        .WORD   UNPI32 - UNPACK         ; INT32
        .WORD   UNPC64 - UNPACK         ; COMP64


;-----------------------------------------------------------
; INT16 HAS SPECIAL CASE 0, ELSE NORMALIZE AND GO.
;-----------------------------------------------------------
UNPI16:
        MOVEQ   #15,D0          ; SET EXP FOR INTEGER
        MOVE.W  (A3),D4         ; GET OPERAND
        SWAP    D4              ; LEFT ALIGN
        BRA.S   UNPIGEN

;-----------------------------------------------------------
; INT32 HAS SPECIAL CASE 0, ELSE NORMALIZE AND GO.
;-----------------------------------------------------------
UNPI32:
        MOVEQ   #31,D0          ; SET EXP FOR INTEGER
        MOVE.L  (A3),D4         ; GET OPERAND
        BRA.S   UNPIGEN

;-----------------------------------------------------------
; COMP64 HAS SPECIAL CASES 0 AND INF, ELSE NORMALIZE AND GO.
;-----------------------------------------------------------
UNPC64:
        MOVEQ   #63,D0          ; SET EXP FOR INTEGER
        MOVE.L  (A3),D4         ; GET HI OPERAND
        MOVE.L  4(A3),D5        ; GET LO OPERAND
        BEQ.S   @7              ; HAVE REGULAR NUMBER

        TST.L   D4
        BRA.S   UNPCGEN
@7:
        CMPI.L  #$80000000,D4   ; IS IT NAN?
        BNE.S   UNPIGEN         ; IF NOT, MAY BE 0

        MOVEA.W #$7FFF,A4       ; SET THE EXPONENT
        MOVEQ   #nancomp,d4     ; SET TO COMP NAN
        SWAP    D4              ; ALIGN BYTE
        BRA.S   UNPNAN          ; AND GO...

UNPIGEN:
        TST.L   D4
        BEQ.S   UNP0            ; 0 IS SPECIAL CASE
UNPCGEN:
        BPL.S   @9

        BSET    #7,D6           ; SET MINUS SIGN
        NEG.L   D5
        NEGX.L  D4
@9:
        ADDI.W  #$3FFF,D0       ; BIAS EXPONENT
        TST.L   D4
        BMI.S   UNPNRM
        BRA.S   UNPUNR


;-----------------------------------------------------------
; UNPACK AN EXTENDED: JUST SEPARATE THE SIGN AND LOOK FOR
; CASES.  NOTE THAT THIS CASE MAY FALL THROUGH TO UNPZUN.
;-----------------------------------------------------------
UNPEXT:
        MOVE.W  (A3),D0         ; SIGN AND EXP
        BPL.S   @13

        BSET    #7,D6           ; SET SIGN
        BCLR    #15,D0          ; CLEAR OPERAND SIGN
@13:
        MOVE.L  2(A3),D4        ; LEAD SIG BITS
        MOVE.L  6(A3),D5

        CMPI.W  #$7FFF,D0       ; MAX EXP?
        BEQ.S   UNPNIN

        TST.L   D4              ; LOOK AT LEAD BITS
        BMI.S   UNPNRM          ; NORMALIZED CASE
                                ; BPL.S FALLS THROUGH

;-----------------------------------------------------------
; HERE DISTINGUISH SPECIAL CASES AND SET BITS IN D2,D3.
;-----------------------------------------------------------
UNPZUN:
        TST.L   D4              ; LEAD DIGS = 0?
        BNE.S   UNPUNR
        TST.L   D5
        BNE.S   UNPUNR
UNP0:
        SUBA.L  A4,A4           ; EXP <- 0
        ADDQ.W  #2,D3           ; MARK AS ZERO
        RTS

;-----------------------------------------------------------
; HI BIT OF D3 USED TO MARK UNNORMAL OPERAND.  WHEN USED AS
; A JUMP TABLE INDEX, D3 IS ACCESSED AS A WORD.
;-----------------------------------------------------------
UNPUNR:
        BSET    #31,D3          ; SPECIAL UNNORM FLAG
@1:
        SUBQ.W  #1,D0           ; DECREMENT EXP
        ADD.L   D5,D5
        ADDX.L  D4,D4
        BPL.S   @1

UNPNRM:
        EXT.L   D0
        MOVEA.L D0,A4           ; 32-BIT EXP
        RTS
UNPNIN:
        MOVEA.W #$7FFF,A4       ; MAX EXP
        BCLR    #31,D4          ; IGNORE INT BIT
        TST.L   D4
        BNE.S   UNPNAN
        TST.L   D5
        BNE.S   UNPNAN

        ADDQ.W  #4,D3           ; MARK INF
        RTS
;-----------------------------------------------------------
; CLEAR THE SIGNALING BIT (#30).  IF IT WAS SET THEN SIGNAL
; INVALID.
;-----------------------------------------------------------
UNPNAN:
        BCLR    #30,D4          ; TEST IT, TOO
        BEQ.S   @1
        BSET    #ERRI+8,D6
@1
        ADDQ.W  #2,D2           ; JUST A NAN
        RTS



;-----------------------------------------------------------
; UNPACK A SINGLE.  NOTE THAT DENORMS ARE UNPACKED WITHOUT
; THE LEADING BIT, SO EXPONENT MUST BE ADJUSTED.
;-----------------------------------------------------------
UNPSGL:
        CLR.L   D0              ; SET UP EXP

        MOVE.L  (A3),D4         ; GET NUMBER
        ADD.B   D6,D6           ; UN-ALIGN SIGN WORD
        ADD.L   D4,D4           ; SHIFT SIGN OUT OF NUM...
        ROXR.B  #1,D6           ; AND INTO SIGN BYTE
        ROL.L   #8,D4           ; ALIGN EXPONENT
        MOVE.B  D4,D0           ; ISOLATE EXPONENT
        BEQ.S   @21             ; HAVE 0 OR DENORM

        MOVE.B  #1,D4           ; CLEAR EXP BITS, THEN
        ROR.L   #1,D4           ; PLACE LEADING BIT
        CMPI.B  #$0FF,D0        ; MAX EXP?
        BEQ.S   UNPNIN

        ADDI.W  #$3F80,D0       ; IT'S NORMALIZED
        BRA.S   UNPNRM
@21:
        MOVE.W  #$3F81,D0       ; ASSUME DENORMALIZED
        ROR.L   #1,D4           ; ALIGN BITS
        BRA.S   UNPZUN          ; AND GO TEST



;-----------------------------------------------------------
; UNPACKING A DOUBLE IS LIKE A SINGLE, BUT HARDER BECAUSE
; OF THE SHIFT REQUIRED FOR ALIGNMENT.
;-----------------------------------------------------------
UNPDBL:
        MOVE.L  (A3),D4         ; HI BITS
        BPL.S   @25

        BSET    #7,D6           ; SET SIGN
@25:
        MOVE.L  4(A3),D5        ; LO BITS

;-----------------------------------------------------------
; DOUBLE OPERANDS APPEAR AS:  (1) (11) (1 IMPLICIT) (53)
; SO MUST ALIGN BITS LEFT BY 11 AND INSERT LEAD BIT.
; FASTEST BY ROTATE AND MASK.
;-----------------------------------------------------------
        ROL.L   #8,D5           ; MUST ALIGN BY 11 BITS
        ROL.L   #3,D5

        ROL.L   #8,D4           ; ALIGN EXP AND LEAD DIGS
        ROL.L   #4,D4           ; BY 12 TO GET EXP RIGHT
        MOVE.W  D4,D0           ; SAVE EXP, WITH EXTRA BITS

        LSR.L   #1,D4           ; MAKE WAY FOR LEAD BIT
        ANDI.W  #$0F800,D4      ; CLEAR LO 11 BITS
        MOVE.W  D5,D1
        ANDI.W  #$07FF,D1       ; GET REPLACEMENTS
        OR.W    D1,D4
        ANDI.W  #$0F800,D5      ; CLEAR MOVED BITS

        ANDI.W  #$07FF,D0       ; ISOLATE EXP
        BNE.S   @31

        MOVE.W  #$3C01,D0
        BRA.S   UNPZUN          ; ZERO OR DENORMALIZED
@31:
        CMPI.W  #$07FF,D0       ; MAX EXP?
        BEQ.S   UNPNIN

        BSET    #31,D4          ; SET LEAD BIT
        ADDI.W  #$3C00,D0       ; CORRECT EXP BIAS
        BRA.S   UNPNRM

ÿ