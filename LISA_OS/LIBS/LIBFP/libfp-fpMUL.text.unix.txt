;-----------------------------------------------------------
; 07JUL82: WRITTEN BY JEROME COONEN
; 12AUG82: MULU32 ROUTINE TIGHTENED.
; 09JUN83: DON'T USE A5 AS TEMP CELL.
;
;-----------------------------------------------------------

MULTOP:
        ROL.B   #2,D6           ; GET XOR SIGNS
        MOVEQ   #nanmul,D0      ; ASSUME THE WORST

        .IF PCOK
        MOVE.W  MULCASE(PC,D3),D3
        JMP     MULTOP(PC,D3)
        .ELSE
        MOVE.W  MULCASE(D3),D3
        JMP     MULTOP(D3)
        .ENDC
MULCASE:                                ; DST * SRC
        .WORD   MULNUM    - MULTOP      ; NUM * NUM
        .WORD   RSRC      - MULTOP      ; NUM * 0
        .WORD   RSRC      - MULTOP      ; NUM * INF

        .WORD   RDST      - MULTOP      ;   0 * NUM
        .WORD   RSRC      - MULTOP      ;   0 * 0
        .WORD   INVALIDOP - MULTOP      ;   0 * INF

        .WORD   RDST      - MULTOP      ; INF * NUM
        .WORD   INVALIDOP - MULTOP      ; INF * 0
        .WORD   RSRC      - MULTOP      ; INF * INF



MULNUM:
;-----------------------------------------------------------
; HAVE: X.XXXXX * Y.YYYYYY --> ZZ.ZZZZZZZ BEFORE
; NORMALIZATION AND COERCION.  SO SUBTRACT (BIAS-1) TO
; ACCOUNT FOR BINARY POINT ONE BIT TO RIGHT.  FOR EXAMPLE,
; 1 * 1 COMES OUT:  2^1 * 0.10000000... WHICH IN TURN
; IS NORAMALIZED TO  2^0 * 1.000000...
;-----------------------------------------------------------
        ADDA.L  A3,A4           ; ADD EXP'S
        SUBA.W  #$3FFE,A4       ; SUBTRACT (BIAS - 1)

;-----------------------------------------------------------
; MULTIPLY IS A REGISTER HOG, BECAUSE OF THE FINAGLING
; NEEDED TO GET A FULL 32*32 MULTIPLY (SHAME ON MOTOROLA).
; SAVE D6 AND A0 ON THE STACK TO FREE THE SPACE.
;
; 64*64 MULTIPLY IS ACCOMPLISHED IN 4 32*32 PRODUCTS.
; SPECIAL PROVISION IS MADE FOR THE TWO SPECIAL CASES:
; BOTH OPERANDS HAVE 32 TRAILING 0'S, SRC OPERAND HAS
; 32 TRAILING 0'S.
;
; THE BASIC REGISTER MASK THROUGHOUT: IS
;       A0: CARRY PROPAGATE FOR 64-BIT CROSS PRODUCTS
;       A1,A2: DST BITS
;       A3,(SP): SRC BITS
;       A4: RESULT EXPONENT
;       D0,D1: USED TO PASS OPERANDS TO 32*32 MULT
;       D2,3,6: JUNK
;       D4,5,7: 64 PRODUCT AND ROUND BITS
;-----------------------------------------------------------

        MOVEM.L D5-D6/A0,-(SP)  ; SAVE TWO REGS AND SRC.LO
        MOVEA.L D4,A3           ; PLACE SRC.HI BITS

        CLR.L   D4              ; CLEAR ALL BITS
        MOVE.L  D4,D5
        MOVEA.L D4,A0

        MOVE.L  (SP),D1         ; SRC LOW BITS
        BNE.S   SRC64           ; GO TO IT IF WIDE
        MOVE.L  A2,D0           ; DST LOW BITS
        BEQ.S   BOTH32          ; JUST 32*32 PRODUCT
        BRA.S   SRC32           ; 64*32
SRC64:
        MOVE.L  A2,D0           ; DST LOW BITS
        BSR.S   MULU32
        TST.L   D5              ; RIGHT ALIGN LOW PROD
        SNE     D7              ; STICKIES
        MOVE.L  D4,D5
        CLR.L   D4

        MOVE.L  (SP),D1         ; SRC LOW BITS
        MOVE.L  A1,D0           ; DST HI BITS
        BSR.S   MULU32
SRC32:
        MOVE.L  A3,D1           ; SRC HI BITS
        MOVE.L  A2,D0           ; DST LO BITS
        BSR.S   MULU32

        TST.W   D5              ; MORE STICKIES
        SNE     D0
        OR.B    D0,D7           ; ON TOP OF EARLIER
        SWAP    D5
        OR.W    D5,D7
        MOVE.L  D4,D5
        MOVE.L  A0,D4
BOTH32:
        MOVE.L  A3,D1           ; SRC HI
        MOVE.L  A1,D0           ; DST HI
        BSR.S   MULU32

        MOVEM.L (SP)+,D0/D6/A0  ; RESTORE REGS D6,A0; D0 JUNK

        BRA     NORMCOERCE


;-----------------------------------------------------------
; 32 BY 32 MULTIPLY AND ADD INTO D4,D5 WITH CARRY TO A0.
; D0,D1 ARE INPUT OPERANDS, D2,D3,D6 ARE SCRATCH.
; EASIEST TO VIEW PRODUCT AS D0=AB, D1=XY SO THAT:
;                       A  B
;                     * X  Y
;                     ------
;                       B--Y
;                     A--Y
;                     B--X
;                 + A--X
;               ------------
;                   ????????
;-----------------------------------------------------------
MULU32:
        MOVE.W  D1,D2   ; Y
        MOVE.W  D1,D3   ; Y
        MULU    D0,D2   ; D2 = B--Y
        MOVE.W  D0,D6   ; B
        SWAP    D0      ; A
        SWAP    D1      ; X
        MULU    D1,D6   ; D6 = B--X
        MULU    D0,D3   ; D3 = A--Y
        MULU    D0,D1   ; D1 = A--X

;-----------------------------------------------------------
; STRATEGY: COMPUTE 64-BIT PRODUCT INTO D1,D2.  THE CROSS
; TERMS INVOLVE SUMS OF THREE 16-BIT QUANTITIES, SO MUST BE
; CAREFUL OF CARRIES.
;
; FIRST ADD (B--Y).HI INTO (A--Y).  SINCE THE LATTER CAN
; BE AT MOST $FFFE0001, THERE CANNOT BE A CARRY FROM THE
; HIGHEST BIT.
;-----------------------------------------------------------
        SWAP    D2      ; RIGHT ALIGN (B--Y).HI
        CLR.L   D0
        MOVE.W  D2,D0   ; (B--Y).HI PADDED LEFT WITH 0'S
        ADD.L   D0,D3   ; CANNOT CARRY OUT OF (A--Y)

;-----------------------------------------------------------
; NOW ADD THE OTHER 32-BIT CROSS-TERM, (B--X), INTO D3 AND
; ALIGN LO HALF OF SUM INTO D2.  THE CARRY IS RECORDED, AND
; KEPT, IN THE CCR X BIT.
;-----------------------------------------------------------
        ADD.L   D6,D3   ; (A--Y) + (B--X) + (B--Y).HI
        MOVE.W  D3,D2
        SWAP    D2      ; LO ORDER 32 BITS OF PRODUCT

;-----------------------------------------------------------
; NOW REPLACE THE LOW HALF OF THE ABOVE SUM WITH THE CARRY
; BIT, REALIGN, AND ADD INTO (A--X) FOR HI 32 BITS OF PROD.
;-----------------------------------------------------------
        CLR.W   D3
        ADDX.W  D3,D3   ; X BIT FROM "ADD.L  D6,D3" ABOVE
        SWAP    D3
        ADD.L   D3,D1   ; HI 32 BITS OF PRODUCT

;-----------------------------------------------------------
; ACCUMULATE PRODUCT INTO D4,D5 WITH CARRY IN A0.
;-----------------------------------------------------------
        ADD.L   D2,D5
        ADDX.L  D1,D4
        BCC.S   @1
        ADDQ.W  #1,A0
@1:
        RTS

ÿ