{ Copyright 1983, Apple Computer Inc. }

{ File LibFP/RealOut, Version 19 December 1983. }

procedure fp%strange ( x : real ; width : integer ; var s : decstr ) ;
        (* Takes NaN or Inf input and returns string s based upon width. *)

var
decf : decform ;

begin (* fp%strange *)
decf.style := floatdecimal ;
decf.digits := 13 ;
s2str( decf, x, s ) ;
end   (* fp%strange *) ;

procedure fp%output ( var f : text ; width : integer ; var s : decstr ) ;
var i : integer ;
begin (* fp%output *)
if (s[1] <> ' ') and (s[1] <> '-') then
        begin (* force leading blank for positive *)
        write(f,' ') ;
        width := width - 1 ;
        end   (* force leading blank for positive *) ;
for i := 1 to width-length(s) do write(f,' ') ;
write(f,s) ;
end   (* fp%output *) ;

procedure %w_e (* var f: text; x: real; width: integer *);
var
after : integer ; error : boolean ; s : decstr ;
w, i, ls, sgn, cd : integer ;
decr : decimal ;
decf : decform ;

begin
w := width ; (* w will be calling width. *)
if w <= 7 then w := 6 else if w > decstrlen then w := decstrlen ;
if w  < 7 then after := 0 else after := w - 7 ;

case classs( x, sgn ) of
zero : 
        begin (* zero *)
        if sgn = 0 then s := '0' else s := '-0' ;
        ls := length(s) ;
        if after > 0 then
                begin (* blank point and after *)
                for i := ls+1 to ls+1+after do s[i] := ' ' ;
                ls := ls + 1 + after ;
                end   (* blank point and after *);
        for i := ls+1 to ls+4 do s[i] := ' ' ; (* Blank exponent field. *)
        s[0] := chr(ls+4) ;
        end   (* zero *);

denormal, normal :
        begin (* normal *)
        decf.style := floatdecimal ;
        cd := after + 1 ;
        if cd > (sigdiglen-1) then cd := sigdiglen-1 ;
        decf.digits := cd ;
        s2dec( decf, x, decr ) ;
        with decr do 
                begin (* with decr *)
                if sgn = 0 then ls := 0 else
                        begin 
                        ls := 1 ;
                        s[1] := '-' ;
                        end ;
                s[ls+1] := sig[1] ;
                if after > 0 then 
                        begin (* after > 0 *)
                        ls := ls + 1 ;
                        s[ls+1] := '.' ;
                        for i := 2 to cd do s[ls+i] := sig[i] ;
                        for i := cd+1 to after+1 do s[ls+i] := '0' ;
                        end   (* after > 0 *) ;
                ls := ls + after + 5 ;
                s[ls-3] := 'E' ;
                exp := exp + cd - 1 ; (* Adjust for point. *)
                if exp < 0 then s[ls-2] := '-' else s[ls-2] := '+' ;
                s[ls-1] := chr(48 + abs(exp) div 10) ;
                s[ls  ] := chr(48 + abs(exp) mod 10) ;
                s[0] := chr(ls) ;
                end   (* with decr *) ;
        end   (* normal *) ;

infinite, qnan, snan : fp%strange ( x, w, s) ;

end (* case *) ;

fp%output( f, width, s) ;
end; {%w_e}

procedure %w_f (* var f: text; x: real; width,after: integer *);
var
s : decstr ;
ls, w, a, i : integer ;
sgn : integer ;
decf : decform ;

procedure ffrome ;

var (* ffrome *)
i, k, n : integer ;
decr : decimal ;

begin (* ffrome *)
s2dec( decf, x, decr ) ;
with decr do begin (* with decr *)
n := length(sig) ;
if sig[n] = '?' then s := '' (* error return *) else
        begin (* s2dec result ok *)
        if sgn = 0 then ls := 0 else
                begin 
                ls := 1 ;
                s[1] := '-' ;
                end ;
        if exp >= 0 then
                begin (* all digits to left of point *)
                for i := 1 to n do s[ls+i] := sig[i] ;
                ls := ls + n ;
                for i := ls+1 to ls+exp do s[i] := '0' ;
                ls := ls + exp ;
                end   (* all digits to left of point *)
                else
                if exp <= -n then
                begin (* all digits to right of point *)
                ls := ls + 1 ;
                s[ls] := '0' ;
                end   (* all digits to right of point *)
                else
                begin (* point amidst digits *)
                for i := 1 to n+exp do s[ls+i] := sig[i] ;
                ls := ls + n + exp ;
                end   (* point amidst digits *) ;
        if a > 0 then
                begin (* after > 0 *)
                ls := ls + 1 ;
                s[ls] := '.' ;
                if exp >= 0 then
                    begin (* all digits to left of point *)
                    for i := ls+1 to ls+a do s[i] := '0' ;
                    ls := ls + a ;
                    end   (* all digits to left of point *)
                    else
                    if exp <= -n then
                    begin (* all digits to right of point *)
                    for i := ls+1 to ls-(n+exp) do s[i] := '0' ;
                    ls := ls - n - exp ;
                    for i := 1 to n do s[ls+i] := sig[i] ;
                    ls := ls + n ;
                    for i := ls+1 to ls+a+exp do s[i] := '0' ;
                    ls := ls + a + exp ;
                    end   (* all digits to right of point *)
                    else
                    begin (* point amidst digits *)
                    k := n + exp - ls ;
                    for i := ls+1 to ls-exp do s[i] := sig[k+i] ;
                    ls := ls - exp ;
                    for i := ls+1 to ls+a+exp do s[i] := '0' ;
                    ls := ls + a + exp ;
                    end   (* point amidst digits *) ;
                end   (* after > 0 *) ;
        s[0] := chr(ls) ;
        end   (* s2dec result ok *) ;
end   (* with decr *) ;
end   (* ffrome *) ;

begin
w := width ;
a := after ;
if a < 0 then a := 0 ;
if w > decstrlen then w := decstrlen ;
if (a=0) and (w<2) then w := 2 ; 
if (a>0) and ((w-a)<3) then
        begin (* fix w and a *)
        if (a+3) <= decstrlen then w := a+3 else a := w-3 ; 
        end   (* fix w and a *) ;

case classs( x, sgn ) of
zero : 
        begin
        if sgn = 0 then s := '0' else s := '-0' ;
        if a > 0 then
                begin (* blank point and after *)
                ls := length(s) ;
                for i := ls+1 to ls+1+a do s[i] := ' ' ;
                s[0] := chr(ls+1+a) ;
                end   (* blank point and after *) ;
        end ;

denormal, normal : 
        with decf do
                begin (* with decf *)
                style := fixeddecimal ;
                digits := a ;
                ffrome ;
                if length(s) = 0 then
                        begin (* get f from e *)
                        style := floatdecimal ;
                        digits := sigdiglen-1 ;
                        ffrome ;
                        end   (* f from e *) ;
                end    (* with decf *) ;

infinite, qnan, snan : fp%strange ( x, w, s) ;
end (* case *) ;

fp%output( f, width, s) ;
end; {%w_f}

ÿ