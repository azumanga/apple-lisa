{ Copyright 1983, Apple Computer Inc. }

(* File Libfp/FortElems, Version 15 December 1983.  *)

function nextrandom  ;

const A = 16807; B15 = 32768; B16 = 65536;
var xhi,xalo,leftlo,fhi,k: longint;

begin {nextrandom}
if (lastrandom <= 0) or (lastrandom >= randmodulus) then 
        lastrandom := randmodulus div 2 ;
        { Without fail, we must have 1 <= lastrandom <= randmodulus-1. }
xhi := lastrandom div B16;
xalo := (lastrandom - xhi*B16)*A;
leftlo := xalo div B16;
fhi := xhi*A + leftlo;
k := fhi div B15;
lastrandom := (((xalo - leftlo*B16) - randmodulus) + (fhi - k*B15)*B16) + k;
if lastrandom < 0 then lastrandom := lastrandom + randmodulus;
        { Without fail, we will have 1 <= nextrandom <= randmodulus-1. }
nextrandom := lastrandom ;
end; {nextrandom}

procedure asinx  ; 

var
fpcb : environ ;
q, r : extended ;
sgn : integer ;

begin (* asin *)
procentry(fpcb) ;
i2x( 1, r ) (* r := 1 *) ;
q := r ; (* q := 1 *)
subx( x, r ) ; (* r := 1-x *)
addx( x, q ) ; (* q := 1+x *)
mulx( r, q ) ; (* q := (1-x)*(1+x) *)
sqrtx(q)     ; (* q := sqrt(...) *)
r := x ;
divx( q, r ) ; (* r := x/sqrt(...) *)
atanx(r)     ; (* r := atan(x/sqrt(...)) *)
setxcp( underflow, false ) ; setxcp( divbyzero, false ) ;
if classx(r,sgn) = qnan then 
        begin (* nan result *)
        if not (classx(x,sgn) in [qnan,snan]) then 
                begin 
                clearxcps ;
                errornan( naninvtrig, r ) ;
                end ;
        end   (* nan result *) ;
procexit(fpcb) ;
x := r ;
end   (* asin *) ;

procedure acosx ;

var
q, r  : extended ;
e : environ ;
sgn : integer ;

begin (* acosx *)
procentry(e) ;
i2x( 1, r ) (* r := 1 *) ;
q := r ; (* q := 1 *)
subx( x, r ) ; (* r := 1-x *)
addx( x, q ) ; (* q := 1+x *)
divx( q, r ) ; (* r := (1-x)/(1+x) *)
sqrtx(r)     ; (* r := sqrt(...) *)
atanx(r)     ; (* r := atan(sqrt(...)) *)
scalbx( 1, r ) ; (* r := 2 atan(sqrt((1-x)/(1+x)) *)
setxcp( underflow, false ) ; setxcp( divbyzero, false ) ;
if classx(r,sgn) = qnan then 
        begin (* nan result *)
        if not (classx(x,sgn) in [qnan,snan]) then 
                begin 
                clearxcps ;
                errornan( naninvtrig, r ) ;
                end ;
        end   (* nan result *) ;
procexit(e) ;
x := r ;
end   (* acosx *) ;

procedure sinhx ;

var
fpcb : environ ;
r, q : extended ;

begin (* sinhx *)
procentry(fpcb) ; (* Save environment, clear exceptions and traps.  *)

r := x ;
absx(r) ;       (* r := abs(x) *)
if getexponent(r) < -1 then
        begin (* small argument *)
        scalbx( 1, r ) ; (* r := 2abs(x) *)
        exp1x(r) ;      (* r := exp(2abs(x))-1 *)
        i2x( 1, q ) ;   (* q := 1 *)
        addx( r, q ) ;  (* q := exp(2abs(x)) *)
        sqrtx(q) ;      (* q := exp(abs(x)) *)
        divx(q, r ) ;   (* r := (exp(2abs(x))-1) /exp(abs(x)) *)
        end   (* small argument *)
        else
        begin (* large argument *)
        expx(r) ;       (* r := exp(abs(x)) *)
        i2x( 1, q ) ;   (* q := 1 *)
        divx( r, q ) ;  (* q := 1/exp *)
        subx( q, r ) ;  (* r := exp - 1/exp *)
        end   (* large argument *) ;
scalbx( -1, r ) ; (* r := r/2 *)
cpysgnx( r, x ) ;
setxcp( underflow, false ) ;

procexit(fpcb) ;
x := r ;
end   (* sinhx *) ;

procedure coshx ;

var
fpcb : environ ;
r, q : extended ;

begin (* coshx *)
procentry(fpcb) ;

r := x ;        (* r := x *)
absx(r) ;       (* r := abs(x) *) (* Use abs to insure cosh(x)=cosh(-x) *)
expx(r) ;       (* r := exp(abs(x)) *)
i2x(1,q) ;      (* q := 1 *)
divx( r, q ) ;  (* q := 1/r *)
addx( q, r ) ;  (* r := r + 1/r *)
scalbx( -1, r ) ;
setxcp(underflow, false) ;

procexit(fpcb) ;
x := r ;
end   (* coshx *) ;

procedure tanhx ;

var
fpcb : environ ;
r, q : extended ;

begin (* tanhx *)
procentry(fpcb) ; (* Save environment, clear exceptions and traps.  *)

r := x ;        (* r := x *)
absx(r) ;       (* r := abs(x) in order that tanh(-x) = tanh(x) *)
negx(r) ;       (* r := -abs(x) *)
scalbx( +1, r ) ; (* r := -2abs(x) *)
exp1x(r) ;      (* r := exp(-2abs(x))-1 *)
i2x(2,q) ;      (* q := 2 *)
addx( r, q) ;   (* q := exp(-2abs(x))+1 *)
divx( q, r) ;   (* r := (exp-1)/(exp+1) *)
cpysgnx( r, x ) ;     (* r := -sig(x)*(exp-1)/(exp+1) *)
setxcp( underflow, false ) ;

procexit(fpcb) ;
x := r ;
end   (* tanhx *) ;

procedure abs2x (* x, y : extended ; var z : extended *) ;
        (* z := sqrt(x^2+y^2) *)
var
fpcb : environ ;
r, ly : extended ;
sx, sy : integer ;

begin (* abs2x *)
procentry(fpcb) ; (* Save old floating point environment and standardize.  *)

sx := getexponent( x ) ; sy := getexponent( y ) ;
if sx < sy then sx := sy ;
r := x ; ly := y ;
scalbx( -sx, r ) ; scalbx( -sx, ly ) ;
mulx( r, r ) ; mulx( ly, ly) ;
setxcp( underflow, false ) ;
addx( ly, r ) ;
sqrtx( r ) ;
scalbx( sx, r ) ;

procexit(fpcb) ;
z := r ;
end (* abs2x *);

procedure atan2x (* x, y : extended ; var z : extended *) ;
        (* z := x^y computed by logarithms and exponentiation.  *)
var
fpkpi, r, t : extended ;
fpcb : environ ;
trapcoming : boolean ;

begin (* atan2x *)
procentry(fpcb) ; (* Save old floating point environment and standardize.  *)

r := x ;
divx( y, r ) ;  (* r := x/y *)
if testxcp( invalid ) then
        begin (* 0/0 or Inf/Inf *)
        clearxcps ;
        i2x(0,r) ;
        cpysgnx( r, x ) ;
        end   (* 0/0 or Inf/Inf *)
        else
        begin (* valid *)
        setxcp( overflow, false ) ;
        setxcp( divbyzero, false ) ;
        atanx(r) ;(* r := atan(x/y) *)
        end   (* valid *) ;
if signofx(y) then 
        begin (* adjust argument for negative y (really x) *)
        i2x(-1, fpkpi) ; acosx(fpkpi) ; (* fpkpi = pi *)
        cpysgnx( fpkpi, x ) ; (* fpkpi := sign(x) * pi *)
        addx( fpkpi, r) ;
        setxcp( underflow, false ) ;
        end   (* adjust argument for negative y (really x) *);

procexit(fpcb) ;
z := r ;
end (* atan2x *);

ÿ