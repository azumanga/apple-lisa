(* File LibFP/FPCTVX, Version 8 February 1984.  *)

const

nanascbinstring = 'N11' ; (* NaN for bad ascii floating point token. *)
nanzero = 21 ;

VAR

        (* NOTE: IOSPASLIB automatic floating point initialization assumes
                 that fpcb is the first global variable of intrinsic unit #20
                 and haltaddress is the second. This means haltaddress is
                 declared first. *)
                 
haltaddress : longint ;
fpcb : environ ;

{ Standins for assembly language procedures. }

        procedure Log2X { (var x : Extended) } ;                EXTERNAL;
        procedure LnX { (var x : Extended) } ;                  EXTERNAL;
        procedure Ln1X { (var x : Extended) } ;                 EXTERNAL;
        procedure Exp2X { (var x : Extended) } ;                EXTERNAL;
        procedure ExpX { (var x : Extended) } ;                 EXTERNAL;
        procedure Exp1X { (var x : Extended) } ;                EXTERNAL;

        {
            Since Elems implementation expects pointer to integer argument,
            use this extra level of interface.
        }
        procedure XpwrIxxx(var i : integer; var x : Extended);  EXTERNAL;
        procedure XpwrI { (i : integer; var x : Extended) } ;
        begin
                XpwrIxxx(i, x);
        end;

        procedure XpwrY { (y : Extended; var x : Extended) } ;  EXTERNAL;
        procedure Compound { (r, n : Extended; var x : Extended) } ;  EXTERNAL;
        procedure Annuity { (r, n : Extended; var x : Extended) } ;  EXTERNAL;
        procedure SinX { (var x : Extended) } ;                 EXTERNAL;
        procedure CosX { (var x : Extended) } ;                 EXTERNAL;
        procedure TanX { (var x : Extended) } ;                 EXTERNAL;
        procedure AtanX { (var x : Extended) } ;                EXTERNAL;
        procedure RandomX { (var x : Extended) } ;              EXTERNAL;

{$%+ }
    
    {------------------------------------------------------------------------}
                
        { Procedures for the convenience of compilers and interpreters that
          provide correctly rounded double precision arithmetic
          for simple statements like z := op x or z := x op y. }
        
function %d_minus(x : double   ) : boolean ; external ;        
        { True if x has neg sign. }
procedure %d_neg(                 var z : double ) ; external ;{ z := -z }
procedure %d_abs(                 var z : double ) ; external ;{ z := abs(z) }
procedure %d_sqrt(                var z : double ) ; external ;{ z := sqrt(z) }
procedure %d_cpysgn(var x : double ; y : double  ) ; external ;
        { x := x with sign of y }
procedure %d_add( x, y : double ; var z : double ) ; external ;{ z := x + y }
procedure %d_sub( x, y : double ; var z : double ) ; external ;{ z := x - y }
procedure %d_mul( x, y : double ; var z : double ) ; external ;{ z := x * y }
procedure %d_div( x, y : double ; var z : double ) ; external ;{ z := x / y }
function  %d_rel( x, y : double ) : relop ; external ;

    {------------------------------------------------------------------------}
                
       procedure %scan_decimal
               (
               var s : longint ;
                       { input : address of first character to scan
                       output: 1 + address of last character accepted as
                               a valid prefix of a floating point
                               token. }
               var t : longint ;
                       { output: 1 + address of last character accepted as
                               a valid complete floating point token.        
                               t <= s. }
               maxsig : integer ;
                       { input : maximum number of characters allowed in 
                               d.sig.  0 <= maxsig <= 255. }
               var d : decimal ;
                       { output: decimal record.
                               sgn : 0..1 ;
                               exp : integer ;
                               sig : string[maxsig] }
               var more : boolean 
                       { output: True iff additional significant digits were
                               ignored. }
               ) ; external;

{$%- }

ÿ