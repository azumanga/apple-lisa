
(* File L:Trap, Version 2 November 1982 *)

        { PROCEDURES for floating point trapping }

procedure fp_recordtrap ( var r : fp_traprecord ; var opcode : longint ) ;
        { Records information about the atomic floating point operation at
        FPCB_.BLOCK.STATUS.INSTAD^:
        r.header, r.es, r.procname, and opcode }
        forward ;
        
procedure fp_recordtrap ;
        (* Will convert op code at FPCB_.INSTAD^ into traprecord R. *)
var
p : ^ longint ;
begin (* fp_recordtrap *)
        p := pointer(ord(fpcb_.block.status.instad)) ;
        opcode := p^ ;
with r do 
        begin (* with *)
        header := fpcb_.block.status.instad^.header ;
        gettexcepset( es ) ;
        procname := nil ;
        optype1 := tfp_extended ; optype2 := tfp_extended ; 
        resulttype := tfp_extended ;
        op1 := nil ; op2 := nil ; result := nil ;
        end   (* with *) ;
end   (* fp_recordtrap *) ;

procedure fptrphandler ( e : xcpn ) ; (* Trap handler for initfptrap. *)
var
i : integer ;
opcode, t : longint ;
r : fp_traprecord ;
name : fp_string ;
kluge : record case integer of
        0 : (pftr : pfp_traprecord ) ;
        1 : (pi32 : ^ longint ) ;
        2 : (hexes : packed array[0..7] of nibble ) ;
        3 : (long : longint ) ;
        end ;
        
procedure excepdisplay (es : excepset) ;
var 
e : xcpn ;
name : fp_string ;
begin
for e := invop to fp_xcpn7 do if e in es then 
        begin (* write name *)
        excepname( e, name ) ;
        write(' ',name,' ') ;
        end   (* write name *) ;
end ;

function hexdigit ( n : nibble ) : char ;
begin
if n < 10 then hexdigit := chr(ord('0')+n) else
        hexdigit := chr(ord('A')+n-10) ;
end ;

procedure display ( tfp : fp_type ; op : fp_pointer ) ;
var
fpb : fp_block ;
ordop : longint ;
s : fp_string ;
error : boolean ;
i : 0..27 ; 
nib:nibble ;
p_bite : pfp_bite ;
p_integer : pfp_integer ;
p_longint : pfp_longint ;
p_int64 : pfp_int64 ;
p_real : pfp_real ;
p_double : pfp_double ;
p_extended : pfp_extended ;
p_bcdstring : pfp_bcdstring ;
p_fp_string : pfp_string ;
p_fpregister : pfp_register ;
x : fp_extended ;

begin (* display *)
fpb := fpcb_.block ;
clrexcepset ; clrtrapset ; setround(rnear) ;
ordop := ord(op) ;
case tfp of
tfp_bite : begin 
        p_bite := pointer( ordop ) ;
        writeln( ' bite ' : 11, p_bite^ ) ;
        end ;
tfp_integer : begin 
        p_integer := pointer( ordop ) ;
        writeln( ' integer ' : 11, p_integer^ ) ;
        end ;
tfp_longint : begin 
        p_longint := pointer( ordop ) ;
        writeln( ' longint ' : 11, p_longint^ ) ;
        end ;
tfp_int64 : begin 
        p_int64 := pointer( ordop ) ;
        i64mfp( p_int64^) ;
        fpmovex(x) ;
        x80_free_ascii( x, 30, 19, fp_free, s, error) ;
        writeln( ' int64 ' : 11, s ) ;
        end ;
tfp_real : begin 
        p_real := pointer( ordop ) ;
        smovex( p_real^, x) ;
        x80_free_ascii( x, 30,  9, fp_free, s, error) ;
        writeln( ' real ' : 11, s ) ;
        end ;
tfp_double : begin 
        p_double := pointer( ordop ) ;
        dmovex( p_double^, x) ;
        x80_free_ascii( x, 30, 17, fp_free, s, error) ;
        writeln( ' double ' : 11, s ) ;
        end ;
tfp_extended : begin 
        p_extended := pointer( ordop ) ;
        x80_free_ascii( p_extended^, 30, 19, fp_free, s, error) ;
        writeln( ' extended ' : 11, s ) ;
        end ;
tfp_bcdstring : begin 
        p_bcdstring := pointer( ordop ) ;
        write( ' bcdstring ' : 11) ;
        for i := 0 to 27 do 
                begin
                if odd(i) then nib := p_bcdstring^[i-1]
                        else nib := p_bcdstring^[i+1] ;
                write(hexdigit(nib)) ;
                end ;
        writeln ;
        end ;
tfp_string : begin 
        p_fp_string := pointer( ordop ) ;
        writeln( ' string ' : 11, p_fp_string^ ) ;
        end ;
tfp_register : begin 
        p_fpregister := pointer ( ordop ) ;
        fpcb_.block.f[0] := p_fpregister^ ;
        fpmovex(x) ;
        x80_free_ascii( x, 30, 19, fp_free, s, error) ;
        writeln( ' register ' : 11, s ) ;
        end ;
end   (* case tfp *) ;
fpcb_.block := fpb ;
end   (* display *) ;

begin (* fptrphandler *) 
excepname( e, name ) ;
write(' * Floating Point Trap ',name,' Encountered in FPLIB ') ;
r := fpcb_.block.status.instad^ ;
with r do
        begin (* with *)
        if header = 0 then
                begin (* composite *)
                writeln(' Composite Operation ') ;
                end   (* composite *)
        else
        if header > 0 then
                begin (* real *)
                writeln(' Pascal Real Arithmetic ') ;
                end   (* real *)
        else
                begin (* F-line *)
                fp_recordtrap( r, opcode  ) ;
                writeln(' MC 68341 Arithmetic ') ;
                end   (* F-line *) ;
        es := es - [e] ;
        if es <> [] then
                begin (* display additional exceptions *)
                write(' * With additional exceptions: ') ;
                excepdisplay( es ) ;
                writeln ;
                end   (* display additional exceptions *);
        if header < 0 then
                begin (* MC details *)
                kluge.pftr := fpcb_.block.status.instad ;
                write(' * PC: ');
                for i := 0 to 7  do if odd(i) then
                        write(hexdigit(kluge.hexes[i-1]))
                        else write(hexdigit(kluge.hexes[i+1])) ;
                kluge.long := opcode ; 
                write(' Op Code: ') ;
                for i := 0 to 7  do if odd(i) then
                        write(hexdigit(kluge.hexes[i-1]))
                        else write(hexdigit(kluge.hexes[i+1])) ;
                writeln ;
                end   (* MC details *) ;
        if procname <> nil then writeln(' * Procedure ',procname^ ) ;
        if op1 <> nil then 
                begin
                write(' * First Operand ') ;
                display( optype1, op1 ) ;
                end ;
        if op2 <> nil then 
                begin
                write(' * Second Operand ') ;
                display( optype2, op2 ) ;
                end ;
        if result <> nil then 
                begin
                write(' * Result        ') ;
                display( resulttype, result ) ;
                end ;
        end   (* with *) ;
writeln(' * Hit RETURN to continue. ') ;
readln ;
end   (* fptrphandler *) ;

procedure fp_ptrp0 ; begin fptrphandler(invop) end ;
procedure fp_ptrp1 ; begin fptrphandler(overfl) end ;
procedure fp_ptrp2 ; begin fptrphandler(underfl) end ;
procedure fp_ptrp3 ; begin fptrphandler(div0) end ;
procedure fp_ptrp4 ; begin fptrphandler(inxact) end ;
procedure fp_ptrp5 ; begin fptrphandler(cvtovfl) end ;
procedure fp_ptrp6 ; begin fptrphandler(fp_xcpn6) end ;
procedure fp_ptrp7 ; begin fptrphandler(fp_xcpn7) end ;

ÿ