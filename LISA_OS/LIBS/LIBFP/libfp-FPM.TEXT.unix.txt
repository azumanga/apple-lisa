; Copyright 1983, Apple Computer Inc.


;       File L:FPM, Version 20 January 1983. 

        .proc   fp%execute

;       procedure fp%execute( a : fp_procaddress ) ;
;       executes the procedure at a after adjusting stack

        debugbegin
        movem.l (sp)+,a0-a1     ; A0 gets return address, A1 gets a.
        move.l  a0,-(sp)        ; Restore return address.
        jmp     (a1)            ; Go to a.
        debugend 'fp%execu',0
        
        .proc   fp%hex
        
;       procedure fp%hex ( p : pointer ; n : integer ; ps : pfp_string) ;
;       Converts n bytes at p^ into a string of length 2n at ps^.

        .macro  hex             ; Converts hexit at %1 and writes at (a1)+.
        andi.b  #$f,%1
        addi.b  #48,%1          ; Add '0'.
        cmpi.b  #57,%1
        ble.s   l%1
        addi.b  #7,%1           ; Convert to 'A'..'F'.
l%1
        move.b  %1,(a1)+
        .endm
        
        debugbegin
        link    a6,#0           ; 0(a6) = old link
                                ; 4(a6) = return address
                                ; 8(a6) = address of string
                                ;12(a6) = n
                                ;14(a6) = address of bytes
        move    12(a6),d0       ; D0 gets n.
        movea.l 14(a6),a0       ; A0 gets address of bytes.
        movea.l 8(a6),a1        ; A1 gets address of string.
        asl     #1,d0
        move.b  d0,(a1)+        ; Write length of string.
        asr     #1,d0
        ble.s   hexend
hexloop
        move.b  (a0)+,d2        ; D2 gets byte.
        move.b  d2,d1           ; D1 gets byte.
        lsr     #4,d1           ; D1 gets left hexit.
        hex     d1
        hex     d2
        dbf     d0,hexloop
hexend
        unlk    a6
        movea.l (sp)+,a0        ; A0 gets return address.
        adda.l  #10,sp
        jmp     (a0)
        debugend 'fp%hex',2
        
        .proc   x%%todec  
        .def    x48%todec,x80%todec

; procedure x48%todec ( var x : x48      ; var s : fp_string ) ; 
; procedure x80%todec ( var x : extended ; var s : fp_string ) ; 

;       s := x .  x must be integral with exponent <= 31.

x48%todec
x80%todec
        debugbegin
        move.l  (sp)+,a0
        move.l  (sp)+,a1        ; Address of s.
        loadx   a2,d1,d2        ; Load X.
        andi    #31,d1          ; Guarantees 0 <= exponent <= 31.
        move.l  a0,-(sp)        ; Set up return from RTS in %xtodec.

;       Routine         converts an internal extended, which must contain
; an integral value, into a string of ASCII digits.
; Inputs:
;       D1 : exponent of X <= 31.
;       D2 : significand of X
;       A1 : address of string.  First byte is logical length.
;               The physical length must be "sufficient" - >= 10 is
;               advisable.  %xtodec can't check this.
;               The logical length will be set to the number of digits
;               generated.
;               0 generates '0'; all other numbers generate no leading
;               zeros.
; Uses: A1-A2,D0-D3

        ;       Macro WDIGIT computes the ASCII digit corresponding to the
        ;       value in the least sig byte of %1 and writes it to (A1)+.
        .macro  wdigit
        addi    #asciizero,%1          ; ASCII offset.
        move.b  %1,(a2)+
        .ENDM
        
        ;       Macro DIGIT takes the divide result [R,Q] in %1 and writes
        ;       a digit to (A1)+ corresponding to R, then returns
        ;       [0,Q] in %1.
        .macro  dowdigit
        swap    %1              ; %1 gets [Q,R].
        wdigit  %1              ; Write digit; %1 gets [Q,?].
        clr     %1              ; %1 gets [Q,0].
        swap    %1              ; %1 gets [0,Q].
        .ENDM
        
        ;       Macro DIVDIGIT divides %1 by ten, writes the remainder 
        ;       digit to (A1)+, and returns [0,Q] in %1.
        .macro  divdig
        divu    #10,%1
        dowdigit   %1
        .ENDM

        tst.l   d2
        bne.s   @1              ; Branch if not zero.
        move.b  #1,(a1)+        ; Write string length 1.
        move.b  #asciizero,(a1)        ; Write '0'.
        rts
@1      movea.l a1,a2           ; a2 gets next digit pointer.
        adda.l  #1,a2           ; Point at first digit.
        neg     d1              ; D1 gets -exponent of X.
        addi    #31,d1          ; D1 gets right shift count = 31-exp.
        lsr.l   d1,d2           ; Right shift significand to form integer.
        cmpi.l  #$270fffff,d2   ; Compare X to 655 359 999.
        bcs.s   comp2
                        ; 655 360 000 <= X <= 4 294 967 295

;       The first divide by ten has to be done in three steps.
;       X = 2**16 Xu + Xl
;       Xu = 10 Qu + Ru
;       Xl = 10 Ql + Rl
;       2**16 Ru + Rl = 10 Q3 + R3
;       Then
;       X = 10 ( 2**16 Qu + Ql + Q3 ) + R3.

        move.l  d2,d3           ; D3 gets [Xu,Xl].
        swap    d3              ; D3 gets [Xl,Xu].
        clr     d2              ; D2 gets [Xu,0].
        clr     d3              ; D3 gets [Xl,0].
        swap    d2              ; D2 gets [0,Xu].
        swap    d3              ; D3 gets [0,Xl].
        divu    #10,d2          ; D2 gets [Ru,Qu].
        divu    #10,d3          ; D3 gets [Rl,Ql].
        move.l  d2,d1           ; D1 gets [Ru,Qu].
        clr     d1              ; D1 gets [Ru,0].
        move.l  d3,d0           ; D0 gets [Rl,Ql].
        clr     d0              ; D0 gets [Rl,0].
        swap    d0              ; D0 gets [0,Rl].
        add.l   d0,d1           ; D1 gets [Ru,Rl].
        divdig d1             ; Get digit; D1 gets [0,Q3].
        swap    d2              ; D2 gets [Qu,Ru].
        move    d3,d2           ; D2 gets [Qu,Ql].
        add.l   d1,d2           ; D2 gets [Qu,Ql+Q3].
                                ; This will be the next X.
                        ; 65 539 999 <= X <= 429 496 729
        bra.s   split

                        ; 1 <= X <= 655 359 999
comp2
        cmpi.l  #$9FFFF,d2
        ble.s   last            ; Branch if 1 <= X <= 655 359.
                        ; 655 360 <= X <= 655 359 999
split
        divu    #10000,d2       
        swap    d2              ; D2 gets [Xu,Xl] such that
                                ; 65 <= Xu <= 65535
                                ; 0 <= Xl <= 9999
        clr.l   d3
        move    d2,d3           ; D3 gets [0,Xl].
        divdig d3             ; D3 gets Q <= 999.
        divdig d3             ; D3 gets Q <= 99.
        divdig d3             ; D3 gets Q <= 9.
        wdigit  d3              ; So write leading digit of Xl.
        clr     d2              ; D2 gets [Xu,0].
        swap    d2              ; D2 gets [0,Xu].
        
                        ; 1 <= X <= 655 359
last                            ; Produce digits until remainder is exhausted.
        cmpi.l  #10,d2
        bcs.s   @1              ; Branch if only 1 digit left.
        divdig d2
        bra.s   last
@1      tst     d2
        beq.s   @2              ; Branch around if last digit zero.
        wdigit  d2              ; Write final non-zero digit.
@2      suba.l  #1,a2           ; Compute last digit of string.
        move.l  a2,D0           ; D0 gets address of last digit.
        sub.l  a1,D0           ; D0 gets length of string.
        move.b  D0,(a1)+        ; Write length of string.  
                                ; A0 points to first digit.
                        ; Loop to reverse string so most significant digit
                        ; is first.
@3      move.b  (a1),d1
        move.b  (a2),d2
        move.b  d2,(a1)+
        move.b  d1,(a2)
        suba.l  #1,a2
        cmpa.l  a1,a2           ; At end of loop pointers overlap.
        bgt.s   @3
        rts
        debugend 'x%%todec',0

ÿ