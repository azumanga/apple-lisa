;-----------------------------------------------------------
; 03JUL82: WRITTEN BY JEROME COONEN
; 10AUG82: HAVE SINGLE JUMP POINT AGAIN. (JTC)
; 28DEC82: DELIVER INTEGER NANS RIGHT HERE, NOT IN CVT (JTC)
; 29APR83: CLASS FUNCTION ADDED, SO NEED A QUICK EXIT FROM
;       NAN HANDLER TO CODE TO RETURN APPROPRIATE VALUE.
;       SLEAZY TRICK: USE HI BIT OF OPCODE 001E TO
;       DISTINGUISH THE TWO INSTRUCTIONS. (JTC)
; 01NOV83: TREAT SIGNAL NAN AS ANY OTHER (JTC).
;
; NAN HANDLER DEPENDS ON REGISTER MASK: POST-UNPACK.
; ON ENTRY HAVE JUST TST'ED D2, THE NAN CODE REGISTER.
;-----------------------------------------------------------

;-----------------------------------------------------------
; THIS IS TARGET OF ALL INVALID OPERATIONS FOUND DURING
; OPERATIONS.  BITS IN D0 000000XX MUST GO TO 00XX0000.
;-----------------------------------------------------------
INVALIDOP:
        BSET    #ERRI+8,D6
        SWAP    D0              ; ALIGN CODE BYTE
        MOVE.L  D0,D4
        CLR.L   D5              ; CLEAR LO HALF
        MOVEA.W #$7FFF,A4       ; SET EXPONENT
        BRA.S   NANCOERCE


NANS:
;-----------------------------------------------------------
; ONE NAN: STUFF IT.  TWO NANS: TAKE ONE WITH LARGER
; CODE, OR CONVENIENT (SRC) IF THE CODES ARE =.
; D2: 2-SRC 4-DST 6-BOTH
; MUST NOT DESTROY CODE IN D2.
;-----------------------------------------------------------
QNANS:
        CMPI.W  #2,D2
        BEQ.S   NANSRC
        CMPI.W  #4,D2
        BEQ.S   NANDST

NANPRE:
        MOVE.L  #$00FF0000,D0   ; MASK FOR CODE
        MOVE.L  A1,D1           ; DST.HI
        AND.L   D0,D1           ; DST CODE BYTE
        AND.L   D4,D0           ; SRC CODE BYTE
        CMP.L   D0,D1           ; DST - SRC
        BLE.S   NANSRC
NANDST:
        ROL.B   #1,D6           ; SIGN
        MOVEA.L A3,A4           ; EXP
        MOVE.L  A2,D5           ; LO DIGS
        MOVE.L  A1,D4           ; HI DIGS
NANSRC:


;-----------------------------------------------------------
; BE SURE NAN FITS IN DST, BY CHOPPING TRAILING BITS AND
; STORING "ZERO NAN" IF NECESSARY.
; FIRST, BRANCH OUT ON CMP, INTEGER CASES.  THE TRICK FOR
; INTEGER RESULTS IS TO FORCE THE MAX COMP VALUE
;-----------------------------------------------------------
NANCOERCE:
        BTST    #DSTINT+16,D6   ; INTXX OR COMP64 RESULT?
        BEQ.S   NANFLOAT        ; FLOATING RESULT...

;-----------------------------------------------------------
; DELIVER A MAXINT IN EACH OF THE 3 INTEGER FORMATS.
; SIGNAL INVALID FOR INT16 AND INT32 NAN RESULTS.
; FOR COMP64, WANT SIGNAL ONLY IF SNAN, BUT ALREADY HAVE
; SIGNAL FROM ABOVE SO DIFFERENCE IS IRRELEVANT HERE.
; FORMAT CODES:  4-INT16  5-INT32  6-COMP64  IN D6.HI.
; VALUES: INT16 -- 00000000 00008000
;         INT32 -- 00000000 80000000
;         COMP  -- 80000000 00000000
;-----------------------------------------------------------
        CLR.L   D4              ; 0 --> D4
        MOVEQ   #1,D5           ; $80000000 --> D5
        ROR.L   #1,D5

        BTST    #DSTLO+16,D6    ; BB1 --> INT32
        BNE.S   @21
        BTST    #DSTMD+16,D6    ; B10 --> COMP64
        BNE.S   @41

        SWAP    D5
@21:
        BSET    #ERRI+8,D6
        RTS
@41:
        EXG     D4,D5
        RTS


;-----------------------------------------------------------
; THE NON-INTEGER OPERATIONS ARE OF TWO TYPES: THOSE THAT
; HAVE A FLOATING RESULT (THE USUAL) AND THOSE THAT DO NOT
; (COMPARE AND CLASS).  DISTINGUISH THE LATTER ACCORDING TO
; THE HI OPCODE BIT.  (0 FOR CMP, 1 FOR CLASS).
;-----------------------------------------------------------
NANFLOAT:
        BTST    #DSTOUT+16,D6   ; IS IT A CMP OR CLASS?
        BNE.S   FPNANOUT

;-----------------------------------------------------------
;
;-----------------------------------------------------------
        BTST    #OPHIBIT+16,D6  ; 0 = CMP
        BNE.S   @5
        MOVEQ   #CMPU,D0        ; MARK UNORERED
        BRA     CMPFIN
@5:
        MOVEQ   #1,D0           ; SNAN = 1, QNAN = 2
        BCLR    #ERRI+8,D6      ; INVALID SET -> SNAN
        BNE.S   @7

        ADDQ.W  #1,D0
@7:
        BRA     CLASSFIN

FPNANOUT:
        BTST    #SPREC+16,D6    ; CHECK FOR SINGLE
        BEQ.S   @1

        MOVEQ   #0,D5
        MOVE.B  D5,D4
        BRA.S   @2
@1:
        BTST    #DPREC+16,D6    ; CHECK FOR DOUBLE
        BEQ.S   @2

        ANDI.W  #$0F800,D5
@2:
        MOVE.L  D4,D0           ; CHECK FOR ALL 0
        OR.L    D5,D0
        BNE.S   @3

        MOVEq   #nanzero,D4        ; SPECIAL NAN
        swap    d4
@3:
        RTS

ÿ