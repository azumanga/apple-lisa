; Copyright 1983, Apple Computer Inc.


; File L:Equ, Version 21 January 1983. 

                        ; Assembler Options

FDbgOK  .equ    0               ; 1 to include debug code, 0 to not.
FSymOK  .equ    1               ; 1 to include debug symbols, 0 to not.

debugging .equ  fsymok
xfline .equ     0               ; 1 to execute F-line traps, 0 to fake.
amdcode .equ    0               ; 1 to generate AMD code, 0 otherwise.

                        ; A5 offset.
osflag  .equ    21              ; 21(a5) is 0 for OS, <> 0 for Monitor.
flinejump .equ  56              ; 56(a5) is address for F-line JMP.

                        ; Trap vector.
flinevector  .equ    $2c        ; F line trap vector address.
osflineaddress .equ $300        ; Address where os fline handler will reside.

                        ; Miscellaneous EQUates.

asciizero .equ  48              ; Value of ASCII '0'.
TRAPBITNO .EQU  30              ; Bit number for trapping NAN.

                        ; Constants for KIND function.
KZERO   .EQU    0               ; Kind of normal zero.
KFINITE .EQU    2               ; Kind of normalized, denormalized, or
                                ; unnormalized number.
KINF    .EQU    3               ; Kind of infinity.
KNAN    .EQU    4               ; Kind of NAN.

                        ; Masks for Modes.
ccmask  .equ    3               ; Mask for condition codes.
MODER   .EQU    3               ; Mask for Round mode.
MODERR  .EQU    0               ; Bit number for right round mode bit.
MODERL  .EQU    1               ; Bit number for left round mode bit.
MODEC   .EQU    2               ; Bit number for infinity Closure mode.
MODEN   .EQU    3               ; Bit number for Normalizing mode.
                        ; Bit numbers for exceptions.
XIOP    .EQU    0               ; Bit number for Invalid exception.
XOVFL   .EQU    1               ; Bit number for floating Overflow exception.
XUNFL   .EQU    2               ; Bit number for floating Underflow exception.
XDZ     .EQU    3               ; Bit for floating Divide by Zero exception.
XINEX   .EQU    4              ; Bit number for Inexact exception.
XIOVF   .EQU    5              ; Bit for Float to Int overflow exception.
                        
                        ; Floating point status registers.

                                ; The following equates are offsets relative
                                ; to the beginning of the global Pascal variable
                                ; FPCB_.

fpptv   .equ    $00             ; Pascal Floating Point Trap Vector.
fpcb    .equ    fpptv+$20       ; Motorola Floating Point Control Block.
FPCOND  .EQU   fpcb+0           ; Floating point condition code and NAN
                                ; code register.
FPEXCEP .EQU   fpcb+1           ; Floating point sticky exception flag
                                ; register.
TEXCEP  .EQU   fpcb+3           ; Floating point exception flag register for
                                ; exception occuring during current operation.
FPMODE  .EQU   fpcb+4           ; Floating point mode flag register.
FPTRAP  .EQU   fpcb+5           ; Floating point trap enabled flag register.
fpreg0  .equ    fpcb+10         ; Floating point register 0.

                        
                        ; IOP CODEs for NANs from various causes.
nanADD   .EQU    2
nanint  .equ    3
nanDIV   .EQU    4
nanTRAP  .EQU    5
nanunord .equ   6
nanMUL   .EQU    8
nanresult .EQU    12
nanlog   .equ    36

                        ; FPREGISTER subfield offsets

;sign    .equ    0       ; 0 for +, -128 for -
;tag     .equ    1       ; see below
exponent .equ   2
fraction .equ   4       ;  most significant long word of fraction
flsw    .equ    8       ; least significant long word of fraction
                        
                        ; FPREGISTER tag values

tagzero .equ    2
tagnonnormal .equ 16
tagnormal .equ  1
taginf  .equ    4
tagnan  .equ    8

                        ; F-line op code fields.
                        
flineop .equ    $f000
fea1    .equ    $51             ; Effective address is (a1).
fed0    .equ    $40             ; Effective address is D0.
fop     .equ    $1000           ; F-line sub op code, in second word.
fext    .equ    $40             ; F-line sub op code extension.
ftype   .equ    $8              ; F-line storage data type.
fp0op   .equ    0               ; FP register 0.
fp1op   .equ    1               ; FP register 1.

movefp  .equ    0*fop           ; Move storage to FP reg.
fpmove  .equ    1*fop           ; Move FP reg to storage.
movefps .equ    2*fop            ; Move storage to FP status reg.
fpsmove .equ    3*fop            ; Move FP status reg to storage.
movefpm .equ    4*fop            ; Move storage to multiple FP reg.
fpmovem .equ    5*fop            ; Move multiple FP reg to storage.
dyadic  .equ    6*fop            ; Dyadic arithmetic operation.
monadic .equ    7*fop            ; Monadic arithmetic operation.

stype   .equ    0*ftype         ; Single.
dtype   .equ    1*ftype         ; Double.
xtype   .equ    2*ftype         ; Extended.
btype   .equ    3*ftype         ; Bite.
wtype   .equ    4*ftype         ; Word.
ltype   .equ    5*ftype         ; Longint.
ctype   .equ    6*ftype         ; BCD with static K.
pstatic .equ    6*ftype         ; BCD with static K.
pdynamic .equ   7*ftype         ; BCD with dynamic K.

faddop  .equ    0*fext          ; Add.
fsubop  .equ    1*fext          ; Subtract.
fmulop  .equ    2*fext          ; Multiply.
fdivop  .equ    3*fext          ; Divide.
fremop  .equ    4*fext          ; Remainder.
fcomop  .equ    5*fext          ; Compare.

fintop  .equ    0*fext          ; Integral part.
fabsop  .equ    1*fext          ; Absolute value.
fsqrtop .equ    2*fext          ; Square root.
fnegop  .equ    3*fext          ; Negate.

;       AMD 9512 equates.

caddr9512 .equ  $fcd409                 ; Address of command byte.
daddr9512 .equ  $fcd401                 ; Address of data byte.

cmdsadd .equ    $1                     ; Single precision add code.
cmdssub .equ    $2                     ; Single sub.
cmdsmul .equ    $3                     ; Single mul.
cmdsdiv .equ    $4                     ; Single div.

cmddadd .equ    $29                     ; Double precision add code.
cmddsub .equ    $2a                     ; Double sub.
cmddmul .equ    $2b                     ; Double mul.
cmdddiv .equ    $2c                     ; Double div.


ÿ