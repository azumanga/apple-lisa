;  File L:Size, Version 11 August 1983.   
        
        .proc fp_size

; procedure fp_size ( x : extended ; var sign : integer ; var class : numclass ;
;                       var size : fp_type ) ;

;-----------------------------------------------------------
;
;       Offsets from A6.
;
ret     .equ    4       ; Return address.
size    .equ    8       ; Address of size result.
class   .equ    12      ; Address of class result.
sign    .equ    16      ; Address of sign result.
x       .equ    20      ; Address of x.
framelength .equ x+4-size ; Number of bytes of parameters in stack frame.

;       Class codes.

csnan   .equ    fcsnan-1
cqnan   .equ    fcqnan-1
cinf    .equ    fcinf-1
czero   .equ    fczero-1
cnormal .equ    fcnorm-1
cdenormal .equ    fcdenorm-1

;       Size codes.

sizei8  .equ    0
sizei16 .equ    1
sizei32 .equ    2
sizei64 .equ    3
sizef32 .equ    4
sizef64 .equ    5
sizef80 .equ    6


;-----------------------------------------------------------
; UNPACK-TOP MILESTONE +++++++++++++++++++++++++++++++++++ .
;-----------------------------------------------------------
;
         debugbegin
         LINK     A6,#0    
         MOVEM.L  D3-D7/a2-A4,-(sp)
        movea.l sign(a6),a0     ; A0 gets address of sign result.
        movea.l class(a6),a1    ; A1 gets address of class result.
        movea.l size(a6),a2     ; A2 gets address of size result.
        movea.l x(a6),a3        ; A3 gets address of x.
        move.b  #sizef80,(a2)   ; Default size is extended.

;-----------------------------------------------------------
; UNPACK AN EXTENDED: JUST SEPARATE THE SIGN AND LOOK FOR
; CASES.  NOTE THAT THIS CASE MAY FALL THROUGH TO UNPZUN.
;-----------------------------------------------------------
        MOVE.W  (A3),D0         ; SIGN AND EXP
        slt     d1              ; D1 gets result.
        neg.b   d1
        ext     d1
        move    d1,(a0)         ; Set sign result.
        BCLR    #15,D0          ; CLEAR OPERAND SIGN
        MOVE.L  2(A3),D4        ; LEAD SIG BITS
        MOVE.L  6(A3),D5

        CMPI.W  #$7FFF,D0       ; MAX EXP?
        BEQ     UNPNIN

        TST.L   D4              ; LOOK AT LEAD BITS
        BMI.S   UNPNRM          ; NORMALIZED CASE
                                ; BPL.S FALLS THROUGH

;-----------------------------------------------------------
; HERE DISTINGUISH SPECIAL CASES AND SET BITS IN D2,D3.
;-----------------------------------------------------------
UNPZUN:
        TST.L   D4              ; LEAD DIGS = 0?
        BNE.S   UNPUNR
        TST.L   D5
        BNE.S   UNPUNR
UNP0:                           ; ZERO!
        move.b  #czero,(a1)
        tst.b   (a3)
        blt.s   @1
        move.b  #sizei8,(a2)    ; +0: size bite.
        bra.s   sizeend
@1
        move.b  #sizef32,(a2)   ; -0: size real.
        bra.s   sizeend

;-----------------------------------------------------------
; UNNORMAL OPERAND.
;-----------------------------------------------------------
UNPUNR:                         ; UNNORMALIZED!
@1:
        SUBQ.W  #1,D0           ; DECREMENT EXP
        ADD.L   D5,D5
        ADDX.L  D4,D4
        BPL.S   @1
        tst     d0
        bgt.s   unpnrm
                                ; DENORMAL!
        move.b  #cdenormal,(a1)
        bra.s   sizeend

UNPNRM:                         ; NORMALIZED!
        move.b  #cnormal,(a1)
        sub     #$3fff,d0       ; Remove bias.
        cmpi    #1023,d0
        bgt.s   sizeend         ; Huge exponent, size extended.
        cmpi    #-1075,d0
        blt.s   sizeend         ; Tiny exponent, size extended.
        bsr.s   countbits       ; D1 gets count of significant bits.
        cmp     d0,d1
        ble     integral        ; Integral if n-1 <= exponent.
                                ; NON-INTEGRAL!
nonintegral
        cmpi    #52,d1
        bgt.s   sizeend         ; Extended if more than 53 significant bits.
        move    d1,d2
        sub     #1074,d2        ; D2 gets n-1075.
        cmp     d0,d2
        bgt.s   sizeend         ; Extended if exponent < n-1075.
                                ; DOUBLE OR SINGLE!
        cmpi    #23,d1
        bgt.s   double          ; Double if more than 24 significant bits.
        cmp     #127,d0
        bgt.s   double          ; Double if exponent > 127.
        move    d1,d2
        sub     #149,d2         ; D2 gets n-150.
        cmp     d0,d2
        bgt.s   double          ; Double if exponent < n-150.
        move.b  #sizef32,(a2)
        bra.s   sizeend
double
        move.b  #sizef64,(a2)

;       finish up code
        
sizeend
         MOVEM.L  (sp)+,D3-D7/a2-A4
         UNLK     A6
         MOVE.L   (sp)+,A0
         ADDA.W   #framelength,sp
         JMP      (A0)

;
;       routine to count the number of significant bits-1 and store in d1.
;       it's assumed there is at least one such bit.  1 <= D1 <= 63.
;

countbits
         tst.l  d5
         beq.s  countupper
         tst.w  d5
         beq.s  start48
         move   #63,d1                  ; 49 to 64 bits on.
         bra.s  lowerloop
start48
         move   #47,d1                  ; 33 to 48 bits on.
         swap   d5
lowerloop
         lsr    #1,d5
         dbcs   d1,lowerloop
         rts
countupper
         tst.w  d4
         beq.s  start16
         move   #31,d1                  ; 17 to 32 bits on.
         bra.s  upperloop
start16
         move   #15,d1                  ;  1 to 16 bits on.
         swap   d4
upperloop
         lsr    #1,d4
         dbcs   d1,upperloop
         rts
         
;       nan and infinity code

UNPNIN:
        MOVEA.W #$7FFF,A4       ; MAX EXP
        move.l  d4,d1
        BCLR    #31,D1          ; IGNORE INT BIT
        TST.L   D1
        BNE.S   UNPNAN
        TST.L   D5
        BNE.S   UNPNAN
                                ; INF!
        move.b  #cinf,(a1)
        tst     d4              ; Check I bit.
        bmi.s   sizeend         ; Inf/Nan with I bit is size extended.
        move.b  #sizef32,(a2)   ; Infinity is always real size.
        bra.s   sizeend
UNPNAN:                         ; NAN!
        BTST    #30,D4          ; SIGNAL/QUIET BIT
        BEQ.S   quietnan
        move.b  #csnan,(a1)
        bra.s   sizeend
quietnan
        move.b  #cqnan,(a1)
        tst     d4      
        bmi.s   sizeend         ; Size of inf/nan with I bit is extended.
        bsr.s   countbits
        cmpi    #23,d1
        bgt.s   trydnan
        move.b  #sizef32,(a2)   ; Size of nan with 24 sig bits is real.
        bra.s   sizeend
trydnan
        cmpi    #52,d1
        bgt.s   sizeend         ; Size of nan with > 53 bits is extended.
        move.b  #sizef64,(a2)
        bra.s   sizeend
         
;
;       code for integral normalized values
;

integral
         tst.b  (a3)
         bge.s  notworst        ; Not worst case if not negative.
         tst    d1
         bne.s  notworst        ; Not worst case if n>1.
         cmpi   #32,d0
         bge.s  notworst        ; Not worst case if exponent >= 32.
         sub    #1,d0           ; In worst case of largest negative integer,
                                ; kluge following comparisons by pretending
                                ; exponent is one less than otherwise.
notworst
         cmp    #14,d0
         bgt.s  expgt14
         cmp    #6,d0
         bgt.s  expgt6
         move.b #sizei8,(a2)    ; Bite: exponent <= 6.
         bra.s  sizeend
expgt6
         move.b #sizei16,(a2)   ; Integer: 6 < exponent <= 14.
         bra.s  sizeend
expgt14
         cmp    #30,d0
         bgt.s  expgt30
         move.b #sizei32,(a2)   ; Longint : 14 < exponent <= 30.
         bra.s  sizeend
expgt30
         cmp    #62,d0
         bgt.s  nonintegral     ; Floating : 62 < exponent.
         move.b #sizei64,(a2)   ; Comp : 30 < exponent <= 62.
         bra.s  sizeend
         
         debugend 'FP_SIZE '
  
ÿ