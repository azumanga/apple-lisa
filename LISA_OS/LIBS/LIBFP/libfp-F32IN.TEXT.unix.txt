(* Copyright 1983, Apple Computer Inc. *)

(* File L:F32In, Version 22 February 1983. *)

procedure f32scan ( var instring : fp_string ; var sn : scannednumber ; var x : real ) ;

        (* x := sn.  S is used only for diagnostic trapping. *)

var
kluge : record case boolean of
        false : ( r : real ) ;
        true  : ( s : fourbite ) ;
        end ;
inan, ee, i, ls, zcount, ie : integer ;
xi, pt : x48 ;
nansig : fp_int64 ;
nanok : boolean ;
oldrm, newrm : rmode ;
fps : fp_statustype ;
trapcoming : boolean ;
        (* Following variables added to fix inexact input problems. *)
leading : boolean ;
before : integer ;
safter : fp_string ;
xbefore : real ;

function makeinf : real ;
        (* Returns +Infinity.  *)
var
l1, l2 : longint ;
r : record
case boolean of
false : ( rr : real ) ;
true  : ( ri : longint ) ;
end ;

begin
l1 := 32640 ; l2 := 65536 ;
r.ri := l1 * l2  ; (* Make 7F800000 *)
makeinf := r.rr ;
end ;

procedure f32postinput ( name : fp_string ; var s : fp_string ; var x : real ) ;
        (* Routine to set up trapping for a Pascal Real Arithmetic ascii to real
        routine. *)

var
r : fp_traprecord ;

begin (* f32postinput *)
with r do
        begin (* with *)
        gettexcepset( es ) ;
        optype1 := tfp_string ;
        op1 :=  @ s  ;
        op2 := nil ;
        resulttype := tfp_real ;
        result :=  @ x   ;
        procname := @ name ;
        fp_postoperation ( r) ;
        end   (* with *) ;
end   (* f32postinput *) ;

begin (* f32scan *)
with sn do
begin (* with sn *) 
case kind of
inf :   begin
        x := makeinf ;
        if sign then x := -x ;
        end ;

nan :   begin (* nan *)
        nanscan( sn, nansig ) ;
        nanok := true  ;
        for inan := 3 to 7 do nanok := nanok and (nansig[inan] = 0) ;
        if not nanok then
                begin (* error *)
                nansig[0] := 0 ;
                nansig[1] := nanascnan ;
                nansig[2] := 0 ;
                end   (* error *) ;
        with kluge do
                begin
                r := makeinf ;
                s[1] := nansig[0] - 128 ;
                s[2] := nansig[1] ;
                s[3] := nansig[2] ;
                x := r ;
                end ;
        if sign then x := -x ;
        end   (* nan *) ;

normal : begin (* normal *)
        if length(significand) < 1 then 
                begin (* zero *)
                x := 0.0 ;
                if sign then x := -x ;
                end   (* zero *)
                else
                begin (* nonzero *)
                statusprelude ( fps ) ;
                if moresignificand then if significand[maxfpstring] = '0' then
                        significand[maxfpstring] := '1' ; (* Sticky bit! *)
                ee := 0 ;
                if length(exponent) > 4 then ee := 9999 else
                        begin (* compute explicit exponent *)
                        for i := 1 to length(exponent) do 
                                ee := 10 * ee + ord(exponent[i]) - 48 ;
                        end   (* compute explicit exponent *) ;
                if esign then ee := -ee ;
                ee := ee + implicit ;
                
                        (* Following code used to fix inexact flag problems. *)
                        
                ls := length(significand) ;
                before := ls + ee ; (* Number of digits before point. *)
                if (ee <= -1) and (1 <= before) and (before <= 7) then
                        begin (* convert leading integer separately *)
                        leading := true ;
                        safter := copy( significand, before+1, ls-before) ; 
                                (* Get fraction part of string. *)
                        significand[0] := chr(before) ;
                                (* Reset length to include only integer part. *)
                        x%dec( significand, xi, ie ) ;
                                (* Guaranteed exact and ie = 0. *)
                        xbefore := x%tos( xi ) ; (* Guaranteed exact. *)
                        if sign then xbefore := -xbefore ;
                        x%dec( safter, xi, ie ) ; (* Convert fraction part. *)
                        end   (* convert leading integer separately *)
                        else
                        begin (* convert in one operation *)
                        leading := false ;
                        if ee > 0 then begin
                                zcount := 9 - ls ;
                                if ee < zcount then zcount := ee ;
                                if zcount > 0 then
                                        begin (* Add trailing zeros to reduce ee *)
                                        ee := ee - zcount ;
                                        for i := ls+1 to ls+zcount do
                                                 significand[i] := '0' ;
                                        significand[0] := chr(ls+zcount) ;
                                        end   (* Add trailing zeros to reduce ee *) ;
                                end ;
                        x%dec ( significand, xi, ie ) ;
                        end   (* convert in one operation *) ;
                
                ee := ee + ie ;
                if ee <> 0 then
                        begin
                        if ee > 99 then ee := 99 ; (* Insure overflow *)
                        if ee < -99 then ee := -99 ; (* Insure underflow.  *)
                        x%pot( abs(ee), pt ) ;
                        if ee > 0 then
                                begin
                                x%mul ( xi, pt, xi ) ;
                                end
                        else if ee < 0 then
                                begin
                                x%div ( xi, pt, xi ) ;
                                end ;
                        end ;
                if sign then
                        begin (* proper rounding mode for negative numbers *)
                        oldrm := getround ;
                        newrm := oldrm ;
                        case oldrm of (* reverse rounding mode to x%tos for directed *)
                        rpos : newrm := rneg ;
                        rneg : newrm := rpos ;
                        end (* case oldrm *) ;
                        if oldrm <> newrm then
                                begin 
                                setround(newrm) ;
                                x := -x%tos(xi) ;
                                setround(oldrm) ;
                                end
                                else
                                x := -x%tos(xi) ;
                        end   (* proper rounding mode for negative numbers *)
                        else
                        begin (* positive numbers *)
                        x := x%tos(xi) ;
                        end   (* positive numbers *) ;
                
                if leading then x := xbefore + x ; (* Add in integer part. *)
                statuspostlude( fps, trapcoming  ) ;
                if trapcoming then f32postinput( 'f32scan', instring, x ) ;
                end   (* nonzero *) ;
        end   (* normal *) ;

end   (* case kind *) ;

end   (* with sn *) ;
end   (* f32scan *) ;

function p_f32 ;

var
sn : scannednumber ;
i, next : integer ;
x : real ;

begin (* p_f32 *)
stringscan ( s, 1, length(s), next, sn ) ;
with sn do for i := next to length(s) do error := error or (s[i] <> ' ') ;
        (* Error if any characters not accepted except trailing blanks. *)
if sn.error then errorsn( sn ) ;
f32scan( s, sn, x ) ;
p_f32 := x ;
end   (* p_f32 *) ;

procedure asciireal ;

var
sn : scannednumber ;

begin (* asciireal *)
if fileio then
        begin
        {$ifc not fp_compiler }
        filescan ( infile, sn, s ) ;
        {$endc }
        end
        else
        begin
        stringscan ( s, first, last, next, sn ) ;
        end ;
error := sn.error ;
if error then errorsn( sn ) ;
f32scan( s, sn, z ) ;
end   (* asciireal *) ;

function f32_r_r (* var f : text ) : real *);
        (* The Pascal procedure called via %r_r to read a real value
        from Infile.  *)
var
sn : scannednumber ;
s : fp_string ;
x : real ;

begin (* f32_r_r *)
{$ifc not fp_compiler }
filescan( f, sn, s) ;
if sn.error then errorsn(sn) ;
f32scan( s, sn, x ) ;
f32_r_r := x ;
{$endc }
end   (* f32_r_r *) ;

procedure read_f32 ;
var next : integer ;
begin
asciireal ( true, Infile, Readchars, 0, 0, next, z, error ) ;
end ;


ÿ