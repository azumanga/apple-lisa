
(* File LibFP/CorrbdLDec, Version 19 January 1984. *)

procedure Bin2S(b : UnpBin; var s : Single  ); forward ;

procedure Bin2D(b : UnpBin; var d : Double  ); forward ;

procedure Bin2E(b : UnpBin; var e : Extended); forward ;

procedure E2Bin(e : Extended; var b : UnpBin); forward ;

procedure E2Bin { (e : Extended; var b : UnpBin) };
var
    t : EByte;
    i : integer;
    ta : array [0..9] of 0..255 ;
    k, bval : integer ;
begin
    t.e := e;
    for k := 0 to 9 do 
        begin
        bval := t.b[9-k] ;
        if bval < 0    then bval := bval + 256 ;
        ta[k] := bval ;
        end ;
    b.sgn := ta[9] div 128;
    b.exp := ((ta[9] mod 128) * 256) + ta[8] - 16383;
    for i := 0 to BDIGLEN do
        b.dig[i] := 0;
    for i := 0 to 7 do
        b.dig[i] := ta[7-i] ;

if b.exp = 16384 then b.exp := bexpmax ;

end;

procedure Bin2S { (b : UnpBin; var s : Single  ) };
var 
    k : integer;
    t : SByte;
    ta : array [0..3] of 0..255 ;
    bval : integer ;
begin
    k := b.exp + 127;    { bias the exponent }
    ta[3] := (128 * b.sgn) + (k div 2); { sign and 7 exp bits }
    ta[2] := ((k mod 2) * 128) + (b.dig[0] mod 128);
    ta[1] := b.dig[1];
    ta[0] := b.dig[2];
    if (b.dig[0] < 128) and (k = 1) then
        ta[2] := ta[2] - 128;
    for k := 0 to 3 do 
        begin
        bval := ta[3-k] ;
        if bval >= 128 then bval := bval - 256 ;
        t.b[k] := bval ;
        end ;
        
    s := t.s
end;
        
procedure Bin2D { (b : UnpBin; var d : Double  ) };
var
    t : DByte;
    i, k : integer;
        bval : integer ;
        ta : array[0..7] of 0..255 ;
begin
    k := b.exp + 1023 - 3 ;    { biased exponent }
    if (k=1) and (b.dig[0] < 16) then k := 0 ;
    b.dig[0] := b.dig[0] mod 16 ;
        
    ta[0] := (128 * b.sgn) + (k div 16);
    ta[1] := ((k mod 16) * 16) + b.dig[0];
    for i := 2 to 7 do
        ta[i] := b.dig[i-1];
    
    for k := 0 to 7 do 
        begin
        bval := ta[k] ;
        if bval >= 128 then bval := bval - 256 ;
        t.b[k] := bval ;
        end ;
    d := t.d
end;

procedure Bin2E { (b : UnpBin; var e : Extended) };
var
    t : EByte;
    i, k : integer;
        bval : integer ;
        ta : array [0..9] of 0..255 ;
begin
    k := b.exp + 16383;    { biased exponent }
    ta[9] := (128 * b.sgn) + (k div 256);
    ta[8] := k mod 256;
    for i := 7 downto 0 do
        ta[i] := b.dig[7-i];
    for k := 0 to 9 do 
        begin
        bval := ta[9-k] ;
        if bval >= 128 then bval := bval - 256 ;
        t.b[k] := bval ;
        end ;
    e := t.e
end;

procedure x2ldec {( digits : integer ; x : extended ; var y : longdecimal )} ;
        (* Converts x to y with Digits significant in floating style. *)

var
env : environ ;
du : unpdec ;
bu : unpbin ;
benv : b2denv ;
k, c, nancode, i : integer ;
allzero : boolean ;
rd : rounddir ;

begin (* x2ldec *)
rd := getrnd ;
procentry ( env ) ;
e2bin( x, bu ) ;
with benv do case rd of
tonearest : rnd := rnear;
upward : rnd := rup ;
downward : rnd := rdown ;
towardzero : rnd := rzero ;
end (* case testrnd *) ;

with benv do
        begin (* with benv *)
        pre := f.digits ;
        minexp := -dexpmax ;
        maxexp := dexpmax-1 ;
        case f.style of
        floatdecimal : benv.style := floatstyle ;
        fixeddecimal : benv.style := fixedstyle ;
        end ;
        end   (* with benv *) ;
bin2dec( benv, bu, du ) ;
with benv do
        begin (* with denv *)
        setxcp( overflow, oflow ) ;
        setxcp( underflow,uflow ) ;
        end   (* with denv *) ;
setxcp( inexact,  benv.inexact ) ;
y.sgn := du.sgn ;
    if du.exp = -dexpmax then
                begin (* minimum exponent *)
                y.sig := '0' ;
                end   (* minimum exponent *)
                else
                if du.exp = dexpmax then
                begin (* maximum exponent *)
                allzero := true ;
                for i := 0 to ddiglen do allzero := allzero and (du.dig[i] = 0) ;
                if allzero 
                        then  y.sig := 'I'
                        else 
                        begin (* nan *)
                        y.sig := 'N  ' ;
                        nancode := 0 ;
                        for i := 0 to 2 do nancode := 10 * nancode + du.dig[i] ;
                        for i := 3 downto 2 do 
                                begin
                                c := nancode mod 16 ;
                                if c <= 9 then y.sig[i] := chr(48+c)
                                        else y.sig[i] := chr(55+c) ;
                                nancode := nancode div 16 ;
                                end ;
                        end   (* nan *) ;
                end   (* maximum exponent *)  
    else
    begin
        k := ddiglen-1 ;
        while (k >= f.digits) and (du.dig[k] = 0) do k := k - 1 ; 
                (* Find last digit. *)
        for i := 0 to k do y.sig[i+1] := chr(48 + du.dig[i]) ; (* Copy string. *)
        y.sig[0] := chr(k+1) ;  (* Set length of string. *)
        y.exp := du.exp - k ; (* Adjust exponent. *)
    end;

procexit ( env ) ;
end   (* x2ldec *) ;

procedure ldec2x {( prec : roundprecision ; x : longdecimal ; var y : extended ) };
        (* Converts x to y, correctly rounded according to prec. *)
        

var
env : environ ;
du : unpdec ;
bu : unpbin ;
i, nancode, i0, c : integer ;
denv : d2benv ;
s : single ; d : double ;
rd : rounddir ;

begin (* ldec2x *)
rd := getrnd ;
procentry ( env ) ;

du.sgn := x.sgn ;
case x.sig[1] of

'0' :   begin (* zero *)
        du.exp := -dexpmax ;
        for i := 0 to ddiglen do du.dig[i] := 0 ;
        end   (* zero *) ;
        
'I' :   begin (* inf *)
        du.exp := +dexpmax ;
        for i := 0 to ddiglen do du.dig[i] := 0 ;
        end   (* inf *) ;
        
'N' :   begin (* nan *)
        du.exp := +dexpmax ;
        nancode := 0 ;
        if length(x.sig) <= 5 then
                begin (* right justify *)
                if length(x.sig) > 2 then i0 := length(x.sig) - 1 else i0 := 2 ;
                for i := i0 to length(x.sig) do
                        begin
                        c := ord(x.sig[i]) - 48 ;
                        if c >= 17 then c := c - 7 ;
                        nancode := 16 * nancode + c ;
                        end ;
                end   (* right justify *)
                else
                begin (* left justify *)
                for i := 4 to 5 do
                        begin
                        c := ord(x.sig[i]) - 48 ;
                        if c >= 17 then c := c - 7 ;
                        nancode := 16 * nancode + c ;
                        end ;
                end   (* left justify *) ;
        if nancode = 0 then nancode := nanzero ;
        for i := 2 downto 0 do
                begin
                du.dig[i] := nancode mod 10 ;
                nancode := nancode div 10 ;
                end ;
        for i := 3 to ddiglen do du.dig[i] := 0 ;
        end   (* nan *) ;
        
otherwise
        begin (* number *)
                du.exp := x.exp + ddiglen ;
                for i := length(x.sig) downto 1 do
                        du.dig[i+ddiglen-length(x.sig)] := ord(x.sig[i]) - 48 ;
                for i := (ddiglen-length(x.sig)) downto 0 do
                        du.dig[i] := 0 ;
        end   (* number *) ;
        
end (* case x.sig[1] *) ;

with denv do case  rd of
tonearest : rnd := rnear;
upward : rnd := rup ;
downward : rnd := rdown ;
towardzero : rnd := rzero ;
end (* case testrnd *) ;

case prec of

realprecision :
        begin (* single *)
        denv.pre    :=      24 ;
        denv.minexp :=     -126  ;
        denv.maxexp :=     127 ;
        end   (* single *) ;
        
dblprecision :
        begin (* double *)
        denv.pre    :=      53 ;
        denv.minexp :=    -1022 ;
        denv.maxexp :=     1023 ;
        end   (* double *) ;
        
extprecision :
        begin (* extended *)
        denv.pre    :=      64 ;
        denv.minexp :=    -16383;
        denv.maxexp :=     16383;
        end   (* extended *) ;
        
end (* case p *) ;

dec2bin( denv, du, bu ) ;
with denv do
        begin (* with denv *)
        setxcp( overflow, oflow ) ;
        setxcp( underflow,uflow ) ;
        end   (* with denv *) ;
setxcp( inexact,  denv.inexact ) ;
case prec of
realprecision :
        begin
        bin2s( bu, s ) ;
        s2x( s, y ) ;
        end ;
dblprecision :
        begin
        bin2d( bu, d ) ;
        d2x( d, y ) ;
        end ;
extprecision :
        begin
        bin2e ( bu, y ) ;
        end ;
end (* case prec *) ;

procexit ( env ) ;
end   (* ldec2x *) ;

ÿ