   {*********************************************************************************
      external assembly language routine - makes a call to an application specific
      matrix manager routine.  The procedure pointer passed should be the address of
      the procedure to be called.
   **********************************************************************************}
   procedure Call(proc : procPtr); external;

   {*********************************************************************************
      Common Interface routines
   **********************************************************************************}

   {$S TEwork1 }
   procedure CellInfo
     (parName      : cellParType;       {which parameter to read/write}
      mode         : IOModeType;        {reading/writing mode flag}
      rowId, colId : idType;            {location of cell}
      var cellRec  : cellRecord         {record to be read/written}
     );
   begin
{$IFC fTraceTE}    LogCall;     {$ENDC}
{$IFC tmdebug }
times[5].start := elapstime;
{$ENDC}

      Call(ProcInfo.CellInfo);

{$IFC tmDebug }
times[5].diff := elapstime - times[5].start + times[5].diff - 100;
times[5].cnt  := times[5].cnt + 1
{$ENDC }
   end;


   {IT IS IMPORTANT TO NOTE THAT ICELLVALUE AND ICELLRUN CAN RETURN ERRORCODES
    CVNOTENUFF AND CRNOTENUFF IN WHICH CASE THE VALUE ARRAY IS NOT BIG ENOUGH
    TO HOLD THE ENTIRE CONENTS.  IN THIS CASE NUMBYTES IS THE ACTUAL TOTAL
    AMOUNT OF DATA IN THE FIELD.  IF YOU WISH NOT TO EXPAND THE ARRAY AND
    REISSUE THE CELLVALUE CALL, THEN THE NUMBYTES SENT IN THE FIRST TIME
    BYTES WERE RETURNED}
   {$S TEwork1 }
   procedure CellRun
      (mode         : IOmodeType;
       rowId, colId : idType;
       value        : ptrRuns;
       var numRuns,
           status   : integer
      );
   begin
{$IFC fTraceTE}    LogCall;     {$ENDC}
      Call(ProcInfo.CellRun)
   end;


   {IT IS IMPORTANT TO NOTE THAT ICELLVALUE AND ICELLRUN CAN RETURN ERRORCODES
    CVNOTENUFF AND CRNOTENUFF IN WHICH CASE THE VALUE ARRAY IS NOT BIG ENOUGH
    TO HOLD THE ENTIRE CONENTS.  IN THIS CASE NUMBYTES IS THE ACTUAL TOTAL
    AMOUNT OF DATA IN THE FIELD.  IF YOU WISH NOT TO EXPAND THE ARRAY AND
    REISSUE THE CELLVALUE CALL, THEN THE NUMBYTES SENT IN THE FIRST TIME
    BYTES WERE RETURNED}
   {$S TEwork1}
   procedure CellValue
     (mode         : IOModeType;        {reading/writing mode flag}
      rowId, colId : idType;            {location of cell}
      value        : ptrData;           {ptr to where chrs are to go}
      wideFlg      : boolean;           {format for wide angle display? }
      var numBytes,                     {max # of chrs /actual # chrs returned}
          status   : integer            {error status number}
     );
   begin
{$IFC fTraceTE}    LogCall;     {$ENDC}
{$IFC tmDebug }
times[4].start := elapstime;
{$ENDC }

      Call(ProcInfo.CellValue);

{$IFC tmDebug }
times[4].diff := elapstime - times[4].start + times[4].diff - 100;
times[4].cnt  := times[4].cnt + 1
{$ENDC }
   end;


   {$S TEcold }
   procedure FatalError
     (module,
      proc,
      msg       : str40                 {messages to be displayed}
     );
   begin
{$IFC fTraceTE}    LogCall;     {$ENDC}
      Call(ProcInfo.FatalError)
   end;



   {IT IS IMPORTANT TO NOTE THAT THE ONLY VALID USES OF GETSNIPID  ARE GETSNIPID
    NEXT AND PRIOR RELATIVE TO STUFF ON THE SCREEN.  FIRST IS VALID ONLY AT THE BEGINNING
    LAST, ONLY WHEN THERE IS A LAST.
    BECAUSE IN SOME APPLICATIONS THE SNIPS ARE CACHED AND REUSED, WHAT CANNOT BE TOLERATED
    ARE NEXT AND PRIORS OF THE CURRENT RANGE(OR HILITE) IF THEY ARE OFF THE SCREEN.
    FIRSTS AND LASTS, SHOULD ALSO BE AVOIDED LIKE THE PLAGUE.}
   {$S TEwork1 }
   procedure GetSnipId
     (snip       : snipKind;            {type of information desired: row or column}
      mode       : idModeType;          {mode of information desired: first/last...}
      position   : fract;               {position in [0 .. 1000] for fraction oper}
      refId      : idType;              {reference snip for next/prior oper}
      var snipId : idType               {resulting snip information}
     );
   begin
{$IFC fTraceTE}    LogCall;     {$ENDC}
      Call(ProcInfo.GetSnipId)
   end;



   {$S TEwork1 }
   procedure SetSnipWidth
     (rg         : range;               {range of cells to be operated on}
      width      : integer              {width of those cells}
     );
   begin
{$IFC fTraceTE}    LogCall;     {$ENDC}
      Call(ProcInfo.SetSnipWidth)
   end;


   {$S TEwork1 }
   function  SnipLT
     (snip     : snipKind;              {type of snips to be tested}
      snipId1,                          {snips to be compared}
      snipId2  : idType
     ) :  boolean;
   begin
{$IFC fTraceTE}    LogCall;     {$ENDC}
      Call(ProcInfo.SnipLT)
   end;


   {$S TEwork1 }
   function  SnipWidth
     (snip   : snipKind;                {type of information desired}
      snipId : idType                   {snip for which the data is desired}
     ) : integer;                       {width of the snip}
   begin
{$IFC fTraceTE}    LogCall;     {$ENDC}
      Call(ProcInfo.SnipWidth)
   end;




   {$S TEinit }
   procedure InitProcInfo
     (*
        CellInfo     { parameters} : ProcPtr;
        CellRun      { parameters} : ProcPtr;
        CellValue    { parameters} : ProcPtr;
        FoldedFormula{ parameters} : ProcPtr;
        GetSnipId    { parameters} : ProcPtr;
        mmBreakSnip  { parameters} : ProcPtr;
        mmMapSnip    { parameters} : ProcPtr;
        SetSnipWidth { parameters} : ProcPtr;
        SnipLT       { parameters} : ProcPtr;
        SnipWidth    { parameters} : ProcPtr;
        FatalError   { parameters} : ProcPtr
     *);
   begin
{$IFC fTraceTE}    LogCall;     {$ENDC}
      ProcInfo.CellInfo      := CellInfo;
      ProcInfo.CellRun       := CellRun;
      ProcInfo.CellValue     := CellValue;
      ProcInfo.FoldedFormula := FoldedFormula;
      ProcInfo.GetSnipId     := GetSnipId;
      ProcInfo.mmBreakSnip   := mmBreakSnip;
      ProcInfo.mmMapSnip     := mmMapSnip;
      ProcInfo.SetSnipWidth  := SetSnipWIdth;
      ProcInfo.SnipLT        := SnipLT;
      ProcInfo.SnipWidth     := SnipWidth;
      ProcInfo.FatalError    := FatalError
   end;

(***************************************************************************)

ÿ