{$S TEwork1}
{5/18/82        2:45 pm         rkm
        Vertically center value display.
        Integrate my updates with Steve's and Rod's and Ed's}
procedure shoCell {rowSnipX, colSnipX: snipX; shoRgnH: rgnHandle};
        {Display the cell, without grid lines, and if tblPars.shoFormulas,
        the formula too. (Formula at top (followed by '='), value at bottom).
        Properly hilite, if hiLiteOn, and other conditions hold.
        Treat titles (i.e., ONE OF row or col snip = mInf) properly;
        do nothing for the whole table box (i.e., BOTH row and col snip
        are mInf); we won't get called with gray snips;

 ###  commented out for now  :
        New assumptions (4/13/82):
           a. clipping is already set -- don't change it.
           b. no eraseRect is needed.
           c. gray cells pruned before call

       }
     var

        vRect, cRect,
        wholeCellRect,
        wholeClipRect:     rect;
        fsH:         hndfstate;
        rId, cId:    idType;
        cellStr:     array [0..maxString] of byte;
        celInfo:     CellRecord;
        status:      integer;
        errnum:      integer;
        backgPat:    pattern;
        maxnumruns : integer;
        charHeight:          pixel;  {font size info, for formulas}
        formLen:             integer;        {formula char pos}

        cellFntId:              TLFntId;        {Long Font Id for text in cell}
        {cellFntId:             TFntId;}        {Font Id for text in cell}
        {chs:         charStyle; }

        ourFInfo:    FontInfo;
        fstatus : integer;
        fontOk:      boolean;
        crstatus : integer;


     {***************************}
     {$S TEcold}
       procedure shoFmla;
             {sho the formula at the top of vRect; when done, move the vRect.top and
              cRect.top down below the formula, to encompass the proper location of
              the cell value}
           var
              jPos:     point;  {origin of current formula line}
              jChar:    integer;

           begin
{$IFC fTraceTE}    LogCall;     {$ENDC}
           with jPos, vRect do begin
              formLen := maxString+1;
              IFoldedFormula(rId, cId, @cellStr, formLen,procinfo.FoldedFormula);
              if formLen > 0 then begin

                 h := left + 2;
                 v := top + ourFInfo.ascent;
                 MoveTo(h,v);
                 for jChar := 0 to formLen-1 do begin
                    if (cellStr[jChar] = ascCr) then begin
                       if (jChar < formLen-1) then begin
                         {ignore any trailing carriage return}
                          v := v + ourFInfo.ascent + ourFInfo.descent +
                                                     ourFinfo.leading;
                          MoveTo(h,v);
                       end;
                    end else
                       drawChar(chr(cellStr[jChar]));
                 end;
              end;
             {move the value down below the formula:}
              charHeight := ourFInfo.ascent + ourFInfo.descent +
                                              ourFinfo.leading;
              top := cMax(top, bottom - charHeight);
              cRect.top := cMax(cRect.top, top);
           end; end {shoFmla};

     {***************************}
{$S TEwork1}
       procedure shoAsFld;
             {show the value using the Field Editor}
           begin
{$IFC fTraceTE}    LogCall;     {$ENDC}
{$IFC tmDebug }
times[2].start := elapstime;
{$ENDC }

           with aFieldH^^ do begin
                 coords := vRect;
                 drawPad := tblPars.fieldPad; {This statement will be
                                               unnecessary once we've
                                               settled on a single,
                                               unchanging fieldPad value}
                 align := celInfo.Align;
                 protect := false;
                 maxfmts := maxrun;
                 if celinfo.numruns > 0 then
                    begin
                    maxnumruns := maxrun;
                    CellRun(MMRead,rid,cid,fmtInfo^,maxnumruns,crstatus);
                    curfmts := celinfo.numruns;
                 end else begin
                    curfmts := 1;
                 end;

                 { newcode for release 4.0}
                 SetRunFormat(aFieldH, nil, celInfo.font.fam, setfont, errnum);

                 if (rid = minfsnip) or (cid=minfsnip) then
                    SetRunFormat(aFieldH, nil, celInfo.font.fam, setbold, errnum)
                 else  if celinfo.numruns = 0 then
                    SetRunFormat(aFieldH, nil, celInfo.font.fam, setnormal, errnum);
                 protect := true;

                 fsH := nil;
                 backgPat := white;
                 BackPat(backgPat);
                 DrawField(aFieldH, fsH, false, true);
            end;
{$IFC tmDebug }
times[2].diff := elapstime - times[2].start + times[2].diff - 100;
times[2].cnt  := times[2].cnt + 1
{$ENDC }
         end {shoAsFld};



     {********** shocell  1:02 pm    rkm    6/3/82  *****************}

{$S TEwork1}
     begin
{$IFC fTraceTE}    LogCall;     {$ENDC}
{$IFC tmDebug }
times[1].start := elapstime;
{$ENDC }

        rId := rowSnipX^.sId;
        cId := colSnipX^.sId;
        if traceTMgr then writeln ('tm shoCell: row, col =', rId, cId);

       {do nothing for wholeTableBox}
        if ((rId <> mInfSnip) or (cId <> mInfSnip))
                   { => not whTbBox}
              and ((rId <> pInfSnip) and (cId <> pInfSnip))
                   { => not gray}
              then begin {not whole-table}


           getCRect(rowSnipX, colSnipX, vRect, cRect);


           wholeCellRect := vRect;
           wholeClipRect := cRect;
           clipRect(cRect);
           sectClipRgn(shoRgnH);
           if not emptyRgn(theport^.cliprgn) then begin {there's something to show}
             {clipping is now handled; all further displaying is now logically
              to vRect}


              if UnderEdit(rId, cId) then
                 shoSelCell(vRect)
              else begin {not under edit case}
                 EraseRect(vRect);

                {access the cell value from the matrix}
                 CellInfo(CRecord, mmRead, rId, cId, celInfo);
                 with aFieldH^^ do
                    begin
                    maxlen := maxString + 1;
                    curlen := maxlen;
                    end;

                 CellValue(mmRead, rId, cId, aFieldH^^.curvalue^, False,
                           aFieldH^^.curlen, status);

                 if status = cvnotenuff then
                    begin
                    afieldh^^.curlen := afieldh^^.maxlen;
                    end;

                 if (status <> InvalidCell) and (aFieldH^^.curlen > 0) then begin
                   {access the font}

                    fontOk := FMFontMetrics(celInfo.font, ourFInfo,fstatus);
                    {$ifc tmdebug}
                    if not fontOk then FatalError('tm', 'shoCell',
                                  'FMFontMetrics doesn''t like celInfo.font');
                    {$endc}

                    penNormal;
                    {setchar(chs);}
                    { New for 4.0 }
                    With celInfo.font do begin
                       TextFont(Fam);
                       TextFace(SetEFace);
                    end;

                   {should we show a formula?}
                    if (tblPars.shoFormulas) and (rId <> mInfSnip) and
                           (cId <> mInfSnip) then
                       shoFmla;


                       shoAsFld;

                    if CelInfo.dim then begin
                       PenPat(gray);
                       PenMode(patBic);
                       PaintRect(wholeClipRect);
                       PenNormal
                    end
                 end;

                 if celInfo.hilite then begin
                    penNormal;
                    penSize(1,1);
                    frameRoundRect(wholeCellRect, 15, 10);
                    penNormal;
                 end else if status = InvalidCell then
                    FillRect(vRect, gray);
              end {not under edit case};

             {properly highlight the cell}
              if hl.isOn then
                    if cellInRg(rId, cId, hl.rg) then
                    if (not hl.isBorder) and tblPars.EditTable then
                 hiLiteRect(wholeCellRect, wholeClipRect, ShoRgnH);
           end {something to show};
        end {not whole-table or gray};

        nSnaps := nSnaps + 1;

{$IFC tmDebug }
times[1].diff := elapstime - times[1].start + times[1].diff - 100;
times[1].cnt  := times[1].cnt + 1
{$ENDC }

     end {shoCell};
ÿ