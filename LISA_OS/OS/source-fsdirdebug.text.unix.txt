(*********************************************************************************)
(*                                                                               *)
(*  (c) copyright 1983, 1984  Apple Computer Inc.                                *)
(*                                                                               *)
(*********************************************************************************)

(*
 *  PrEntry displays each type of entry record.  2/22
 *)

  (*
   *  Debugging trace output procedures.
   *)

  {$S fs7 }
  procedure  PrHex ( n : longint );

  var
       HexRep : string[8];
       digit  : integer;
       i      : integer;

  begin
      HexRep := '01234567';  { set string length }
      if n < 0 then
        HexRep := '????????'
      else
        for i := 8 downto 1 do
        begin
          digit := n mod 16;
          if digit > 9 then
            HexRep[i] := chr(ord('A') + (digit - 10))
          else
            HexRep[i] := chr(ord('0') + digit);
          n := n div 16;
        end;

      write(HexRep);
  end{proc PrHex};


  procedure  PrlnHex ( n : longint );
  begin
      PrHex(n); writeln;
  end{proc PrlnHex};



  procedure  PrState ( state : Transform );

  begin
      case state of
        node_split:   writeln('node_split');
        key_rotate:   writeln('key_rotate');
        node_merge:   writeln('node_merge');
        node_delete:  writeln('node_delete');
        tree_empty:   writeln('tree_empty');
        no_operation: writeln('no_operation');
        otherwise     writeln('???');
      end{case};
  end{proc PrState};



  procedure  PrPage ( ptrPg : page_ptr );
  begin
    if (ptrPg = NIL) or (ptrPg = pointer(BAD)) then
      writeln('?')
    else
      writeln(ptrPg^);
  end{proc PrPage};



  procedure  PrKey ( ptrK : key_ptr );

  var
      parID  : integer;
      name   : e_name;
      {
      pl : ^longint;
      i : integer;
      }

  begin
      DecompKey(ptrK, @name, parID);
      writeln('     <',parID:3,'>  ',name);
      {
      pl := @ptrTmp^;
      for i := 1 to 9 do
      begin
        PrlnHex(pl^);
        pl := pointer(ord(pl) + 4);
      end;
      }
  end{proc PrKey};


  procedure  PrBuff ( ptrBuf : buffer_ptr );
  begin
      with ptrBuf^ do
      begin
        write('     page = ',page,'   ');
        if dirty then
          write('dirty   ')
        else
          write('clean   ');
        if lock then
          writeln('locked')
        else
          writeln('unlocked');
      end{with};
  end{proc PrBuff};


  procedure  PrNode ( ptrNode : node_ptr );
  begin
      with ptrNode^ do
      begin
        if kind = leaf then
          write('   leaf   ')
        else
          write('   nonleaf');
        writeln('  nkeys = ',nkeys,'  prior = ',prior,'  next = ',next);
      end{with};
  end{proc PrNode};


  procedure  PrStack ( sp : stack_ptr );
  begin
    writeln;
    while ord(sp) >= ord(@NodeStack) do
    begin
      with sp^ do
        writeln('page = ',page:5,'  index = ',index:2,'  nkeys = ',nkeys:2);
      sp := pointer(ord(sp) - sizeof(StackRec));
    end{while};
    writeln;
  end{proc PrStack};

  (*
  procedure  PrDirStack ( var S : PathStack );

  var
       i : integer;

  begin
      for i := 0 to g_dirLevel do writeln('     ',i:2,'  ',S[i]);
  end{proc PrDirStack};
  *)



  procedure  ShowPool;

  var
       ptrS : buffer_ptr;

  begin
      ptrS := ptrHot;
      writeln;
      writeln('HOT');
      repeat
        with ptrS^ do
        begin
          write('buffer '); PrHex(ord(ptrS)); PrBuff(ptrS);
        end;
        ptrS := ptrS^.link.b;
      until ptrS = ptrHot;
      writeln('COLD');
      writeln;
  end{proc ShowPool};


  procedure  ShowBufs;

  var
       ptrS : buffer_ptr;

  begin
      writeln;
      ptrS := ptrHot;
      repeat
        write(ptrS^.page,'    '); PrHex(ord(ptrS^.link.b)); write('  ');
                                  PrHex(ord(ptrS));    write('  ');
                                  PrlnHex(ord(ptrS^.link.f));
        ptrS := ptrS^.link.f;
      until ptrS = ptrCold;
      writeln;
  end{proc ShowBufs};



  procedure  ShowNode ( ptrBuf : buffer_ptr );

  var
       ptrBase  : rec_ptr;
       ptrRec   : rec_ptr;
       ptrNode  : node_ptr;
       ptrOffst : offset_ptr;
       ptrPg    : page_ptr;
       i        : integer;
       pk       : key_ptr;

  begin
      ptrBase := @ptrBuf^.Data;
      ptrNode := pointer(ord(ptrBase) + (2048 - sizeof(NodeDesc)));
      ptrOffst := pointer(ord(ptrNode) - sizeof(integer));

      writeln;
      writeln('---------------------');
      writeln('page = ',ptrBuf^.page);
      writeln('nkeys = ',ptrNode^.nkeys);
      writeln('prior = ',ptrNode^.prior);
      writeln('next = ',ptrNode^.next);
      if ptrNode^.kind = leaf then
        writeln('kind = leaf')
      else
        writeln('kind = nonleaf');
      writeln;
      writeln('Offsets');
      {$R-}
      for i := 0 to ptrNode^.nkeys do
        writeln('         ',i:2,'     ',ptrOffst^[-i]:4);
      {$R+}

      writeln('Records');
      for i := 0 to ptrNode^.nkeys do
      begin
        {$R-}
        ptrRec := pointer(ord(ptrBase) + ptrOffst^[-i]);
        {$R+}
        if ptrNode^.kind = nonleaf then
        begin
          ptrPg := pointer(ord(ptrRec));
          writeln('                    ',ptrPg^:5);
          ptrRec := pointer(ord(ptrRec) + sizeof(longint));
        end;
        pk := pointer(ord(ptrRec));
        if i < ptrNode^.nkeys then  PrKey(pk);
      end{for};
      writeln('---------------------');
      writeln;
  end{proc ShowNode};



  procedure  PrEntry ( ptrEntry : entry_ptr );
  begin
      with ptrEntry^ do
      begin
        PrKey(@key);
        case eType of
          fileentry:
          begin
            write('file      ');
            writeln('sf = ',sfile,'  size = ',size:1,'  physSize = ',physSize:1);
          end;
          direntry:
          begin
            write('directory ');
            writeln('id = ',id:1);
          end;
          threadentry:
          begin
            write('thread    ');
            write('parID = ',parID:1,'  myName = ',myName);
          end;
        end{case};
      end{with};
  end{proc PrEntry};

ÿ