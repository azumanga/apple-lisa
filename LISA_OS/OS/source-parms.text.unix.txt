      (*  Copyright 1983, 1984, Apple Computer Inc. *)

{file: source/parms}

{ All the following variables belong to the loader parameter data base,
  passed to the system via a pointer once the system has been loaded. }

{ Note that all base addresses are at the LOWER size of their region, even
  though some (sysglobal, sgheap, superstack, op stack, + ?) are
  logically considered to start at the high end.  Note also that all
  addresses/absptrs are UNMAPPED.  }

   version : integer;           { version of the parameter data }

{The next group of variables define the system's memory image.
 Each region is defined by its base (b_region) and its length (l_region) }

   b_sysjt : absptr;            { system jump table }
   l_sysjt : longint;

   b_sys_global : absptr;       { sysglobal }
   l_sys_global : longint;

   b_superstack : absptr;       { supervisor stack }
   l_superstack : longint;      {   (in sysglobal) }

   b_intrin_ptrs : absptr;      {intrinsic ptr region}
   l_intrin_ptrs : absptr;      {   (in sysglobal)}

   b_sgheap : absptr;           { system global heap }
   l_sgheap : longint;          {   (in sysglobal)   }

   b_screen : absptr;           { lisa scream }
   l_screen : longint;

   b_db_screen : absptr;        { debugger's scream }
   l_db_screen : longint;

   b_opsyslocal : absptr;       { outer process syslocal }
   l_opsyslocal : longint;

   b_opustack : absptr;         { outer process "user" stack }
   l_opustack : longint;

   b_scrdata : absptr;          { screen driver data area }
   l_scrdata : longint;

   b_vmbuffer : absptr;         { vm buffer area}
   l_vmbuffer : longint;

   b_drivers : absptr;          { low level driver data area}
   l_drivers : longint;

{ Other parameters: }

   himem,lomem : absptr;        { bounds of free memory:
                                     himem - highest free byte + 1
                                     lomem - lowest free byte }

   l_physicalmem : longint;     { size of real memory }

   fs_block0 : integer;         {which is the first block for fs use}

   debugmode : boolean;         { Whether this invocation is actively }
                                {    debugging initialization code.  }

   smt_base : absptr;           {shows where SMT is}

   os_segs : integer;           {number of segments in the OS program}


   ld_sernum : longint;         {the machines serial number, from parameter mem}

{ Which segments were swapped in by loader, and where they are:}
   b_oscode : array[1..maxsegments] of absptr;
   l_oscode : array[1..maxsegments] of absptr;
   swappedin : array[1..maxsegments] of boolean; {BEWARE, constant 'maxsegments' }
                                                 {is declared BOTH in loader and }
                                                 {in startup.}
   b_debugseg : absptr;         { location of mmu used by lisabug}
   l_debugseg : absptr;

   unpktaddr: absptr;           {address of unpacking table if present }

   have_lisabug : boolean;

   two_screens : boolean;       {number of console channels}

   ldr_A5 : longint;            {loader PROGRAM'S A5 register}

{ These variables guard the loader's boundaries, sitting somewhere near the
  middleof the free space area. }
   toplomem : absptr;           {highest legal value of the lo-memory ptr}
   bothimem : absptr;           {lowest legal value of the hi-memory ptr}

parmend : integer;            { LAST word of parameter data }

ÿ