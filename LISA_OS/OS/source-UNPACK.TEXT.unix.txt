;Copyright 1983, 1984, Apple Computer, Inc.
;
;       FILENAME: UNPACK.TEXT
;

;
;       FUNCTION UNPACKCODE(VERSION:LONGINT;
;                           PINBUFF,POUTBUFF,PTABLE:PTR;
;                           SIZEPACKED:INTEGER;
;                           SIZEUNPACKED:INTEGER):INTEGER;
;
;       Stack:
;
;       28      FUNCTION RESULT
;       24      VERSION
;       20      PINBUFF
;       16      POUTBUFF
;       12      PTABLE
;       10      PACKED CODESIZE
;       8       UNPACKED CODESIZE
;       4       RETURN ADDRESS
;       0       OLD A6
;
;       Registers:
;
;       D0      Down counter for inbuff size bytes
;       D1      Holds the flag byte
;       D2      Counter for indexing into next bit of the flag byte
;       D3      Translation table index, also a temporary
;       D4      Changed target flag, prevents clobbering inbuff
;       D5      Address of first buffer
;       D6      Address of second buffer
;       D7      Second buffer dirty flag
;
;       A0      Pointer to inbuff
;       A1      Pointer to outbuff
;       A2      Pointer to translation table
;       A3      Pointer to next word of the fifo
;       A4      Pointer to empty fifo
;
SZ      EQU     64
VERSION EQU     1
;
UNPACKCODE
        LINK    A6,#-SZ-SZ              ; allocate space for two buffers
        MOVEM.L D3-D7/A2-A4,-(A7)
        MOVE.W  #1,28(A6)               ; unpackcode:=1
        CMP.L   #VERSION,24(A6)         ; if version<>1 then
        BNE     FAILXIT                 ;   exit(unpackcode)
        MOVE.W  #2,28(A6)               ; unpackcode:=2
        LEA     -SZ(A6),A3              ; address of first buffer
        MOVE.L  A3,D5
        LEA     -SZ(A3),A3              ; address of second buffer
        MOVE.L  A3,D6
        MOVE.L  A6,A3                   ; set ptr to fifo to start
        MOVE.L  A6,A4                   ; set ptr to empty fifo to default
        MOVE.L  20(A6),A0               ; ptr to inbuff
        MOVE.L  16(A6),A1               ; ptr to outbuff
        MOVE.L  12(A6),A2               ; ptr to table
        MOVE.W  10(A6),D0               ; length of inbuff
        ADD.W   D0,A0                   ; just beyond end of inbuff
        MOVE.B  -(A0),D2
        SUB.W   #1,D0                   ; adjust count for LAST BYTE
        ROR.W   #1,D2                   ; test slack flag and get starting bit#
        BCS.S   NOSLACK
        TST.B   -(A0)                   ; discard slack byte
        SUB.W   #1,D0                   ; adjust count for SLACK BYTE
NOSLACK AND.W   #7,D2                   ; extract starting bit number
        ADD.W   8(A6),A1                ; just beyond end of outbuff
        CLR.W   D4                      ; changedtarget:=false
        CLR.W   D7                      ; dirtyflag:=false
NEXTBYT MOVE.B  -(A0),D1                ; get next byte of flag bits
        SUB.W   #1,D0                   ; adjust count for FLAG BYTE
        BEQ     FAILXIT                 ; should never happen
NEXTBIT BTST    D2,D1                   ; test next bit in flag byte
        BEQ.S   GETWORD                 ; byte or word ?
        CLR.W   D3
        MOVE.B  -(A0),D3                ; get index from inbuff
        ADD.W   D3,D3                   ; make into word index
        TST.W   D4                      ; if changedtarget then
        BEQ.S   COPYD3
        MOVE.W  0(A2,D3),-(A3)          ;   copy word from table to fifo
        CMP.L   D5,A3
        BNE.S   TRYD6A                  ;   if first buffer is full then
        BSR.S   COPY2ND                 ;     copy second buffer to outbuff
        BRA.S   ADJ4BYT
TRYD6A  CMP.L   D6,A3
        BNE.S   ADJ4BYT                 ;   if second buffer is full then
        BSR.S   COPY1ST                 ;     copy first buffer to outbuff
        BRA.S   ADJ4BYT                 ; else
COPYD3  MOVE.W  0(A2,D3),-(A1)          ;   copy word to outbuff
        CMP.L   A0,A1                   ;   if pinbuff=poutbuff then
        BNE.S   ADJ4BYT
        MOVE.W  #1,D4                   ;     changedtarget:=true
ADJ4BYT SUB.W   #1,D0                   ; adjust count for BYTE
        BRA.S   TESTKNT
GETWORD TST.W   D4                      ; if changedtarget then
        BEQ.S   COPYWRD
        MOVE.B  -(A0),-(A3)             ;   copy word from inbuff to fifo
        MOVE.B  -(A0),-(A3)
        CMP.L   D5,A3
        BNE.S   TRYD6B                  ;   if first buffer is full then
        BSR.S   COPY2ND                 ;     copy second buffer to outbuff
        BRA.S   ADJ4WRD
TRYD6B  CMP.L   D6,A3
        BNE.S   ADJ4WRD                 ;   if second buffer is full then
        BSR.S   COPY1ST                 ;     copy first buffer to outbuff
        BRA.S   ADJ4WRD                 ; else
COPYWRD MOVE.B  -(A0),-(A1)             ;   copy word from inbuff to outbuff
        MOVE.B  -(A0),-(A1)
ADJ4WRD SUB.W   #2,D0                   ; adjust count for WORD
TESTKNT BLE.S   UNPACKX
        SUB.W   #1,D2                   ; decrement to next bit, any left ?
        BPL.S   NEXTBIT                 ; yes
        MOVE.L  #7,D2                   ; starting with MSB (ie. bit 7)
        BRA.S   NEXTBYT                 ; no
COPY1ST MOVE.L  A6,A4                   ; set ptr to start of 1st buffer
        MOVE.L  A6,A3                   ; set fifo ptr back to start
        MOVE.W  #1,D7                   ; dirtyflag:=true
        BRA.S   CPYBUFF
COPY2ND TST.W   D7                      ; if dirtyflag then
        BEQ.S   CPYEXIT
        MOVE.L  D5,A4                   ;   set ptr to start of 2nd buffer
CPYBUFF MOVE.L  #SZ/8-1,D3
CPYLOOP MOVE.L  -(A4),-(A1)             ;   copy buffer (1 or 2) to outbuff
        MOVE.L  -(A4),-(A1)
        DBF     D3,CPYLOOP              ;   A4 is left at end of buffer (1 or 2)
CPYEXIT RTS
UNPACKX BMI.S   FAILXIT                 ; should never happen
        TST.W   D4                      ; if changedtarget then
        BEQ.S   PASSXIT
        BRA.S   CHKWRAP
CHKDONE CMP.L   A3,A4                   ;   if a4=a3 then exit fifo copy
        BEQ.S   PASSXIT
        MOVE.W  -(A4),-(A1)             ;   copy word from fifo to outbuff
CHKWRAP CMP.L   D6,A4                   ;   if A4 is at the end of buffer 2
        BNE.S   CHKDONE
        MOVE.L  A6,A4                   ;     then set A4 to start of fifo
        BRA.S   CHKDONE
PASSXIT CLR.W   28(A6)                  ; unpackcode:=0
FAILXIT MOVEM.L (A7)+,D3-D7/A2-A4
        UNLK    A6
        MOVE.L  (A7)+,A0
        ADD.W   #20,A7
        JMP     (A0)
        .ASCII  'UNPACK  '
;

ÿ