      (*  Copyright 1983, 1984, Apple Computer Inc. *)

{file source/sony}

UNIT lddrivers;         {sony version}

INTERFACE

USES
    (*$U object/ldutil.obj*)              ldutil,
    (*$U object/driverdefs.obj*)          driverdefs;

{Here is the standard device interface for all loader devices:}

procedure DEVINIT(blk0, drv : integer);

procedure READ_BLOCK(var error         :integer;
                         drive         :integer;
                         block         :longint;
                     var buffer,header :integer);

procedure READ_SEQ(var error         :integer;
                       drive         :integer;
                       block         :longint;
                       pages         :integer;
                   var buffer,header :integer);


IMPLEMENTATION

const
   maxtrk = 80;
   blocksize = 512;
type
   byte = -128..127; (* 1-byte integer *)

var
   drive_no,
   fs_blk0 : integer;  {not currently needed}


procedure ASM_READ_BLOCK(var rc      :integer;
                             blk     :longint;
                         var buf,hdr :integer);
       (*************************************************************)
       (*
       (* Description:
       (*    Read the block 'blk' into the buffer pointed to by 'buf',
       (*      with the return code assigned into 'rc'.
       (*
       (*************************************************************)
        external;



function CONVERT(block : integer) : longint;
       (*************************************************************)
       (*
       (* Description:
       (*    Convert block into the prom's expected/packed representation.
       (*
       (*************************************************************)
     external;


procedure DEVINIT{blk0, drv : integer};
       (*************************************************************)
       (*
       (* Description:
       (*    Initialize device driver.
       (*
       (* Input parameters:
       (*    Blk0 - the absolute block number of FS block 0,
       (*    drv - the boot drive number (ignored).
       (*
       (*************************************************************)
begin
   fs_blk0 := blk0;
end; {of devinit}



procedure READ_BLOCK{var error         :integer;
                         drive:        :integer;
                         block         :longint;
                     var buffer,header :integer};
       (*************************************************************)
       (*
       (* Description:
       (*    Read the block 'block' of drive number 'drive' into the buffer
       (*    pointed to by 'buffer', with the return code assigned into 'error'.
       (*
       (*************************************************************)
const
  maxblock = 1683;  {highest legit block request}
var
   lbl : ^pagelabel;
   where: longint;
begin
   if (block>maxblock) or (block<0) then error := -1
   else
      begin
         where := CONVERT(block);
         if (where = -1) then error := where
         else ASM_READ_BLOCK(error, where, buffer, header);
         lbl := @header;
         lbl^.abspage := block;
      end;
end; {of read_block}



procedure READ_SEQ{var error         :integer;
                       drive         :integer;
                       block         :longint;
                       pages         :integer;
                   var buffer,header :integer};
var
   destination: ^integer;
begin
   destination := @buffer;
   while (pages>0) do
      begin
         READ_BLOCK(error, drive, block, destination^, header);
         if error<>0 then EXIT(read_seq);
         destination := pointer(ord4(destination) + blocksize);
         block := block + 1;
         pages := pages - 1;
      end;
end; {of read_seq}


end. {of unit lddrivers}

ÿ