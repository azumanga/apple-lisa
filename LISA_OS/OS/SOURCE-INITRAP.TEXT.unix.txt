          .PROC     INIT_TRAPV,0          ; low core and trap vector init routine

;-----------------------------------------------------------------------------;
;                                                                             ;
;               Copyright 1983, 1984, Apple Computer Inc.                     ;
;                                                                             ;
;-----------------------------------------------------------------------------;

; CONSTANTS
;
BUSERRV   EQU       $8                   ; address of bus error trap vector
ADDRERV   EQU       $C                   ; address of address error trap vector
ILLINSV   EQU       $10                  ; address of illegal instruction vector
PRIVIOV   EQU       $20                  ; address of privilege violation vector
LINE10V   EQU       $28                  ; address of line 1010 emulator vector
LINE11V   EQU       $2C                  ; address of line 1111 emulator vector
SPURINV   EQU       $60                  ; address of spurious interrupt vector

TRAPDV    EQU       $14                  ; address of zero divide trap vector
TRAPCV    EQU       $18                  ; adddress of chk inst trap vector
TRAPOV    EQU       $1C                  ; address of trapv trap vector
TRAP0V    EQU       $80                  ; address of trap 0 vector
TRAP1V    EQU       $84                  ; .
TRAP2V    EQU       $88                  ; .
TRAP3V    EQU       $8C                  ; .
TRAP4V    EQU       $90                  ; .
TRAP5V    EQU       $94                  ; .
TRAP6V    EQU       $98                  ; .
TRAP7V    EQU       $9C                  ; address of trap 7 vector
trapev    equ       $b8                  ; address of trap E vector

INT1V     EQU       $64                  ; interrupt level 1 vector
INT2V     EQU       $68                  ; interrupt level 2 vector
INT3V     EQU       $6c                  ; interrupt level 3 vector
INT4V     EQU       $70                  ; interrupt level 4 vector
INT5V     EQU       $74                  ; interrupt level 5 vector
INT6V     EQU       $78                  ; interrupt level 6 vector


          .include  source/pascaldefs.text
;

          .REF      INIT_NMI_TRAPV       ; NMI (interrupt level 7 ) vector init
          .REF      TRAP1                ; address of trap 1 handler
          .REF      SCHDTRAP             ; address of trap 2 handler
          .REF      TRAP7                ; address of trap 7 handler
;         .REF      LVL1INT              ; address of interrupt level 1 handler
;         .REF      LVL2INT              ; address of interrupt level 2 handler
          .REF      LVL3INT              ; address of interrupt level 3 handler
          .REF      LVL4INT              ; address of interrupt level 4 handler
          .REF      LVL5INT              ; address of interrupt level 5 handler
          .REF      RSINT                ; address of interrupt level 6 handler

          .REF      DIVZERO_TRAP         ; address of zero div trap handler
          .REF      VALUEOOB_TRAP        ; address of chk inst trap handler
          .REF      OVERFLOW_TRAP        ; address of trapv trap handler
          .REF      BUS_ERR              ; address of bus error trap handler
          .REF      ADDRERROR_TRAP       ; address of address error handler
          .REF      ILLGINST_TRAP        ; address of illegal instruction handler
          .REF      PRIVIOLATION_TRAP    ; address of privilege violation handler
          .REF      LINE1010_TRAP        ; address of line 1010 emulator handler
          .REF      LINE1111_TRAP        ; address of line 1111 emulator handler
          .REF      SPURINTR_TRAP        ; address of spurious interrupt handler
          .ref      trapEhandler         ; address of our trap E handler

          .ref      unexp_trap           ; address of uninitialized trap handler

;
; Set the absolute memory locations and the trap vectors
; init_trapv (b_sysglobal_ptr : absptr);
;

          JSR       INIT_NMI_TRAPV       ; initialize nmi vector

          MOVE.L    (SP)+,A1             ; save return pc in A1
          MOVE.L    (SP)+,A2             ; pop b_sysglobal to A2
          MOVE.L    A5,SYSA5(A2)         ; set sysA5 in sysglobal
;         MOVE.L    A4,SYSA4(A2)         ; set sysA4 in sysglobal
          MOVE.L    A2,SGLOBAL           ; store b_sysglobal_ptr in low core

          LEA       SCTAB(A2),A0         ; get address of sctab
          MOVE.L    A0,SCT_PTR(A2)       ; store in sysglobal

          LEA       TRAP1,A0             ; trap 1 handler address
          MOVE.L    A0,TRAP1V            ; trap 1 vector location

          LEA       SCHDTRAP,A0          ; get trap routine address in A0
          MOVE.L    A0,trap2v            ; put routine address in vector

          LEA       TRAP7,A0             ; trap 7 handler address
          MOVE.L    A0,TRAP7V            ; trap 7 vector location

          LEA       BUS_ERR,A0           ; bus error trap handler address
          MOVE.L    A0,BUSERRV           ; bus error trap vector location

          LEA       ADDRERROR_TRAP,A0    ; address error trap handler address
          MOVE.L    A0,ADDRERV           ; address error  vector location

          LEA       ILLGINST_TRAP,A0     ; illegal instruction  handler address
          MOVE.L    A0,ILLINSV           ; illegal instruction vector location

          LEA       PRIVIOLATION_TRAP,A0 ; privilege violation trap handler address
          MOVE.L    A0,PRIVIOV           ; privilege violation vector location
;
;   temporarily rely on Monitor's A-emulator trap vector for IUs
;
;          LEA       LINE1010_TRAP,A0    ; line 1010 emulator handler address
;          MOVE.L    A0,LINE10V

          LEA       LINE1111_TRAP,A0     ; line 1111 emulator handler address
          MOVE.L    A0,LINE11V

          LEA       SPURINTR_TRAP,A0     ; spurious interrupt handler address
          MOVE.L    A0,SPURINV


        ;level1 int and level2 int are initialized by hardware interface routines
        ;  (Rick Meyers') and execute within these routines while the OS is
        ; running.

;         LEA       LVL1INT,A0           ; interrupt level 1 handler address
;         MOVE.L    A0,INT1V             ; interrupt level 1 vector

;         LEA       LVL2INT,A0           ; interrupt level 2 handler address
;         MOVE.L    A0,INT2V             ; interrupt level 2 vector

          LEA       LVL3INT,A0           ; interrupt level 3 handler address
          MOVE.L    A0,INT3V             ; interrupt level 3 vector

          LEA       LVL4INT,A0           ; interrupt level 4 handler address
          MOVE.L    A0,INT4V             ; interrupt level 4 vector

          LEA       LVL5INT,A0           ; interrupt level 5 handler address
          MOVE.L    A0,INT5V             ; interrupt level 5 vector

          LEA       RSINT,A0             ; interrupt level 6 handler address
          MOVE.L    A0,INT6V             ; interrupt level 6 vector

          LEA       DIVZERO_TRAP,A0      ; init trap vector
          MOVE.L    A0,TRAPDV            ; zero divide
          LEA       VALUEOOB_TRAP,A0     ; chk inst
          MOVE.L    A0,TRAPCV
          LEA       OVERFLOW_TRAP,A0     ; trapv inst
          MOVE.L    A0,TRAPOV

          lea       trapEhandler,a0      ; our trap E handler
          move.l    a0,trapev            ; install it

;replace any '-1', signifying uninitialized ptr, to handler for branches through
;   uninitialized cells in the low-core vector table  (0 thru $FC):
          move      #63,d0               ;check 64 entries
          suba.l    a0,a0                ;starting at 0
          lea       unexp_trap,a2

do_more   move.l    (a0),d1
          cmp.l     #-1,d1
          bne.s     is_inited            ;skip re-init if already done
          move.l    a2,(a0)
is_inited addq      #4,a0
          dbra      d0,do_more

          JMP       (A1)                 ; return
          .END


ÿ