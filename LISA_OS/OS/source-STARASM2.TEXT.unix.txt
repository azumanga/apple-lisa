;Copyright 1983, 1984, Apple Computer Inc.

;File source/starasm2; startup assembler, for 'init' segment

        .INCLUDE SOURCE/PASCALDEFS.TEXT

        .proc   reg_to_mapped
       ;*************************************************************)
       ;*  PROCEDURE REG_TO_MAPPED(b_sg, e_us : absptr);
       ;*
       ;* Description:
       ;*    Complete the language initializations for pascal,
       ;*       especially in converting unmapped pointers in
       ;*       registers to the mapped equivalent.  (The unmapped
       ;*       values haven't caused any trouble since the refs
       ;*       were performed through the linearly mapped part
       ;*       of the address space in the low numbered mmus.)
       ;*
       ;*    On entry:
       ;*      1) Program runs on supervisor stack, although in
       ;*            the user stack area.
       ;*
       ;*    On exit:
       ;*      1) Program runs on user stack, in the user stack area
       ;*
       ;*    The change in mapping requires that registers a5,a6,
       ;*      a7, the parent procedure's link register,
       ;*      found via the current link register,
       ;*      and the newly initialized supervisor stack pointer
       ;*      ALL have to be changed from unmapped values to
       ;*      offsets with their respective segments.  The change-
       ;*      over to this mapped form involves subtracting off
       ;*      the base address of the segment they live in, and
       ;*      adding in the address of byte 0 of their mmu segment.
       ;*
       ;*   (This procedure's return adr doesn't have to be patched,
       ;*      already being in its mapped form.)
       ;*
       ;*    Addresses in the user stack segment are handled
       ;*      slightly differently, in that their stack extends
       ;*      in the negative going direction from a 'base' at
       ;*      the end of the segment.  Note that the arithmetic
       ;*      in subtracting from an mmu's base address does NOT
       ;*      sign-extend into the Mmu index part of the address.
       ;*
       ;* Input Parameters:
       ;*    B_sg - Base address of the sysglobal segment.
       ;*    E_us - Base address of the op's (user) stack segment.
       ;*
       ;*************************************************************)

;size to index from one mmu's address base to the next
next_mmu        equ     $20000

;address of zeroth byte of each of the interesting mmu segments:
bot_superstk    equ     superstkmmu*next_mmu

bot_sysglob     equ     sysglobmmu*next_mmu
bot_stackmmu    equ     stackmmu*next_mmu

nosignextend    equ     next_mmu;adjust to mmu base to avoid sign extension
change2user     equ     $DFFF   ;when and-ed to sr, changes to user stack

;get parameters to working registers:
        move.l  (sp)+,a0        ;a0 := this proc's return adr
        move.l  (sp)+,d1        ;d1 := e_us
        move.l  (sp)+,d2        ;d2 := b_sg

;Change e_us into a value, which, when added to a address pointing
; into the user stack area, forms the mapped equivalent of that address.
; Call this value STKADJ, calculated by:  bot_stackmmu + nosignextend - e_us
        neg.l   d1              ;d1 := stackadj
        addi.l  #bot_stackmmu,d1
        addi.l  #nosignextend,d1

; adjust a5/a6, and user and supervisor stack pointers:
        sub.l   d2,a5           ;a5 := a5 - b_sg + bot_sysglob
        add.l   #bot_sysglob,a5

        add.l   d1,a6           ;a6 := a6 + stackadj

        add.l   d1,a7           ;user stack := a7 + stackadj
        move.l  a7,usp

        move.l  #bot_superstk,a7 ;supervisor stack is inited to empty
        adda.l  #nosignextend,a7

        andi    #change2user,SR ;change to user state:

;finally, update the parent procedure's link register contents
        add.l   d1,(a6)         ;patch parent's link register,
                                ;  by adding stkadj.

        jmp     (a0)            ;thats all



        .def    INIT_READ_PM
       ;*************************************************************)
       ;* PROCEDURE INIT_READ_PM(pm_image : absptr);
       ;*
       ;* Description:
       ;*    Read parameter memory into the buffer pointed to by pm_image.
       ;*
       ;*************************************************************)
init_read_pm

par_mem_ptr     equ     $fcc181 ;its the reeeeeal thing...
transfer_count  equ     15      ;counter for reading in clumps(-1) of PM

        move.l  (SP)+,a0        ;get the return address
        move.l  (SP)+,a1        ;get the buf adr
        move.l  #par_mem_ptr,a2
        move    #transfer_count,d0
tran_loop
        movep.l 0(a2),d1        ;get a clump of peripheral data
        move.l  d1,(a1)+        ;store it away
        addq    #8,a2
        dbra    d0,tran_loop    ;until transfer_count clumps are done

        jmp     (a0)            ;thats all folks



         .def    INIT_WRITE_PM
       ;*************************************************************)
       ;* PROCEDURE INIT_WRITE_PM(pm_image : absptr);
       ;*
       ;* Description:
       ;*    Write parameter memory from the buffer pointed to by pm_image.
       ;*
       ;*************************************************************)
init_write_pm
        move.l  (SP)+,a0        ;get the return address
        move.l  (SP)+,a1        ;get the buf adr
        move.l  #par_mem_ptr,a2
        move    #transfer_count,d0
tran2_loop
        move.l  (a1)+,d1        ;get a clump of data
        movep.l d1,0(a2)        ;store it away
        addq    #8,a2
        dbra    d0,tran2_loop   ;until transfer_count clumps are done

        jmp     (a0)            ;thats all folks



        .def verify_cksum
       ;*************************************************************)
       ;* PROCEDURE VERIFY_CKSUM(pm_adr : absptr; var cksum : integer;
       ;*
       ;* Description:
       ;*    Calculate the checksum of a region that holds a parameter
       ;*       memory (pm) image.
       ;*
       ;* Input Parameter:
       ;*    Pm_adr - the address of the pm image.
       ;*
       ;* Output Parameter:
       ;*    cksum - the expected value of the checksum field.
       ;*
       ;* Note:
       ;*    This routine is slightly different than CALC_CKSUM, in startasm.
       ;*
       ;*************************************************************)
verify_cksum

; stack offsets:  0 - the return address
;                 4 - the address of the checksum
;                 8 - the address of the pm image

; the prom does the real work, it expects:
;               a0 - the address of the pm image
;               d0 - the size-1 (!!!!) of the pm image
;               d1 - 0 if pm image is in memory, or
;                    1 if pm image is in shared memory

prom_cksum      equ     $fe00bc ;address of prom utility
pm_size         equ     32      ;size of pm image (in words)

        move.l  8(SP),a0        ;pass adr of pm image
        move    #pm_size-1,d0   ;pass size-1
        clr     d1              ;use MEMORY image of pm

        jsr     prom_cksum

        move.l  4(SP),a0        ;return calculated cksum
        move    d3,(a0)
        move.l  (SP)+,a0        ;clear stack of parms and return
        addq    #8,SP
        jmp     (a0)


        .def ENTER_LOADER
       ;***********************************
       ;*
       ;*  procedure ENTER_LOADER(var params: fake_parms; a5: longint);
       ;*
       ;*  Description:
       ;*     Bridge a procedure call across PROGRAM boundaries, from the OS
       ;*     to the Loader,  And back!  (Read about it in the Nat'l Inquirer)
       ;*
       ;*     The transition includes getting onto the supervisor stack, BUT
       ;*     IN THE USER STACK'S REGION, while executing loader code.
       ;*
       ;*  Output Parameter (To the loader):
       ;*     D1 - is a pointer to the call description.
       ;*
       ;***********************************
enter_loader
     move.l    (SP)+,a2       ;get return address
     move.l    (SP)+,d1       ;get loader's a5 value
     move.l    (SP)+,d2       ;pass the parameter block pointer to the loader
     movem.l   a2-a6/d4-d7,-(SP) ;save OS program registers (and our return adr)
     move.l    d1,a5          ;loader gets its global variables via its A5
     move      #$2700,d0      ;Get into supervisor mode:
     lea       get_back,a0
     trap      #7             ; (stuffs d0 in sr, before returning, via A0)
get_back
     move.l    a7,d0          ;get real SR stack pointer
     move.l    usp,a7         ;switch to user stack region (but in supervisor mode)
     move.l    d0,-(SP)       ;save real super stack ptr onto (user!) stack

     move.l    loader_link,a0 ;address of loader's driver entrypoint
     jsr       (a0)           ;do the driver call

     move.l    (SP)+,d0       ;get legit sr back
     move.l    d0,a7
     move      #$700,sr      ;back to user state

     movem.l   (SP)+,a2-a6/d4-d7 ;restore registers to OS program's values
     jmp       (a2)           ;return


        .END
ÿ