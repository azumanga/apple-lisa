;Copyright 1983, 1984, Apple Computer Inc.

;File: source/cdconfigasm;


        .proc   cdasm
;********************
;* DATA STRUCTURES (FOR PACK/CRAK, below) :
;*
;* type
;*    PMConfigEntry = record {unpacked form of pmconfigentry}
;*                 slot: 0..15;
;*                 chan: 0..7;
;*                 dev:  0..31;
;*                 nExtWords:0..3;
;*                 IDsize: 0..1;
;*                 driverID:   longint; {but really, 9 to 17 bits worth}
;*                 ExtWords: array [1..3] of integer; {optional field}
;*              end; {of pmconfigentry}
;*  Notes:
;*     The format of a PM entry WHILE STILL STORED IN PARAMETER MEMORY
;*     is a packed form of 'pmconfigentry', but with the IDsize fiEld mOveD
;*     in front of the 'dev' field, for easier pack/crak-ing.
;*
;********************



     .def      pack_pm
;********************
;* procedure PACK_PM(var sparse: pmconfigentry;
;*                       dense: absptr);
;* Description:
;*   Pack record format into PM.
;*
;* Notes:
;*   Only as much of the extension is copied as exists.
;*
;*   The fields are not range checked as they are packed.
;*
;********************

packbyte                 ;local proc to 'stash the next byte' for pack
     ror.w     #8,d1     ;position next batch
     move.b    d1,(a1)+  ;shoot it out
     rts

pack_pm
     move.l    (SP)+,a0  ;get return address
     move.l    (SP)+,a1  ;get dense ptr
     move.l    (SP)+,a2  ;get sparse ptr
     move.b    (a2)+,d0  ;compose and stash slot/chan/idsize
     lsl.b     #4,d0     ; make room for chan/idsize
     move.b    (a2)+,d1  ; chan is got,
     lsl.b     #1,d1     ;         aligned,
     or.b      d1,d0     ;         joined with slot);
     move.b    2(a2),d3  ; id size is got (already aligned)
     or.b      d3,d0     ;  (and saved in d3) and joined.
     move.b    d0,(a1)+
     move.b    (a2)+,d0  ;compose dev/exten/first ID bit:
     lsl.b     #2,d0     ;  make room for exten
     clr       d2        ; initialize count register
     move.b    (a2)+,d2  ;  (save exten size in d2)
     addq      #2,a2     ;  (skip idsize and pad part of record)
     or.b      d2,d0
     lsl.b     #1,d0     ;  make room for high bit of id
     move.l    (a2)+,d1  ;  (d1 gets id, 9 to 17 bits worth)
     move.b    d3,d3     ;  long or short?
     bne.s     pack_long
;is short format:
     lsl.l     #8,d1     ;  align id AS IF in long format
pack_long
     btst      #16,d1
     beq.s     is_zero   ;  ('lsl.l' has already cleared the low bit)
     bset      #0,d0     ;  reflect highest ID bit (of EITHER format)
is_zero
     move.b    d0,(a1)+  ;stash (FINALLY) composed dev/exten/etc.
     bsr.s     packbyte  ;stash 'first' byte of ID
     move.b    d3,d3     ;long or short?
     beq.s     pack_short
;in long format:
     bsr.s     packbyte  ;stash rest of (long) id
pack_short
     move      d2,d2     ;transfer ONLY exten portion, ignoring rest
     beq.s     @2        ;check for NO extension
     subq      #1,d2     ;convert counter to dbra format
@1   move      (a2)+,d1
     bsr.s     packbyte
     bsr.s     packbyte
     dbra      d2,@1
@2   jmp       (a0)      ;that's all folks


     .def      crak_pm
;********************
;*
;* procedure crak_PM(    dense: absptr;
;*                   var sparse: pmconfigentry);
;* Description:
;*   Unpack PM into record format.
;*
;* Note:
;*    Only as much of the extension is copied as exists; The remainder
;*    is zero filled.
;*
;********************

crakbyte                 ;local proc to 'fetch the next byte' for crak
     lsl.l     #8,d1     ;make space
     move.b    (a2)+,d1  ;fill it
     rts

crak_pm
     move.l    (SP)+,a0  ;get return address
     move.l    (SP)+,a1  ;get sparse ptr
     move.l    (SP)+,a2  ;get dense ptr
     move.b    (a2)+,d3  ;crack slot/chan/idsize:
     move.b    d3,d0     ; (KEEP copy of packed binary in d3)
     lsr.b     #4,d0
     move.b    d0,(a1)+  ;return slot
     move.b    d3,d0
     lsr.b     #1,d0
     and.b     #7,d0
     move.b    d0,(a1)+  ;return chan
     and.b     #1,d3     ;d3 now holds idsize
     move.b    (a2),d0   ;crack dev
     lsr.b     #3,d0
     move.b    d0,(a1)+  ;return dev
     move.b    (a2),d0   ;crack exten (and keep it in d2)
     lsr.b     #1,d0
     and.w     #3,d0
     move.b    d0,(a1)+  ;return extension size
     move.b    d3,(a1)+  ;return idsize
     clr.b     (a1)+     ;clear 'pad' portion of record
     clr.l     d1        ;crack id
     bsr.s     crakbyte
     and.b     #1,d1     ;pick out first bit of ID#
     bsr.s     crakbyte
     move.b    d3,d3
     beq.s     crak_short
     bsr.s     crakbyte  ;handle long format byte
crak_short
     move.l    d1,(a1)+  ;return id
     move      d0,d2     ;transfer exten portion, saving exten in d2
     beq.s     @2        ;check for NO extension
     subq      #1,d2     ;convert counter to dbra format
@1   bsr.s     crakbyte
     bsr.s     crakbyte
     move      d1,(a1)+
     dbra      d2,@1
@2   move      d0,d2     ;restore orig count to d2
     move      #3,d0     ;zero fill the rest of the exten field
     sub       d2,d0     ;d0 := words to be zeroed
     beq.s     @4        ;done if none to do
     subq      #1,d0     ;convert to dbra format
@3   clr.w     (a1)+
     dbra      d0,@3
@4   jmp       (a0)      ;that's all folks


     .end
ÿ