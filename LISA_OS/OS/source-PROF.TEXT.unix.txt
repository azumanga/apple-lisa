      (*  Copyright 1983, 1984, Apple Computer Inc. *)

{file source/prof}

UNIT lddrivers;         {profile version}

INTERFACE

USES
    (*$U object/ldutil.obj*)              ldutil;

{here is the standard device interface for all loader devices:}

procedure DEVINIT(blk0, drv : integer);

procedure READ_BLOCK(var error         :integer;
                         drive         :integer;
                         block         :longint;
                     var buffer,header :integer);

procedure READ_SEQ(var error         :integer;
                       drive         :integer;
                       block         :longint;
                       pages         :integer;
                   var buffer,header :integer);

IMPLEMENTATION


procedure ASM_READ_BLOCK(var err       :integer;
                             dri       :integer;
                             blo       :longint;
                         var buf,hdr :integer);
external; {see source/ldtwig for the prolog}



procedure DEVINIT{blk0, drv: integer};
begin   {no initialization needed for profile}
end; {of devinit}



procedure READ_BLOCK{var error        :integer;
                         drive        :integer;
                         block        :longint;
                     var buffer,header:integer};
begin   {see source/ldtwig for the prolog}
   ASM_READ_BLOCK(error, drive, block, buffer, header);
end; {of read_block}



procedure READ_SEQ{var error         :integer;
                       drive         :integer;
                       block         :longint;
                       pages         :integer;
                   var buffer,header :integer};
const
   bootdevadr = $1b2;{Location showing where were booting from, ie, when the value}
   paraboot = 2;     { is 'paraboot', were booting from the parallel port.}
   pagesize = 512;
var
   destination: ^integer;
   byteoffset, blockoffset : integer;
begin
   destination := pointer(bootdevadr);
   if (destination^=paraboot) then
      begin {read data one block at a time, achieving 9-1 interleave}
         byteoffset := pagesize;
         blockoffset := 1;
         destination := @buffer;
      end
   else     {read data BACKWARDS, trickily achieving 7-1 interleave}
      begin
         byteoffset := -pagesize;
         blockoffset := -1;
         destination := pointer(ord4(@buffer) + (pages-1) * pagesize );
         block := block + pages - 1;
      end;
   while pages>0 do
      begin
         ASM_READ_BLOCK(error, drive, block, destination^, header);
         if error<>0 then EXIT(read_seq);
         destination := pointer(ord4(destination) + byteoffset);
         block := block + blockoffset;
         pages := pages - 1;
      end;
end; {of read_seq}


end. {of unit lddrivers}
ÿ