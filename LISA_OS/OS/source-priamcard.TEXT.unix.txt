UNIT PRIAMCARD;


      (*  By Wendell Henry  11/11/83                                            *)
      (*  Copyright 1983, 1984, Apple Computer Inc. *)
      (*                                                                        *)
      (*  A device specific driver for the Priam Interface Card.                *)
      (*  This driver will interface to the E and T controller.                 *)

INTERFACE

  USES
      (*$Uobject/driverdefs.obj*)
      driverdefs,
      (*$Uobject/driversubs.obj*)
      driversubs;

   function PCARDDRIVER (parameters: param_ptr): integer;

IMPLEMENTATION

  (*$R-*)                        (*rangecheck off *)
  (*$SETC PriamDebug=FALSE*)     (*Debug Mode *)

  CONST
    (* error responses *)
    nospace   = 610;     (*no room in sysglobal*)
    badcode   = 656;     (*invalid function code*)
    timeout   = 666;     (*operation timeout   *)
    initerr   = 1840;    (*error from controller*)

    (* controller commands - same as offset into driver's command jump table*)
    initcont  = 0;         (* initialize controller     *)

  TYPE
    hbyte = -128..127;

    inp_rec = record                  (*input parameters to driver *)
                parm0: hbyte;         (*parameter 0   *)
                parm1: hbyte;
                parm2: hbyte;
                parm3: hbyte;
                parm4: hbyte;
                parm5: hbyte;
              end;
    out_rec = record                  (*output parameters from driver*)
                result0: hbyte;       (*result 0 - transaction status*)
                result1: hbyte;       (*additional result bytes      *)
                result2: hbyte;
                result3: hbyte;
                result4: hbyte;
                result5: hbyte;
              end;

    ext_drive_cb = record    (*extension to drive_cb *)
              (**)   hwbase: longint;      (* base address in I/O space *)
              (**)   hwparity: longint;    (* base address of parity flag *)
              (**)   device: hbyte;        (* device number*)
              (**)   command: hbyte;       (* command to driver *)
              (**)   response:integer;     (* response command from driver*)
              (**)   input: inp_rec;       (* input parms to driver *)
              (**)   output:out_rec;       (* result parms from driver *)
              (**)   pe: hbyte;            (* parity state of I/O transfer*)
              (**)   state: hbyte;         (* current state of driver *)
              (**)   retries: integer;     (* # retries this request *)
              (**)   tot_retries: integer; (* Total # retries this drive *)
              (**)   error: integer;       (* Error from sector transfer *)
              (**)   nxfercnt: integer;    (* Next blk xfer count*)
              (**)   cxfercnt: integer;    (* Current blk xfer count*)
              (**)   ctrltype: hbyte;      (* Controller type*)
             end;

   ptr_ext_drive_cb = ^ext_drive_cb;

   cardcb = record  (* primary control block for controller driver*)
              config_addr: ptrdevrec; (*This much must look like a *)
              ext_ptr: absptr;        (*normal device control block*)
              devptrs: array[0..3] of ptrdevrec;
            end;

   procedure PCARDASM(cb_ptr: absptr); external;

   function PCARDDRIVER(* parameters: param_ptr): integer *);
     label 100;

     var
       extdrivecb_ptr: ptr_ext_drive_cb;
       aux_configptr: ptrdevrec;
       drivecb_ptr: hdiskcb_ptr;
       extdevrec_ptr: ^ext_diskconfig;
       newextdrivecb: absptr;
       cardcb_ptr: ^cardcb;
       i: integer;
       ptrsysg: ^longint;

     (*$IFC PriamDebug*)
     procedure D_STATUS;
       (* Display result registers from drive *)
       begin
         if TRACE(DD,10) then
           begin
             with extdrivecb_ptr^.output do
               begin
                 writeln('R0= ',result0,' R1= ',result1);
                 writeln('R2= ',result2,' R3= ',result3);
                 writeln('R4= ',result4,' R5= ',result5);
               end;
           end;
       end; (*D_STATUS*)
     (*$ENDC*)

     begin
       with parameters^, configptr^ do
       case fnctn_code of

        (*NOTE: interrupts are handled in the assembly language portion of this *)
        (*      driver.                                                         *)

        dinit: (* first level of device initialization*)
          begin
            if cb_addr <> 0 then
              begin (*already initialized*)
                pcarddriver:=0;
              end
             else
              begin
                ptrsysg:=pointer(bsysglob);
                pcarddriver:=nospace; (*insufficient resources*)
                if GETSPACE(sizeof(cardcb),ptrsysg^,cb_addr) then
                  if GETSPACE(sizeof(ext_drive_cb),ptrsysg^,newextdrivecb) then
                    begin
                      cardcb_ptr:=pointer(cb_addr);
                      extdrivecb_ptr:=pointer(newextdrivecb);
                      with cardcb_ptr^ do
                        begin
                          config_addr:=configptr;
                          ext_ptr:=newextdrivecb;
                          for i:=0 to 3 do devptrs[i]:=nil;
                        end;
                      with extdrivecb_ptr^ do
                        begin
                          hwparity:= ord4(iospacemmu)*$20000 +
                                     ord4($4000)*slot_no;(*lo select space*)
                          hwbase:= hwparity + $2000; (*hi select space *)
                          command:=initcont;
                          PCARDASM(ord(cardcb_ptr)); (*initialize controller*)
                          pcarddriver:=response;
                          if response <> 0 then
                            begin
                              (*$IFC PriamDebug*)
                              if TRACE(DD,10) then
                                begin
                                  writeln('Error initializing Priam Controller');
                                  D_STATUS;
                                end;
                              (*$ENDC*)
                              goto 100; (* go release space *)
                            end;
                        end;(*with*)
                    end;
              end;
          end; (*dinit*)

        ddown:   (* first level of down a device *)
          begin
            pcarddriver:=0;
100:        cardcb_ptr:=pointer(cb_addr);
            if cardcb_ptr <> nil then
              with cardcb_ptr^ do
                begin
                  ptrsysg:=pointer(bsysglob);
                  RELSPACE(ext_ptr,ptrsysg^); (*release cb extension *)
                  RELSPACE(ord(cardcb_ptr),ptrsysg^); (*release cb*)
                  cb_addr:=ord(nil);
                end;
          end;(*ddown*)

        dattach: (* attach device to card*)
          begin
            cardcb_ptr:=pointer(cb_addr);
            with cardcb_ptr^ do
              begin
                i:=0;
                while i < 4 do
                  if devptrs[i] <> nil
                    then i:=i+1
                    else
                     begin
                       devptrs[i]:=n_configptr;
                       i:=5;
                     end;
              end;(*with cardcb_ptr*)
            pcarddriver:=0;
          end;(*dattach*)

        dunattach: (* unattach device from card*)
          begin
            cardcb_ptr:=pointer(cb_addr);
            with cardcb_ptr^ do
              begin
                i:=0;
                still_inuse:=false;
                while i <= 3 do
                  begin
                    if devptrs[i] = o_configptr
                      then devptrs[i]:=nil
                      else if (devptrs[i] <> nil) then still_inuse:=true;
                    i:=i+1;
                  end;
              end;(*with cardcb_ptr*)
            pcarddriver:=0;
          end;(*dunattach*)

        otherwise pcarddriver:=badcode;
       end;(*case fnctn_code*)
     end;(*PCARDDRIVER*)
end.
ÿ