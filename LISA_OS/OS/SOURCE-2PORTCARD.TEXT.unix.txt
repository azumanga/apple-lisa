
   UNIT FOUR_PORT;  (*FOUR PORT CARD DRIVER*)

      (*  By Dave Offen *)
      (*  Copyright 1983, 1984, Apple Computer Inc. *)

   INTERFACE

    USES
      (*$U object/driverdefs.obj*)
        driverdefs,
      (*$U object/driversubs.obj*)
        driversubs;

    function DRIVER (parameters: param_ptr): integer;

  IMPLEMENTATION
    (*$R-*) (*rangecheck off*)

  function DRIVER; (*parameters: param_ptr): integer*)
       (*************************************************************)
       (*                                                           *)
       (* Description:  Four port card interrupt dispatcher driver  *)
       (*                                                           *)
       (* Input Parameters:                                         *)
       (*                                                           *)
       (* Output Parameters:                                        *)
       (*                                                           *)
       (* Side Effects:                                             *)
       (*                                                           *)
       (* Special Conditions of Use:                                *)
       (*                                                           *)
       (* Error Conditions:                                         *)
       (*                                                           *)
       (*************************************************************)

  TYPE
    ptrint1 = ^int1;
    slotcb = record
               ports: array[0..2] of ptrdevrec;
               chan0ifr: ptrint1             (*pointer to chan 0's IFR register*)
             end;

  VAR
    err: integer;
    ifrptr: ptrint1;
    port_ptr: ^slotcb;
    indexptr: ptrdevrec;
    newspace: longint;
    ptrsysg: ^longint;
    prevints: intson_type;

  begin
    with parameters^ do
      begin
        port_ptr := pointer (configptr^.cb_addr);
        case fnctn_code of
        dinterrupt:
          begin
            WITH port_ptr^ do
            begin
              ifrptr := chan0ifr; (*point to first channel's IFR register

              (* find interrupting channel *)

              if ifrptr^ < 0 then
                indexptr := ports[0] (*channel 0 interrupt*)
              else
              begin
                ifrptr := pointer (ord(ifrptr) + $800); (*address of next channel*)
                if ifrptr^ < 0 then
                  indexptr := ports[1] (*channel 1 interrupt*)
                else
                begin
                  ifrptr := pointer(ord(ifrptr) + $800);
                  if ifrptr^ < 0 then
                    indexptr := ports[2]
                  else
                    EXIT (DRIVER)
                end;
              end (*channel 3 can't interrupt!*)
            end;

            CALLDRIVER (err, indexptr, parameters);
            if err = 605 then
            begin (*interrupt for uninitialized or unattached device*)
              ifrptr := pointer (ord(ifrptr) + 8); (*point to IER*)
              ifrptr^ := $7F (*disable all ints*)
            end
          end; (*dinterrupt*)

        dinit: begin
          DRIVER := 0;
          ptrsysg := pointer (bsysglob);

          INTSOFF (slotints, prevints);
          if not GETSPACE (sizeof(slotcb), ptrsysg^, newspace) then
            DRIVER := 610
          else
          begin
            (* Initialize ptr to control block in configinfo *)
            configptr^.cb_addr:=newspace;
            port_ptr := pointer (newspace);
            WITH port_ptr^ do
              begin
                ports[0] := nil;
                ports[1] := nil;
                ports[2] := nil;
                case configptr^.slot_no of
                  0: chan0ifr := pointer(iospacemmu*$20000 + $2069);
                  1: chan0ifr := pointer(iospacemmu*$20000 + $6069);
                  2: chan0ifr := pointer(iospacemmu*$20000 + $0A069);
                end;
              end;(*with*)
          end;
          INTSON (prevints)
        end; (*dinit*)

        ddown: begin
          INTSOFF (slotints, prevints);
          ptrsysg := pointer (bsysglob);
          RELSPACE (ord(port_ptr), ptrsysg^);
          configptr^.cb_addr := ord(nil);
          INTSON (prevints);
          DRIVER := 0
        end; (*ddown*)

        dattach: begin (*attach a device to this card*)
            port_ptr^.ports[n_configptr^.iochannel]:=n_configptr;
            DRIVER := 0
        end; (*dattach*)

        dunattach:
          WITH port_ptr^ do
          begin
            ports[o_configptr^.iochannel] := nil;
            still_inuse := ( (ports[0]<>nil) or (ports[1]<>nil) or (ports[2]<>nil) )
          end;

        otherwise
          DRIVER := 656;

        end (*case*)
      end;(*with*)
  end; (*DRIVER*)
end.
ÿ