;
;   Assemby language routines to support certain debugging features used by the
;   operating system.
;
;   Copyright 1983, 1984, Apple Computer Inc.
;
          .PROC    OSQUIT                   ; entry declaration for OSQuit
          .DEF     UBR                      ; entry declaration for UBR command
          .DEF     CLEARBPS                 ; entry declaration for ClearBPs
          .DEF     PROCS                    ; entry declaration for Procs
          .REF     USERBREA                 ; external dec for UserBreak
          .REF     OSQ                      ; external dec for OSQ
          .REF     CLR_BP                   ; external def for Clr_BP
          .REF     PROCDISP                 ; external dec for ProcDisplay
;
;
;   general equates, constants, etc.
;
          .INCLUDE source/pascaldefs.text   ; EQUs for Pascal structures
;
;
;  procedure OSQuit;
;    { procedure to be called from lisaBug to force File System to be shut down
;      and the system to be re-booted.  This is only to be used when no other
;      form of recovery is available. }
;
          LINK     A6,#-4                   ; set stack frame (1 local variable)
          MOVEA.L  SGLOBAL,A5               ; get ptr to sysglobal in A5
          MOVEA.L  SYSA5(A5),A5             ; set system A5
          JSR      OSQ                      ; call OSQ to do the work
          MOVE.B   #1,$F                    ; get ready to reset machine
          MOVE.L   D0,$F                    ; resets machine - double address err
          UNLK     A6                       ; remove stack frame
          RTS                               ; return
          .ASCII   'OSQUIT  '               ; proc name so lisaBug can find it
;
;
;  procedure CLEARBPS;
;    { procedure called from Expire to clear all break points set by the
;      terminating process.  This procedure is required because lisaBug's routine
;      Clr_BP must be called from the Supervisor's stack.  Note that after this
;      call completes, the lisaBug procedure Create_BP must also be called to
;      remove the break points from the break point table.  A single call has not
;      been provided. }
;
CLEARBPS  LINK     A6,#0                    ; set stack frame
          MOVEM.L  D0-D7/A0-A5,-(SP)        ; save A5-A0 & D7-D0 on the stack
          MOVE     SR,D0                    ; get current SR in D0
          MOVE     D0,D7                    ; and another copy in D7
          ORI      #$2000,D0                ; set Supervisor mode in D0
          LEA      @1,A0                    ; get return address in A0 for Trap 7
          TRAP     #7                       ; trap to set up Super state
@1        MOVE.L   8(A6),-(SP)              ; push global id onto stack
          JSR      CLR_BP                   ; call Clr_BP
          MOVE     D7,D0                    ; put old SR back in D0
          LEA      @2,A0                    ; get return address in A0 for Trap 7
          TRAP     #7                       ; trap restore old SR
@2        MOVEM.L  (SP)+,D0-D7/A0-A5        ; restore registers
          UNLK     A6                       ; remove stack frame
          MOVEA.L  (SP)+,A0                 ; get return address in A0
          ADDQ     #4,SP                    ; pop parameter
          JMP      (A0)                     ; return
          .ASCII   'CLEARBPS'               ; proc name so lisaBug can find it
;
;
;  procedure UBR;
;    { procedure to be called from lisaBug to force a break point to be set at
;      the 1st instruction in user code that the current process will execute
;      when it leaves the OS. }
;
UBR       LINK     A6,#0                    ; set stack frame
          MOVEM.L  D0-D7/A0-A5,-(SP)        ; save A5-A0 & D7-D0 on the stack
          MOVEA.L  SGLOBAL,A5               ; get ptr to sysglobal in A5
          MOVEA.L  SYSA5(A5),A5             ; set system A5
          MOVE     SR,D0                    ; get current SR in D0
          MOVE     D0,D7                    ; and another copy in D7
          ORI      #$2000,D0                ; set Supervisor mode in D0
          LEA      @1,A0                    ; get return address in A0 for Trap 7
          TRAP     #7                       ; trap to set up Super state
@1        JSR      USERBREA                 ; call UserBreak
          MOVE     D7,D0                    ; put old SR back in D0
          LEA      @2,A0                    ; get return address in A0 for Trap 7
          TRAP     #7                       ; trap restore old SR
@2        MOVEM.L  (SP)+,D0-D7/A0-A5        ; restore registers
          UNLK     A6                       ; remove stack frame
          RTS                               ; return/continue
          .ASCII   'UBR     '               ; proc name so lisaBug can find it
;
;
;  procedure Procs;
;    { procedure used from lisaBug to display info about the current processes
;      in the system. }
;
PROCS     LINK     A6,#0                    ; set stack frame
          MOVEM.L  D0-D7/A0-A5,-(SP)        ; save A5-A0 & D7-D0 on the stack
          MOVEA.L  SGLOBAL,A5               ; get ptr to sysglobal in A5
          MOVEA.L  SYSA5(A5),A5             ; set system A5
          JSR      PROCDISP                 ; call ProcDisplay
          MOVEM.L  (SP)+,D0-D7/A0-A5        ; restore registers
          UNLK     A6                       ; remove stack frame
          RTS                               ; return
          .ASCII   'PROCS   '               ; proc name so lisaBug can find it
;
          .END

ÿ