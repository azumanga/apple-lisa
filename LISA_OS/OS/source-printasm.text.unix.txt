        ;PRINTASM:  PRINTER DRIVER ASSEMBLY LANGUAGE
        ;           for parallel port, 2-port card and 4-port card

;       By Dave Offen.
;       Copyright 1983, 1984, Apple Computer Inc.

;COPS VIA 6522 OFFSETS

VIA1BAS EQU     $FC0000+$0DC01

IRB1    EQU     0
ORB1    EQU     0
DDRB1   EQU     4

;PARALLEL PORT VIA 6522 BASE ADDRESS

VIA2BAS EQU     $FC0000+$0D801

;PARALLEL AND N-PORT VIA 6522 OFFSETS

IRB     EQU     0
ORB     EQU     0
ORA     EQU     8
DDRB    EQU     $10
DDRA    EQU     $18
T2CL    EQU     $40
T2CH    EQU     $48
ACR     EQU     $58
PCR     EQU     $60
IFR     EQU     $68
IER     EQU     $70

;ERROR TYPES

SNEXT   EQU     0       ;SEND NEXT CHARACTER NOW
IGNOR   EQU     1       ;IGNORE FURTHER PROCESSING UNTIL NEXT INTERRUPT
ERRBASE EQU     690
PAPERERR EQU    ERRBASE+6 ;PRINTER OUT OF PAPER
SLVL0   EQU     ERRBASE+7 ;NEXT STEP IS TO SCHEDULE A PRIORITY 0 OUTPUT TASK
SELERR  EQU     ERRBASE+8 ;PRINTER OFF-LINE
TMOTERR EQU     ERRBASE+9 ;PRINTER TIMEOUT (5 OR 12.5 MINS)


         .PROC   PRINT_STATUS
        ;----------------------------------------------------------------------
        ;GET PRINTER INTERRUPT STATUS
        ;
        ;  FUNCTION PRINT_STATUS (VAR COUNTER: INTEGER; HWBASE: ABSPTR): INTEGER; EXTERNAL;
        ;
        ;       RETURN VALUES: IGNOR, PAPERERR, SLVL0, SELERR, TMOTERR

        MOVE.L  (SP)+,D2        ;D2 = RET-ADDR, A1 = HWBASE
        MOVE.L  (SP)+,A1
        MOVEQ   #$3B,D0
        AND.B   IFR(A1),D0      ;READ INTERRUPT FLAG REGISTER
        MOVE.B  D0,IFR(A1)      ;CLEAR INTERRUPT SOURCE
        MOVE.B  #$22,IER(A1)    ;DISABLE INTERRUPTS UNTIL FURTHER NOTICE
        MOVE.L  A1,A0           ;SELECT-LINE BIT BASE ADDR IN A0
        CMPA.L  #VIA2BAS,A0     ;IS THIS THE BUILT-IN PORT?
        BNE.S   @3
        MOVE.L  #VIA1BAS,A0     ;YES, REPLACE SELECT LINE TEST ADDR WITH COPS ADDR
@3      BTST    #5,IRB(A0)      ;LOOK AT SELECT LINE
        BNE.S   @4
        ADDQ    #4,SP
        MOVE    #SELERR,(SP)    ;PRINTER NOT ON-LINE
        MOVE.L  D2,A0
        JMP     (A0)            ;RETURN

@4      MOVE.L  (SP)+,A0        ;NOW SAFE TO LOAD ADDRESS OF COUNTER
        BTST    #0,IRB(A1)      ;NO PAPER?
        BEQ.S   @5
        MOVE    #PAPERERR,(SP)  ;SET OUT OF PAPER STATE
        MOVE.L  D2,A0
        JMP     (A0)            ;AND RETURN

@5      AND     #2,D0           ;CHECK IFR BIT FOR COMPLETION
        BNE.S   COMPLET         ;I/O COMPLETION
        SUBQ    #1,(A0)         ;DECREMENT COUNTER
        BGT.S   @6              ;OK IF STILL POSITIVE
        MOVE    #TMOTERR,(SP)   ;PRINTER TIMEOUT ERROR
        MOVE.L  D2,A0
        JMP     (A0)

@6      MOVE.B  #$FF,T2CH(A1)   ;NOT DONE, POLL @ MAX INTERVAL FOR CABLE DISCON
        MOVE.B  #$A2,IER(A1)    ;MAKE SURE INTERRUPTS ARE ENABLED
        MOVE    #IGNOR,(SP)     ;IGNORE THIS INTERRUPT
        MOVE.L  D2,A0
        JMP     (A0)            ;RETURN

COMPLET MOVE    #SLVL0,(SP)     ;OK TO RESUME XMITTING AT LEVEL 0
        MOVE.L  D2,A0
        JMP     (A0)            ;RETURN


        .PROC   PRINT_CHR
        ;----------------------------------------------------------------------
        ;PRINT ONE CHARACTER
        ;
        ;  FUNCTION PRINT_CHR (CHR: INT1; HSDELAY: INTEGER; HWBASE: ABSPTR):
        ;                       INTEGER; EXTERNAL;
        ;
        ;       RETURN VALUES: IGNOR, PAPERERR, SNEXT

        MOVE.L  (SP)+,A0        ;RETURN ADDR
        MOVE.L  (SP)+,A1        ;HWBASE
        MOVE    (SP)+,D1        ;HSDELAY (VALUE FOR T2CH TO DELAY 1 MS)
        MOVE.B  (SP)+,D0        ;CHAR
        BTST    #0,IRB(A1)      ;CHECK PAPER EMPTY
        BEQ.S   @1              ;SKIP IF OK
        MOVE    #PAPERERR,(SP)  ;SET OUT OF PAPER STATE
        JMP     (A0)            ;AND RETURN

@1      ANDI.B  #$F7,ORB(A1)    ;SET DIR=OUT
        MOVE.B  #$FF,DDRA(A1)   ;SET PORT A TO OUTPUT
        MOVE.B  D0,ORA(A1)      ;SEND THE CHARACTER
        BCLR    #1,PCR(A1)      ;TOGGLE STROBE MANUALLY (AUTO STROBE IS TOO SHORT)
        BSET    #1,PCR(A1)      ;RE-ASSERT STROBE TO NORMAL

        ;1-MS IS APPROX. 511 TICKS OF .5MHz CLOCK, OR 1279 TICKS OF 1.25 MHz CLOCK

        MOVE.B  D1,T2CH(A1)     ;START TIMER WITH 1 MS TIMEOUT (T2CL ALWAYS HAS FF)
@2      MOVE.B  IFR(A1),D0      ;WAIT FOR 2-MS TIMEOUT OR ACK, WHICHEVER COMES FIRST
        AND.B   #$22,D0
        BEQ.S   @2
        ORI.B   #$08,ORB(A1)    ;SET DIR=IN
        CLR.B   DDRA(A1)        ;SET PORT A TO INPUT
        AND.B   #$02,D0         ;GOT ACK YET?
        BEQ.S   @3
        MOVE    #SNEXT,(SP)     ;OK TO SEND NEXT CHARACTER
        JMP     (A0)            ; RETURN

@3      MOVE.B  #$FF,T2CH(A1)   ;NOT DONE, POLL EVERY .1 SEC FOR CABLE DISCON
        MOVE    #$2100,SR       ;DISABLE CLOCK INTERRUPTS UNTIL EXIT ALARM HANDLER
        MOVE.B  #$A2,IER(A1)    ;MAKE SURE INTERRUPTS ON 6522 ARE ENABLED
        MOVE    #IGNOR,(SP)     ;WAIT FOR NEXT INTERRUPT
        JMP     (A0)            ;RETURN


        .PROC   PRINT_INIT
        ;----------------------------------------------------------------------
        ;INITIALIZE PRINTER
        ;
        ;  PROCEDURE PRINT_INIT (BUILTIN: BOOLEAN; HWBASE: ABSPTR); EXTERNAL;
        ;
        ;    FOLLOW THIS CALL BY SENDING $11 TO PRINT_CHR.

        MOVE.L  (SP)+,D2        ;RETURN ADDRESS
        MOVE.L  (SP)+,A1        ;VIA_ADDR
        TST.B   (SP)+           ;IS THIS FOR BUILT-IN OR FOUR-PORT
        BEQ.S   N_PORT          ;INITIALIZING FOURPORT CARD?

        ;BUILT-IN PARALLEL PORT INITIALIZATION

        MOVE.L  #VIA1BAS,A0     ;POINT TO COPS VIA BASE ADDR
        ANDI.B  #$DF,DDRB1(A0)  ;BIT 5 IS INPUT
        ORI.B   #$80,DDRB1(A0)  ;BIT 7 IS OUTPUT
        ORI.B   #$80,ORB1(A0)   ;BIT 7 = 1, ALLOWING BIT 5 TO OPERATE AS INPUT
                                ;       INDICATING STATE OF SELECT LINE
        BRA.S   CNTIN

        ;2-PORT OR 4-PORT INITIALIZATION

N_PORT  ANDI.B  #$DF,DDRB(A1)   ;BIT 5 IS INPUT
        ORI.B   #$80,DDRB(A1)   ;BIT 7 IS OUTPUT
        ORI.B   #$80,ORB(A1)    ;BIT 7 = 1, ALLOWING BIT 5 TO OPERATE AS INPUT
CNTIN   MOVE.B  #$3B,IER(A1)    ;leave T1 & shift reg bits alone; disable others
        ANDI.B  #$7F,PCR(A1)
        ORI.B   #$6F,PCR(A1)    ;SET PCR TO $6F, WITHOUT CHANGING BIT #4
        ANDI.B  #$DC,ACR(A1)    ;CLEAR ALL EXCEPT TIMER 1 & SHIFT REG CONTR0L
        CLR.B   DDRA(A1)
        ANDI.B  #$FC,DDRB(A1)
        ORI.B   #$1C,DDRB(A1)
        ANDI.B  #$FB,ORB(A1)    ;ENABLE OUTPUT BUFFERS
        ORI.B   #$08,ORB(A1)    ;DIR = IN
        MOVE.B  #$FF,T2CL(A1)   ;SET LOW COUNTER LATCH TO MAX VAULE
        MOVE.B  #$3B,IFR(A1)    ;CLEAR INTERRUPTS
        MOVE.L  D2,A0
        JMP     (A0)            ;RETURN

        .END


ÿ