;Copyright 1983, 1984, Apple Computer Inc.

;File source/starasm3; startup assembler destined for the 'initcd' segment

        .INCLUDE SOURCE/PASCALDEFS.TEXT


        .proc    EXISTS_CARD
       ;*************************************************************)
       ;*
       ;* Function EXISTS_CARD(control_ptr : absptr) : boolean;
       ;*
       ;* Description:
       ;*   Returns whether anything exists at hardware address control_ptr
       ;*
       ;*************************************************************)
bus_err equ     8               ;adr of 68000 bus error vector.
        move.l  (SP)+,a0        ;get return address
        move.l  bus_err,a1      ;save real bus error handler
        lea     adr_bus_err,a2  ;substitute own (temporary) bus error handler.
        move.l  a2,bus_err
        move.l  (SP)+,a2        ;read from control logic location
        move.b  (a2),d0         ;read control logic

;NO bus error happenned!
        move.b  #1,(SP)         ;record that (some) card exists
        move.l  a1,bus_err      ;restore real bus error handler
        jmp     (a0)

adr_bus_err
        add     #8,SP           ;clear sup stack of misc-info
        move    (SP)+,d0        ;get SR
        add     #4,SP           ;clear sup stack of return address
        move    d0,SR           ;get back to user state
        clr.w   (SP)            ;no card exists, since bus err happenned
        move.l  a1,bus_err      ;restore real bus error handler
        jmp     (a0)



        .def    GET_ID_FIELD
       ;*************************************************************)
       ;*
       ;* Function GET_ID_FIELD(control_adr: absptr) : integer;
       ;*
       ;* Description:
       ;*   Return the contents of the card-type field of the low-select
       ;*   address space indicated by control_adr.
       ;*
       ;*************************************************************)
get_id_field

        move.l  (SP)+,a0        ;get return address
        move.l  (SP)+,a2        ;get control logic location
        move.b  (a2),d0         ;get type code from ALTERNATING bytes
        lsl.w   #8,d0
        move.b  2(a2),d0
        and     #$FFF,d0        ;return 12-bit result
        move    d0,(sp)
        jmp     (a0)



        .def calc_cksum
       ;*************************************************************)
       ;* PROCEDURE CALC_CKSUM(pm_adr : absptr; var cksum : integer;
       ;*
       ;* Description:
       ;*    Calculate the checksum of a region that holds a parameter
       ;*       memory (pm) image.
       ;*
       ;* Input Parameter:
       ;*    Pm_adr - the address of the pm image.
       ;*
       ;* Output Parameter:
       ;*    cksum - the expected value of the checksum field.
       ;*
       ;*************************************************************)
calc_cksum

; stack offsets:  0 - the return address
;                 4 - the address of the checksum
;                 8 - the address of the pm image

; the prom does the real work, it expects:
;               a0 - the address of the pm image
;               d0 - the size of the region to calculate the cksum
;               d1 - 0 if pm image is in memory, or
;                    1 if pm image is in shared memory

prom_cksum      equ     $fe00bc ;address of prom utility
pm_size         equ     30      ;size of pm image - 1
                                ;  AFTER discounting cksum field

        move.l  8(SP),a0        ;pass adr of pm image
        move    #pm_size,d0     ;pass size to prom
        clr     d1              ;use MEMORY image of pm

        jsr     prom_cksum

        move.l  4(SP),a0        ;return expected cksum
        neg     d3              ; (returns negative of accumulated sum)
        move    d3,(a0)
        move.l  (SP)+,a0        ;clear stack of parms and return
        addq    #8,SP
        jmp     (a0)



        .END
ÿ