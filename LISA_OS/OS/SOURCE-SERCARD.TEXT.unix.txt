
   UNIT SERCARD;  (*SERIAL CARD DRIVER*)

      (*  By Dave Offen *)
      (*  Copyright 1983, 1984, Apple Computer Inc. *)

   INTERFACE

    USES
      (*$U object/driverdefs.obj*)
        driverdefs,
      (*$U object/driversubs.obj*)
        driversubs;

    function DRIVER (parameters: param_ptr): integer;

  IMPLEMENTATION
    (*$R-*) (*rangecheck off*)

  function DRIVER; (*parameters: param_ptr): integer*)
       (*************************************************************)
       (*                                                           *)
       (* Description:  Serial card interrupt dispatcher driver     *)
       (*                                                           *)
       (* Input Parameters:                                         *)
       (*                                                           *)
       (* Output Parameters:                                        *)
       (*                                                           *)
       (* Side Effects:                                             *)
       (*                                                           *)
       (* Special Conditions of Use:                                *)
       (*                                                           *)
       (* Error Conditions:                                         *)
       (*                                                           *)
       (*************************************************************)

  TYPE
    ptrint1 = ^int1;
    slotcb = record
               A,B: ptrdevrec;
               chanBaddr: ptrint1             (*pointer to port B's control register*)
             end;

  VAR
    err: integer;
    chan: (chA,chB);
    port_ptr: ^slotcb;
    indexptr: ptrdevrec;
    newspace: longint;
    ptrsysg: ^longint;
    prevints: intson_type;

  begin
    with parameters^ do
      begin
        port_ptr := pointer (configptr^.cb_addr);
        WITH port_ptr^ do
        case fnctn_code of
        dinterrupt: begin
              chanBaddr^ := 2;
              case chanBaddr^ of
              0: begin (*chan B, 0*)
                   indexptr := B;
                   chan := chB;
                   intpar := 0
                 end;
              2: begin (*chan B, 1*)
                   indexptr := B;
                   chan := chB;
                   intpar := 1
                 end;
              4: begin (*chan B, 2*)
                   indexptr := B;
                   chan := chB;
                   intpar := 2
                 end;
              6: begin (*chan B, 3*)
                   indexptr := B;
                   chan := chB;
                   intpar := 3
                 end;
              8: begin (*chan A, 0*)
                   indexptr := A;
                   chan := chA;
                   intpar := 0
                 end;
              $A: begin (*chan A, 1*)
                    indexptr := A;
                    chan := chA;
                    intpar := 1
                 end;
              $C: begin (*chan A, 2*)
                    indexptr := A;
                    chan := chA;
                    intpar := 2
                 end;
              $E: begin (*chan A, 3*)
                    indexptr := A;
                    chan := chA;
                    intpar := 3
                 end;
              end; (*case*)
              CALLDRIVER (err, indexptr, parameters);
              if err = 605 then (*interrupt for uninitialized or unattached device*)
              begin
                chanBaddr^ := 9;
                if chan = chA then
                  chanBaddr^ := -118  (* =$8A.  Reset channel A*)
                else
                  chanBaddr^ := $4A  (* Reset channel B*)
              end
          end; (*dinterrupt*)

        dinit: begin
          DRIVER := 0;
          ptrsysg := pointer (bsysglob);

          INTSOFF (slotints, prevints);
          if not GETSPACE (sizeof(slotcb), ptrsysg^, newspace) then
            DRIVER := 610
          else
          begin
            (* Initialize ptr to control block in configinfo *)
            configptr^.cb_addr:=newspace;
            port_ptr := pointer (newspace);
            WITH port_ptr^ do
              begin
                A := nil;
                B := nil;
                case configptr^.slot_no of
                  0: chanBaddr := pointer(iospacemmu*$20000 + $2001);
                  1: chanBaddr := pointer(iospacemmu*$20000 + $6001);
                  2: chanBaddr := pointer(iospacemmu*$20000 + $0A001);
                end;
              end;(*with*)
          end;
          INTSON (prevints)
        end; (*dinit*)

        ddown: begin
          INTSOFF (slotints, prevints);
          ptrsysg := pointer (bsysglob);
          RELSPACE (ord(port_ptr), ptrsysg^);
          configptr^.cb_addr := ord(nil);
          INTSON (prevints);
          DRIVER := 0
        end; (*ddown*)

        dattach: (*attach a device to this card*)
          begin
            if n_configptr^.iochannel = 0 then
              B:=n_configptr
            else
              A:=n_configptr;
            DRIVER := 0
          end; (*dattach*)

        dunattach: begin
            if o_configptr^.iochannel = 0 then
              B := nil
            else
              A := nil;
            still_inuse := ( (A<>nil) or (B<>nil) )
          end;

        otherwise
          DRIVER := 656;

        end (*case*)
    end (*with*)
  end; (*DRIVER*)
end.

ÿ