;
;   File LEGENDS.TEXT
;
;-----------------------------------------------------------------------------
;
;   Hardware Interface Keyboard Layouts and Legends
;
;   Written by Rick Meyers
;   Copyright 1983, Apple Computer Inc.
;
;
;   The routines below provide an assembly language interface to the keyboard
;   layout/legends mappings.  Parameters are passed in registers.  Unless
;   otherwise noted, all registers are preserved.
;
;   Routines labeled with a * require supervisor mode.
;

;-----------------------------------------------------------------------------
;
;   Transformation Control Codes
;
;   The transformation control codes appear in the first byte of each
;   transformation step.  The codes determine the type of transformation
;   and the AsciiTable sections to which the transformation applies.
;

Primary         .EQU    1               ; Primary
PriCaps         .EQU    2               ; Caps-Lock
PriShift        .EQU    4               ; Shift or (Shift and Caps-Lock)
Alternate       .EQU    8               ; Alternate
AltCaps         .EQU    16              ; Alternate Caps-Lock
AltShift        .EQU    32              ; Alternate Shift or (Shift and Caps-Lock)

SeeAlso         .EQU    64              ; chain to another transformation
StopHere        .EQU    128             ; end of transformation


;-----------------------------------------------------------------------------
;
;   The Transformation Table
;
;   The Transformation Table consists of word entries, indexed by transformation
;   number, containing the offset of the transformation from the base of the
;   Transformation Table.  Equates identify the transformations.
;

TransTable

FinalUS         .EQU    0
                .WORD     _FinalUS-TransTable
OldUS           .EQU    1
                .WORD     _OldUS-TransTable
UK              .EQU    2
                .WORD     _UK-TransTable
German          .EQU    3
                .WORD     _German-TransTable
French          .EQU    4
                .WORD     _French-TransTable
Italian         .EQU    5
                .WORD     _Italian-TransTable
Swedish         .EQU    6
                .WORD     _Swedish-TransTable
EurKeyPad       .EQU    7
                .WORD     _EurKeyPad-TransTable
SwissGerman     .EQU    8
                .WORD     _SwissGerman-TransTable
Spanish         .EQU    9
                .WORD     _Spanish-TransTable
SwissFrench     .EQU    10
                .WORD     _SwissFrench-TransTable
Dutch           .EQU    11                               ;  <23Feb84>
                .WORD     _Dutch-TransTable              ;  <23Feb84>
FrenchCan       .EQU    12                               ;  <23Feb84>
                .WORD     _FrenchCan-TransTable          ;  <23Feb84>
Danish          .EQU    13                               ;  <30Mar84>
                .WORD     _Danish-TransTable             ;  <30Mar84>


;-----------------------------------------------------------------------------
;
;   Transformations
;
;   Transformations consists of a list of steps, the last of which is a StopHere
;   control code.
;
;        ---------------
;       |    StopHere   |
;        ---------------
;
;
;   Steps come in two other varieties.  Single byte transformations steps,
;   which contain the SeeAlso code plus a  transformation number, provide
;   recursive calls on other transformations.
;
;        ---------------
;       |    control    |   control = SeeAlso + transformation number
;        ---------------
;
;
;   Other transformation steps actually sets bytes in the AsciiTable.  The control
;   bytes contains bits which indicate which sections of the table (e.g. Primary,
;   PriCaps, AltShift) are to be affected by the transformations.  The second byte
;   indicates the starting offset within the appropriate sections of the table.
;   The third byte indicates how many bytes to transfer.  The bytes to be written
;   in AsciiTable follow.
;
;        -------------------------------------------------------------------
;       |    control    |    offset     |     count     |    bytes ...
;        -------------------------------------------------------------------
;
;


_FinalUS  ; -------------- Final US Keyboard Layout --------------------------

 .BYTE  Primary+PriCaps+Alternate+AltCaps,$20,16
 .BYTE    $1B,$2D,$1C,$1D,$37,$38,$39,$1E   ; Pad: Clear - Left Right 789 Up
 .BYTE    $34,$35,$36,$1F,$2E,$32,$33,$03   ; Pad: 456 Down .23 N-Enter

 .BYTE  PriShift+AltShift,$20,16
 .BYTE    $1B,$2D,$2B,$2A,$37,$38,$39,$2F   ; Pad: Clear -+*789/
 .BYTE    $34,$35,$36,$2C,$2E,$32,$33,$03   ; Pad: 456,.23 N-Enter

 .BYTE  Primary,$40,64
 .BYTE    $2D,$3D,$5C,$00,$70,$08,$03,$00   ; -=\ unused p BackSp A-Enter unused
 .BYTE    $0D,$30,$00,$00,$2F,$31,$00,$00   ; Return Pad:0 2*unused / Pad:1 R-Option unused
 .BYTE    $39,$30,$75,$69,$6A,$6B,$5B,$5D   ; 90uijk[]
 .BYTE    $6D,$6C,$3B,$27,$20,$2C,$2E,$6F   ; ml;' Space ,.o
 .BYTE    $65,$36,$37,$38,$35,$72,$74,$79   ; e6785rty
 .BYTE    $60,$66,$67,$68,$76,$63,$62,$6E   ; `fghvcbn
 .BYTE    $61,$32,$33,$34,$31,$71,$73,$77   ; a2341qsw
 .BYTE    $09,$7A,$78,$64,$00,$00,$00,$00   ; Tab zxd L-Option Caps Shift Command

 .BYTE  PriCaps,$40,64
 .BYTE    $2D,$3D,$5C,$00,$50,$08,$03,$00   ; -=\ unused P BackSp A-Enter unused
 .BYTE    $0D,$30,$00,$00,$2F,$31,$00,$00   ; Return Pad:0 2*unused / Pad:1 R-Option unused
 .BYTE    $39,$30,$55,$49,$4A,$4B,$5B,$5D   ; 90UIJK[]
 .BYTE    $4D,$4C,$3B,$27,$20,$2C,$2E,$4F   ; ML;' Space ,.O
 .BYTE    $45,$36,$37,$38,$35,$52,$54,$59   ; E6785RTY
 .BYTE    $60,$46,$47,$48,$56,$43,$42,$4E   ; `FGHVCBN
 .BYTE    $41,$32,$33,$34,$31,$51,$53,$57   ; A2341QSW
 .BYTE    $09,$5A,$58,$44,$00,$00,$00,$00   ; Tab ZXD L-Option Caps Shift Command

 .BYTE  PriShift,$40,64
 .BYTE    $5F,$2B,$7C,$00,$50,$08,$03,$00   ; _+| unused P BackSp A-Enter unused
 .BYTE    $0D,$30,$00,$00,$3F,$31,$00,$00   ; Return Pad:0 2*unused ? Pad:1 R-Option unused
 .BYTE    $28,$29,$55,$49,$4A,$4B,$7B,$7D   ; ()UIJK{}
 .BYTE    $4D,$4C,$3A,$22,$20,$3C,$3E,$4F   ; ML:" Space <>O
 .BYTE    $45,$5E,$26,$2A,$25,$52,$54,$59   ; E^&*%RTY
 .BYTE    $7E,$46,$47,$48,$56,$43,$42,$4E   ; ~FGHVCBN
 .BYTE    $41,$40,$23,$24,$21,$51,$53,$57   ; A@#$!QSW
 .BYTE    $09,$5A,$58,$44,$00,$00,$00,$00   ; Tab ZXD L-Option Caps Shift Command

 .BYTE  Alternate,$40,64
 .BYTE    $D0,$AD,$C7,$00,$B9,$08,$03,$00   ; newchar ≠ « unused π BackSp A-Enter unused
 .BYTE    $0D,$30,$00,$00,$D6,$31,$00,$00   ; Return Pad:0 2*unused newchar Pad:1 R-Option unused
 .BYTE    $BB,$BC,$14,$10,$C6,$00,$D2,$D4   ; ªº DKD¨ DKD^ ∆ unused newchar newchar
 .BYTE    $B5,$C2,$C9,$BE,$CA,$B2,$B3,$BF   ; µ ¬ …æ non-breakingSpace ≤≥ø <21Jun83>
 .BYTE    $13,$A4,$A6,$A5,$B0,$A8,$A0,$B4   ; DKD´ §¶•∞®†¥
 .BYTE    $11,$C4,$A9,$00,$C3,$8D,$BA,$12   ; DKD` ƒ© unused √ç∫ DKD~
 .BYTE    $8C,$AA,$A3,$A2,$C1,$CF,$A7,$B7   ; å™£¢¡ newchar ß∑
 .BYTE    $09,$BD,$C5,$B6,$00,$00,$00,$00   ; Tab Ω≈∂ L-Option Caps Shift Command

 .BYTE  AltCaps,$40,64
 .BYTE    $D0,$AD,$C7,$00,$B9,$08,$03,$00   ; newchar ≠ « unused π BackSp A-Enter unused
 .BYTE    $0D,$30,$00,$00,$D6,$31,$00,$00   ; Return Pad:0 2*unused newchar Pad:1 R-Option unused
 .BYTE    $BB,$BC,$14,$10,$C6,$00,$D2,$D4   ; ªº DKD¨ DKD^ ∆ unused newchar newchar
 .BYTE    $B5,$C2,$C9,$AE,$CA,$B2,$B3,$AF   ; µ ¬ …Æ non-breakingSpace ≤≥Ø <21Jun83>
 .BYTE    $13,$A4,$A6,$A5,$B0,$A8,$A0,$B4   ; DKD´ §¶•∞®†¥
 .BYTE    $11,$C4,$A9,$00,$C3,$82,$BA,$12   ; DKD` ƒ© unused √Ç∫ DKD~
 .BYTE    $81,$AA,$A3,$A2,$C1,$CE,$A7,$B7   ; Å™£¢¡ newchar ß∑
 .BYTE    $09,$BD,$C5,$B6,$00,$00,$00,$00   ; Tab Ω≈∂ L-Option Caps Shift Command

 .BYTE  AltShift,$40,64
 .BYTE    $D1,$B1,$C8,$00,$B8,$08,$03,$00   ; newchar ±»  unused ∏ BackSp A-Enter unused
 .BYTE    $0D,$30,$00,$00,$C0,$31,$00,$00   ; Return Pad:0 2*unused ¿ Pad:1 R-Option unused
 .BYTE    $BB,$BC,$14,$10,$C6,$00,$D3,$D5   ; ªº DKD¨ DKD^ ∆ unused newchar newchar
 .BYTE    $B5,$C2,$C9,$AE,$CA,$B2,$B3,$AF   ; µ ¬ …Æ non-breakingSpace ≤≥Ø <21Jun83>
 .BYTE    $13,$A4,$A6,$A1,$B0,$A8,$A0,$B4   ; DKD´ §¶°∞®†¥
 .BYTE    $11,$C4,$A9,$00,$D7,$82,$BA,$12   ; DKD` ƒ© unused newchar Ç∫ DKD~
 .BYTE    $81,$AA,$A3,$A2,$C1,$CE,$A7,$B7   ; Å™£¢¡ newchar ß∑
 .BYTE    $09,$BD,$C5,$B6,$00,$00,$00,$00   ; Tab Ω≈∂ L-Option Caps Shift Command

 .BYTE  StopHere


_OldUS    ; -------------- Old US Keyboard Layout ----------------------------

 .BYTE  SeeAlso+FinalUS                         ; Final US Keyboard Layout

 .BYTE  Alternate+AltCaps+AltShift,$53,1,$7C    ; |
 .BYTE  Alternate+AltCaps+AltShift,$55,1,$5C    ; \
 .BYTE  StopHere


_Spanish ; ---------- Spanish/Latin American Keyboard Layout ---------------

 .BYTE  SeeAlso+FinalUS                         ; Final US Keyboard Layout   <23Feb84>

 .BYTE  Primary+PriCaps, $41,3,$3D,$5D,$3C      ; =]<                        <23Feb84>
 .BYTE  PriShift,        $41,3,$2B,$7D,$3E      ; +}>                        <23Feb84>
 .BYTE  Primary+PriCaps, $4C,1,$27              ; '                          <23Feb84>
 .BYTE  PriShift,        $4C,1,$22              ; "                          <23Feb84>
 .BYTE  Primary+PriCaps, $56,2,$13,$5B          ; DKD´ [                     <23Feb84>
 .BYTE  PriShift,        $56,2,$BC,$7B          ; º{                         <23Feb84>
 .BYTE  Primary,         $5A,1,$96              ; ñ                          <23Feb84>
 .BYTE  PriCaps+PriShift,$5A,1,$84              ; Ñ                          <23Feb84>
 .BYTE  Primary+PriCaps, $5B,1,$3B              ; ;                          <23Feb84>
 .BYTE  PriShift,        $5B,1,$3A              ; :                          <23Feb84>
 .BYTE  PriShift,        $5D,2,$3F,$21          ; ?!                         <23Feb84>
 .BYTE  PriShift,        $61,1,$2F              ; /                          <23Feb84>
 .BYTE  Primary,         $68,1,$8D              ; ç                          <23Feb84>
 .BYTE  PriCaps+PriShift,$68,1,$82              ; Ç                          <23Feb84>
 .BYTE  PriShift,        $71,1,$C0              ; ¿                          <23Feb84>
 .BYTE  PriShift,        $74,1,$C1              ; ¡                          <23Feb84>

 .BYTE  Alternate+AltCaps+AltShift,$41,3,$B1,$A6,$B2          ; ±¶≤          <23Feb84>
 .BYTE  AltShift,                  $43,1,$B3                  ; ≥            <23Feb84>
 .BYTE  Alternate+AltCaps+AltShift,$4C,1,$00                  ; unused       <23Feb84>
 .BYTE  Alternate+AltCaps+AltShift,$50,2,$00,$AD              ; unused ≠     <23Feb84>
 .BYTE  Alternate+AltCaps+AltShift,$56,2,$BB,$00              ; ª unused     <23Feb84>
 .BYTE  Alternate+AltCaps+AltShift,$5A,2,$12,$11              ; DKD~ DKD`    <23Feb84>
 .BYTE  Alternate+AltCaps+AltShift,$5D,2,$A5,$C9              ; •…           <23Feb84>
 .BYTE  AltShift,                  $5E,1,$D6                  ; ÷            <23Feb84>
 .BYTE  Alternate,                 $60,1,$BE                  ; æ            <23Feb84>
 .BYTE  AltCaps+AltShift,          $60,1,$AE                  ; Æ            <23Feb84>
 .BYTE  Alternate+AltCaps+AltShift,$62,2,$7C,$A1              ; |°           <23Feb84>
 .BYTE  AltShift,                  $62,1,$5C                  ; \            <23Feb84>
 .BYTE  Alternate+AltCaps,         $68,1,$C7                  ; «            <23Feb84>
 .BYTE  AltShift,                  $68,1,$C8                  ; »            <23Feb84>
 .BYTE  Alternate+AltCaps+AltShift,$6A,2,$40,$AA               ; @™          <23Feb84>
 .BYTE  Alternate+AltCaps+AltShift,$6D,1,$A9                  ; ©            <23Feb84>
 .BYTE  Alternate+AltCaps+AltShift,$6F,1,$00                  ; unused       <23Feb84>
 .BYTE  Alternate+AltCaps,         $71,1,$D2                  ; “            <23Feb84>
 .BYTE  AltShift,                  $71,1,$D3                  ; ”            <23Feb84>
 .BYTE  Alternate+AltCaps,         $74,1,$D4                  ; ‘            <23Feb84>
 .BYTE  AltShift,                  $74,1,$D5                  ; ’            <23Feb84>
 .BYTE  StopHere


_UK       ; -------------- UK Keyboard Layout --------------------------------

 .BYTE  SeeAlso+FinalUS                         ; Final US Keyboard Layout

 .BYTE  Primary+PriCaps,$42,2,$11,$5C           ; DKD^ \
 .BYTE  PriShift,$42,2,$12,$7C                  ; DKD~ |
 .BYTE  PriShift,$61,1,$10                      ; DKD^
 .BYTE  PriShift,$68,1,$23                      ; #
 .BYTE  Primary+PriCaps,$68,1,$A4               ; §
 .BYTE  PriShift,$72,1,$A3                      ; £


 .BYTE  Alternate+AltCaps,         $42,2,$D4,$C7              ; newchar «          <16Nov83>
 .BYTE  AltShift,                  $42,2,$D5,$C8              ; newchar »          <16Nov83>
 .BYTE  Alternate+Altcaps+AltShift,$53,1,$00                  ; unused             <16Nov83>
 .BYTE  Alternate,                 $56,1,$CF                  ; newchar            <16Nov83>
 .BYTE  AltCaps+AltShift,          $56,1,$CE                  ; newchar            <16Nov83>
 .BYTE  Alternate+AltCaps,         $57,1,$D2                  ; newchar            <16Nov83>
 .BYTE  AltShift,                  $57,1,$D3                  ; newchar            <16Nov83>
 .BYTE  Alternate+AltCaps+AltShift,$61,1,$00                  ; unused
 .BYTE  AltShift,                  $63,1,$A5                  ; •                  <16Nov83>
 .BYTE  Alternate+AltCaps+AltShift,$68,1,$A1                  ; °
 .BYTE  Alternate+AltCaps+AltShift,$6B,1,$00                  ; unused
 .BYTE  Alternate+AltCaps+AltShift,$6F,1,$00                  ; unused
 .BYTE  Alternate+AltCaps+AltShift,$72,1,$00                  ; unused
 .BYTE  Alternate+AltCaps+AltShift,$75,1,$00                  ; unused
 .BYTE  StopHere


_Dutch    ; -------------- Dutch Keyboard Layout -----------------------------

 .BYTE  SeeAlso+UK                              ; UK Keyboard Layout         <23Feb84>

 .BYTE  Primary+PriCaps, $42,1,$10              ; DKD^                       <23Feb84>
 .BYTE  PriShift,        $42,1,$14              ; DKD¨                       <23Feb84>
 .BYTE  Primary+PriCaps, $5B,1,$13              ; DKD´                       <23Feb84>
 .BYTE  PriShift,        $5B,1,$11              ; DKD`                       <23Feb84>
 .BYTE  PriShift,        $61,1,$C4              ; ƒ                          <23Feb84>
 .BYTE  Primary+PriCaps, $68,1,$27              ; '                          <23Feb84>
 .BYTE  PriShift,        $68,1,$22              ; "                          <23Feb84>
 .BYTE  PriShift,        $72,1,$23              ; #                          <23Feb84>

 .BYTE  Alternate+AltCaps+AltShift,$42,1,$00                  ; unused       <23Feb84>
 .BYTE  Alternate+AltCaps+AltShift,$52,1,$00                  ; unused       <23Feb84>
 .BYTE  Alternate+AltCaps,         $56,2,$D2,$D4              ; “‘           <23Feb84>
 .BYTE  AltShift,                  $56,2,$D3,$D5              ; ”’           <23Feb84>
 .BYTE  Alternate+AltCaps+AltShift,$5B,1,$00                  ; unused       <23Feb84>
 .BYTE  Alternate,                 $60,1,$BE                  ; æ            <23Feb84>
 .BYTE  AltCaps+AltShift,          $60,1,$AE                  ; Æ            <23Feb84>
 .BYTE  Alternate+AltCaps+AltShift,$61,1,$A4                  ; §            <23Feb84>
 .BYTE  Alternate+AltCaps+AltShift,$69,1,$00                  ; unused       <23Feb84>
 .BYTE  Alternate+AltCaps+AltShift,$6F,1,$12                  ; DKD~         <23Feb84>
 .BYTE  Alternate+AltCaps+AltShift,$72,1,$A3                  ; £            <23Feb84>
 .BYTE  Alternate,                 $75,1,$CF                  ; œ            <23Feb84>
 .BYTE  AltCaps+AltShift,          $75,1,$CE                  ; Œ            <23Feb84>
 .BYTE  StopHere


_German   ; -------------- German Keyboard Layout ----------------------------

 .BYTE  SeeAlso+FinalUS                         ; Final US Keyboard Layout
 .BYTE  SeeAlso+EurKeyPad                       ; European Keypad Changes

 .BYTE  Primary+PriCaps, $40,4,$A7,$13,$23,$3C  ; ß´#<
 .BYTE  PriShift,        $40,4,$3F,$11,$10,$3E  ; ?`^>
 .BYTE  Primary+PriCaps, $4C,1,$2D              ; -
 .BYTE  PriShift,        $4C,1,$5F              ; _
 .BYTE  PriShift,        $50,2,$29,$3D          ; )=
 .BYTE  Primary,         $56,1,$9F              ; ü
 .BYTE  PriCaps+PriShift,$56,1,$86              ; Ü
 .BYTE  Primary+PriCaps, $57,1,$2B              ; +
 .BYTE  PriShift,        $57,1,$2A              ; *
 .BYTE  Primary,         $5A,2,$9A,$8A          ; öä
 .BYTE  PriCaps+PriShift,$5A,2,$85,$80          ; ÖÄ
 .BYTE  PriShift,        $5D,2,$3B,$3A          ; ;:
 .BYTE  PriShift,        $61,3,$26,$2F,$28      ; &/(
 .BYTE  Primary,         $67,1,$7A              ; z
 .BYTE  PriCaps+PriShift,$67,1,$5A              ; Z
 .BYTE  Primary+PriCaps, $68,1,$40              ; @
 .BYTE  PriShift,        $68,1,$A3              ; £
 .BYTE  PriShift,        $71,2,$22,$A4          ; "§
 .BYTE  Primary,         $79,1,$79              ; y
 .BYTE  PriCaps+PriShift,$79,1,$59              ; Y

 .BYTE  Alternate+AltCaps+AltShift,$40,3,$C0,$27,$A5          ; ¿'•
 .BYTE  AltShift,                  $42,1,$A1                  ; °                    <23Feb84>
 .BYTE  Alternate+AltCaps,         $43,1,$B2                  ; ≤
 .BYTE  AltShift,                  $43,1,$B3                  ; ≥
 .BYTE  Alternate+AltCaps,         $4C,1,$D0                  ; newchar              <21Nov83>
 .BYTE  AltShift,                  $4C,1,$D1                  ; newchar              <21Nov83>
 .BYTE  Alternate+AltCaps+AltShift,$50,2,$7D,$AD              ; }≠
 .BYTE  Alternate+AltCaps+AltShift,$53,5,$00,$BC,$C6,$00,$B1  ; unused º∆ unused ±   <21Nov83>
 .BYTE  Alternate,                 $5A,1,$CF                  ; newchar              <21Nov83>
 .BYTE  AltCaps+AltShift,          $5A,1,$CE                  ; newchar              <21Nov83>
 .BYTE  Alternate+AltCaps+AltShift,$5D,1,$B0                  ; ∞                    <21Nov83>
 .BYTE  Alternate+AltCaps,         $5E,1,$C9                  ; …                    <21Nov83>
 .BYTE  AltShift,                  $5E,1,$D6                  ; newchar              <21Nov83>
 .BYTE  Alternate+AltCaps+AltShift,$60,5,$AA,$5D,$7C,$7B,$5B  ; ™]|{[                <21Nov83>
 .BYTE  AltShift,                  $62,1,$5C                  ; \                    <21Nov83>
 .BYTE  Alternate+AltCaps+AltShift,$67,2,$BD,$D4              ; Ω newchar            <21Nov83>
 .BYTE  AltShift,                  $68,1,$D5                  ; newchar              <21Nov83>
 .BYTE  Alternate+AltCaps+AltShift,$6B,1,$BB                  ; ª
 .BYTE  Alternate+AltCaps,         $71,1,$D2                  ; newchar              <21Nov83>
 .BYTE  AltShift,                  $71,1,$D3                  ; newchar              <21Nov83>
 .BYTE  Alternate+AltCaps+AltShift,$72,1,$A6                  ; ¶
 .BYTE  Alternate+AltCaps+AltShift,$75,2,$C7,$00              ; « unused             <21Nov83>
 .BYTE  AltShift,                  $75,1,$C8                  ; »                    <21Nov83>
 .BYTE  Alternate+AltCaps+AltShift,$79,1,$B4                  ; ¥
 .BYTE  StopHere


_French   ; -------------- French Keyboard Layout ----------------------------

 .BYTE  SeeAlso+FinalUS                             ; Final US Keyboard Layout
 .BYTE  SeeAlso+EurKeyPad                           ; European Keypad Changes

 .BYTE  Primary+PriCaps,  $40,4,$29,$2D,$11,$3C     ; )- DKD` <
 .BYTE  PriShift,         $40,4,$A1,$5F,$A3,$3E     ; °_£>
 .BYTE  Primary+PriCaps,  $4C,1,$3D                 ; =
 .BYTE  PriShift,         $4C,1,$2B                 ; +
 .BYTE  Primary+PriCaps,  $50,2,$8D,$88             ; çà
 .BYTE  PriShift,         $50,2,$39,$30             ; 90
 .BYTE  Primary+PriCaps,  $56,3,$10,$24,$2C         ; DKD^ $,
 .BYTE  PriShift,         $56,3,$14,$2A,$3F         ; DKD¨ *?
 .BYTE  Primary,          $5A,1,$6D                 ; a
 .BYTE  PriCaps+PriShift, $5A,1,$4D                 ; A
 .BYTE  Primary+PriCaps,  $5B,4,$9D,$20,$3B,$3A     ; ù Space ;:
 .BYTE  PriShift,         $5B,4,$25,$20,$2E,$2F     ; % Space ./
 .BYTE  Primary+PriCaps,  $61,4,$A4,$8F,$21,$28     ; §è!(
 .BYTE  PriShift,         $61,4,$36,$37,$38,$35     ; 6785
 .BYTE  Primary+PriCaps,  $68,1,$40                 ; @
 .BYTE  PriShift,         $68,1,$23                 ; #
 .BYTE  Primary,          $70,1,$71                 ; q
 .BYTE  PriCaps+PriShift, $70,1,$51                 ; Q
 .BYTE  Primary+PriCaps,  $71,4,$8E,$22,$27,$26     ; é"'&
 .BYTE  PriShift,         $71,4,$32,$33,$34,$31     ; 2341
 .BYTE  Primary,          $75,5,$61,$73,$7A,$09,$77 ; asz Tab w
 .BYTE  PriCaps+PriShift, $75,5,$41,$53,$5A,$09,$57 ; ASZ Tab W


 .BYTE  Alternate+AltCaps+AltShift,$40,1,$7D                  ; }                      <21Nov83>
 .BYTE  Alternate+AltCaps,          $41,1,$D0                 ; –                      <23Feb84>
 .BYTE  AltShift,                  $41,1,$D1                  ; —                      <23Feb84>
 .BYTE  Alternate+Altcaps+AltShift,$42,2,$13,$B2              ; DKD´≤                  <23Feb84>
 .BYTE  AltShift,                  $43,1,$B3                  ; ≥
 .BYTE  Alternate+AltCaps,         $4C,1,$AD                  ; ≠                      <21Nov83>
 .BYTE  AltShift,                  $4C,1,$B1                  ; ±                      <21Nov83>
 .BYTE  Alternate+AltCaps+AltShift,$50,4,$82,$B0,$BB,$BC      ; Ç∞ªº                   <21Nov83>
 .BYTE  Alternate+AltCaps+AltShift,$55,4,$00,$CF,$A2,$C0      ; unused newchar ¢¿      <21Nov83>
 .BYTE  AltCaps+AltShift,          $56,1,$CE                  ; newchar                <21Nov83>
 .BYTE  Alternate+AltCaps+AltShift,$5A,1,$B5                  ; µ                      <21Nov83>
 .BYTE  Alternate+AltCaps,         $5D,2,$C9,$7C              ; …|                     <21Nov83>
 .BYTE  AltShift,                  $5D,2,$D6,$5C              ; newchar \              <21Nov83>
 .BYTE  Alternate+AltCaps+AltShift,$60,5,$AA,$A6,$C7,$C1,$7B  ; ™¶ « ¡{                <21Nov83>
 .BYTE  AltShift,                  $62,1,$C8                  ; »                      <21Nov83>
 .BYTE  Alternate+AltCaps+AltShift,$68,1,$A5                  ; •
 .BYTE  Alternate+AltCaps+AltShift,$6A,2,$00,$00              ; unused unused          <21Nov83>
 .BYTE  Alternate+AltCaps+AltShift,$6D,1,$A9                  ; ©                      <21Nov83>
 .BYTE  Alternate+AltCaps+AltShift,$70,5,$00,$5D,$D2,$D4,$5B  ; unused ] newchar newchar[
 .BYTE  AltShift,                  $72,2,$D3,$D5              ; newchar newchar        <21Nov83>
 .BYTE  Alternate,                 $75,1,$8C                  ; å
 .BYTE  AltCaps+AltShift,          $75,1,$81                  ; Å
 .BYTE  Alternate+AltCaps+AltShift,$77,1,$BD                  ; Ω                      <21Nov83>
 .BYTE  Alternate+AltCaps+AltShift,$79,1,$B7                  ; ∑                      <23Feb84>
 .BYTE  StopHere


_Italian  ; -------------- Italian Keyboard Layout ---------------------------

 .BYTE  SeeAlso+French                              ; French Keyboard Layout

 .BYTE  Primary+PriCaps,           $40,3,$2D,$3D,$A4          ; -=§
 .BYTE  PriShift,                  $40,3,$5F,$2B,$A1          ; _+°                    <23Feb84>
 .BYTE  Primary+PriCaps,           $4C,1,$98                  ; ò
 .BYTE  PriShift,                  $4C,1,$21                  ; !
 .BYTE  Primary+PriCaps,           $50,2,$88,$8E              ; àé
 .BYTE  Primary+PriCaps,           $56,1,$93                  ; ì
 .BYTE  PriShift,                  $56,1,$10                  ; DKD^
 .BYTE  Primary+PriCaps,           $61,4,$8F,$29,$A3,$8D      ; è)£ç
 .BYTE  Primary,                   $70,1,$61                  ; a
 .BYTE  PriCaps+PriShift,          $70,1,$41                  ; A
 .BYTE  Primary+PriCaps,           $71,3,$22,$27,$28          ; "'(
 .BYTE  Primary,                   $75,1,$71                  ; q
 .BYTE  PriCaps+PriShift,          $75,1,$51                  ; Q

 .BYTE  Alternate+AltCaps+AltShift,$40,3,$D0,$AD,$00          ; newchar ≠ unused          <22Nov83>
 .BYTE  AltShift,                  $40,2,$D1,$B1              ; newchar ±                 <22Nov83>
 .BYTE  Alternate+AltCaps+AltShift,$4C,1,$C1                  ; ¡
 .BYTE  Alternate+AltCaps+AltShift,$50,6,$11,$13,$14,$00      ; DKD` DKD´ DKD¨ unused     <22Nov83>
 .BYTE                                   $BB,$BC              ; ªº                        <22Nov83>
 .BYTE  Alternate+AltCaps+AltShift,$5A,1,$B5                  ; µ
 .BYTE  Alternate+AltCaps+AltShift,$62,3,$7D,$B0,$82          ; }∞Ç
 .BYTE  AltShift,                  $62,1,$5D                  ; ]                         <22Nov83>
 .BYTE  Alternate+AltCaps+AltShift,$6B,1,$C6                  ; ∆
 .BYTE  Alternate,                 $70,1,$8C                  ; å
 .BYTE  AltCaps+AltShift,          $70,1,$81                  ; Å
 .BYTE  Alternate+AltCaps,         $71,4,$D2,$D4,$7B,$C7      ; newchar newchar {«        <22Nov83>
 .BYTE  AltShift,                  $71,4,$D3,$D5,$5B,$C8      ; newchar newchar [»        <22Nov83>
 .BYTE  Alternate+AltCaps+AltShift,$75,1,$00                  ; unused
 .BYTE  Alternate+AltCaps+AltShift,$77,1,$BD                  ; Ω
 .BYTE  StopHere


_Swedish  ; -------------- Swedish Keyboard Layout ---------------------------

 .BYTE  SeeAlso+German                              ; German Keyboard Layout

 .BYTE  Primary,                   $40,3,$2B,$8E,$27          ; +é'
 .BYTE  PriCaps,                   $40,3,$2B,$83,$27          ; +É'
 .BYTE  PriShift,                  $41,2,$83,$2A              ; É*
 .BYTE  Primary,                   $56,2,$8C,$9F              ; åü
 .BYTE  PriCaps+PriShift,          $56,2,$81,$86              ; ÅÜ
 .BYTE  Primary,                   $67,2,$79,$13              ; y DKD´
 .BYTE  PriCaps,                   $67,2,$59,$13              ; Y DKD´
 .BYTE  PriShift,                  $67,2,$59,$11              ; Y DKD`
 .BYTE  PriShift,                  $72,1,$23                  ; #
 .BYTE  Primary,                   $79,1,$7A                  ; z
 .BYTE  PriCaps+PriShift,          $79,1,$5A                  ; Z

 .BYTE  Alternate+AltCaps,         $40,1,$B1                  ; ±
 .BYTE  Alternate+AltCaps,         $41,2,$BB,$D4              ; ª@
 .BYTE  AltShift,                  $41,2,$BC,$D5              ; º newchar
 .BYTE  Alternate+AltCaps+AltShift,$52,6,$00,$A6,$C6,0,$CF,$14; unused ¶∆ unused newchar DKD¨
 .BYTE  AltShift+AltCaps,          $56,1,$CE                  ; newchar
 .BYTE  Alternate,                 $5A,1,$BF                  ; ø
 .BYTE  AltCaps+AltShift,          $5A,1,$AF                  ; Ø
 .BYTE  Alternate+AltCaps+AltShift,$5F,1,$BD                  ; Ω
 .BYTE  Alternate+AltCaps+AltShift,$67,2,$B4,$C7              ; ¥«
 .BYTE  AltShift,                  $68,1,$C8                  ; »
 .BYTE  Alternate+AltCaps+AltShift,$6B,1,$10                  ; DKD^
 .BYTE  Alternate+AltCaps+AltShift,$70,1,$40                  ; @
 .BYTE  Alternate+AltCaps+AltShift,$72,1,$A3                  ; £
 .BYTE  Alternate+AltCaps+AltShift,$75,2,$A5,$A7              ; •ß
 .BYTE  AltShift,                  $75,1,$A1                  ; °
 .BYTE  Alternate+AltCaps+AltShift,$79,1,$A4                  ; §
 .BYTE  StopHere

_Danish   ; -------------- Danish Keyboard Layout -----------------------           <30Mar84>
;                                                                                   <30Mar84>
 .BYTE  SeeAlso+Swedish                              ; Swedish Keyboard Layout      <30Mar84>
;                                                                                   <30Mar84>
 .BYTE  Primary,                   $5A,2,$BE,$BF              ; æø                  <30Mar84>
 .BYTE  PriCaps+PriShift,          $5A,2,$AE,$AF              ; ÆØ                  <30Mar84>
;                                                                                   <30Mar84>
 .BYTE  Alternate,                 $5A,2,$8A,$9A              ; äö                  <30Mar84>
 .BYTE  AltCaps+AltShift,          $5A,2,$80,$85              ; ÄÖ                  <30Mar84>
 .BYTE  StopHere                                              ;                     <30Mar84>


_SwissGerman ; -------------- Swiss-German Keyboard Layout ---------------

 .BYTE  SeeAlso+German                              ; German Keyboard Layout

 .BYTE  Primary+PriCaps,           $40,3,$27,$10,$24          ; 'DKD^$
 .BYTE  PriShift,                  $42,1,$A3                  ; £
 .BYTE  Primary+PriCaps,           $56,2,$9F,$14              ; ü¨
 .BYTE  PriShift,                  $56,2,$8F,$21              ; è!           <23Feb84>
 .BYTE  Primary+PriCaps,           $5A,2,$9A,$8A              ; öä
 .BYTE  PriShift,                  $5A,2,$8E,$88              ; éà
 .BYTE  Primary+PriCaps,           $68,1,$A4                  ; §
 .BYTE  PriShift,                  $68,1,$A1                  ; °
 .BYTE  PriShift,                  $72,3,$2A,$8D,$2B          ; *ç+

 .BYTE  Alternate+AltCaps+AltShift,$41,2,$13,$A2              ; DKD´ ¢       <23Feb84>
 .BYTE  AltShift,                  $41,1,$5E                  ; ^            <23Feb84>
 .BYTE  Alternate+AltCaps+AltShift,$52,2,$00,$C1              ; unused ¡     <23Feb84>
 .BYTE  Alternate+AltCaps,         $57,1,$D4                  ; newchar
 .BYTE  AltShift,                  $57,1,$D5                  ; newchar
 .BYTE  Alternate+AltCaps+AltShift,$5A,1,$00                  ; unused
 .BYTE  Alternate+AltCaps,         $5D,1,$C7                  ; «            <23Feb84>
 .BYTE  AltShift,                  $5D,1,$C8                  ; »            <23Feb84>
 .BYTE  Alternate+AltCaps+AltShift,$67,2,$BD,$A6              ; Ω¶
 .BYTE  AltShift,                  $68,1,$A5                  ; •
 .BYTE  Alternate+AltCaps+AltShift,$6A,1,$40                  ; @
 .BYTE  Alternate+AltCaps+AltShift,$6D,1,$A9                  ; ©
 .BYTE  Alternate+AltCaps+AltShift,$72,3,$23,$82,$B1          ; #Ç±
 .BYTE  AltShift,                  $74,1,$B0                  ; ∞            <23Feb84>
 .BYTE  Alternate,                 $75,1,$CF                  ; œ            <23Feb84>
 .BYTE  AltCaps+AltShift,          $75,1,$CE                  ; Œ            <23Feb84>
 .BYTE  Alternate+AltCaps+AltShift,$76,1,$A7                  ; ß
 .BYTE  StopHere

_SwissFrench ; -------------- Swiss-French Keyboard Layout ---------------

 .BYTE  SeeAlso+SwissGerman                         ; German Keyboard Layout
 .BYTE  Primary+PriCaps,           $56,1,$8F                  ; è
 .BYTE  PriShift,                  $56,1,$9F                  ; ü
 .BYTE  Primary+PriCaps,           $5A,2,$8E,$88              ; éà
 .BYTE  PriShift,                  $5A,2,$9A,$8A              ; öä
 .BYTE  StopHere

_FrenchCan ;  --------------- French-Canadian Keyboard Layout ------------       <23Feb84>
 .BYTE  SeeAlso+FinalUS                             ; Final US Keyboard Layout   <23Feb84>
 .BYTE  Primary+PriCaps,           $42,2,$88,$C7              ; è«               <23Feb84>
 .BYTE  PriShift,                  $42,2,$8F,$C8              ; à»               <23Feb84>
 .BYTE  Primary+PriCaps,           $4C,1,$8E                  ; é                <23Feb84>
 .BYTE  Primary+PriCaps,           $56,2,$10,$9D              ; DKD^ù            <23Feb84>
 .BYTE  PriShift,                  $56,2,$14,$11              ; DKD¨DKD`         <23Feb84>
 .BYTE  Primary+PriCaps,           $5B,1,$8D                  ; ç                <23Feb84>
 .BYTE  PriShift,                  $5D,2,$2C,$2F              ; ,/               <23Feb84>
 .BYTE  PriShift,                  $61,1,$A4                  ; §                <23Feb84>
 .BYTE  Primary+PriCaps,           $68,1,$3C                  ; <                <23Feb84>
 .BYTE  PriShift,                  $68,1,$3E                  ; >                <23Feb84>
                                                              ;                  <23Feb84>
 .BYTE  Alternate,                 $42,2,$BE,$00              ; æ                <23Feb84>
 .BYTE  AltCaps+AltShift,          $42,2,$AE,$00              ; Æ                <23Feb84>
 .BYTE  Alternate+AltCaps,         $4C,1,$13                  ; DKD`             <23Feb84>
 .BYTE  Alternate+AltCaps+AltShift,$52,2,$00,$00              ;                  <23Feb84>
 .BYTE  Alternate+AltCaps+AltShift,$55,1,$7C                  ; |                <23Feb84>
 .BYTE  Alternate+AltCaps+AltShift,$5B,1,$82                  ; Ç                <23Feb84>
 .BYTE  Alternate+AltCaps,         $5D,2,$00,$5C              ;  \               <23Feb84>
 .BYTE  AltShift,                  $5D,2,$00,$D6              ;  ÷               <23Feb84>
 .BYTE  Alternate+AltCaps+AltShift,$60,2,$AA,$A2              ; ™¢               <23Feb84>
 .BYTE  Alternate+AltCaps,         $68,1,$B2                  ; ≤                <23Feb84>
 .BYTE  Altshift,                  $68,1,$B3                  ; ≥                <23Feb84>
 .BYTE  Alternate+AltCaps+AltShift,$6D,1,$00                  ;                  <23Feb84>
 .BYTE  Alternate+AltCaps,         $71,3,$5D,$7B,$7D          ; ]{}              <23Feb84>
 .BYTE  AltShift ,                 $71,3,$5D,$A3,$7D          ; ]£}              <23Feb84>
 .BYTE  Alternate+AltCaps,         $74,1,$5B                  ; [                <23Feb84>
 .BYTE  AltShift,                  $74,1,$C1                  ; ¡                <23Feb84>
 .BYTE  Stophere


_EurKeyPad  ; ------------ European Keypad Changes ---------------------------

 .BYTE  PriShift+AltShift,$2B,2,$2E,$2C             ; Pad: .,
 .BYTE  Primary+PriCaps+Alternate+AltCaps,$2C,1,$2C ; Pad: ,
 .BYTE  StopHere

 .BYTE  0,0                                       ; make PC even


;-----------------------------------------------------------------------------
;
;   The Keyboard Transformation Table
;
;   The Keyboard Transformation Table maps keyboard layout/legends to
;   tranformation numbers.  The final entry in the table, identified by
;   a layout/legends code of $FF, serves as the default.
;

KeybdTrans      .BYTE   $0F,OldUS           ; $0F -- Old US
                .BYTE   $24,FrenchCan       ; $24 -- French-Canadian
                .BYTE   $25,Dutch           ; $25 -- Dutch
                .BYTE   $26,SwissGerman     ; $26 -- Swiss-German
                .BYTE   $27,SwissFrench     ; $27 -- Swiss-French
                .BYTE   $29,Spanish         ; $29 -- Spanish/Latin American
                .BYTE   $2A,Danish          ; $2A -- Danish
                .BYTE   $2B,Swedish         ; $2B -- Swedish
                .BYTE   $2C,Italian         ; $2C -- Italian
                .BYTE   $2D,French          ; $2D -- French
                .BYTE   $2E,German          ; $2E -- German
                .BYTE   $2F,UK              ; $2F -- UK
                .BYTE   $3F,FinalUS         ; $3F -- Final US
                .BYTE   $FF,FinalUS


;-----------------------------------------------------------------------------
;
;   Keyboard Layouts
;
;   Three physical keyboard layouts are defined, the "Old US Layout" (with 73
;   keys on the main keyboard and numeric keypad),  the "Final US Layout"
;   (76 keys) and the "European Layout" (77 keys).  Each key has been assigned
;   a keycode, which uniquely identifies the key.  Keycode values range from
;   0 to 127.  The matrix below defines the keycodes for the "Final US Layout",
;   using the legends from the US Keyboard.  The "Old US Layout" has three less
;   keys. |\, Alpha-Enter, and Right-Option are not on the old keyboard.
;   The "European Layout" has one additional key, ><, with a keycode of $43.
;
;   Two keys on the "Old US Layout" generate keycodes different from the
;   corresponding keys on the "Final US Layout".  To aid in campatibility,
;   software changes the keycode for ~` from $7C to $68, and the keycode for
;   R-Option from $68 to $4E.
;
;
;   Keycodes for the "Final US Layout"
;
;
;        high   000     001     010     011     100     101     110     111
;                0       1       2       3       4       5       6       7
;   low
;
;   0000  0                    Clear            _ -     ( 9      E       A
;
;   0001  1    Disk 1            -              + =     ) 0     ^ 6     @ 2
;              Inserted
;   0010  2    Disk 1         + Left            | \      U      & 7     # 3
;              Button
;   0011  3    Disk 2         * Right                    I      * 8     $ 4
;              Inserted
;   0100  4    Disk 2            7               P       J      % 5     ! 1
;              Button
;   0101  5    Parallel          8             Backsp    K       R       Q
;              Port
;   0110  6    Mouse             9             Alpha    { [      T       S
;              Button                          Enter
;   0111  7    Mouse           / Up                     } ]      Y       W
;              Plug
;   1000  8    Power             4             Return    M      ~ `     Tab
;              Button
;   1001  9                      5               0       L       F       Z
;
;   1010  A                      6                      : ;      G       X
;
;   1011  B                   , Down                    " '      H       D
;
;   1100  C                      .              ? /     SPACE    V     Left
;                                                                      Option
;   1101  D                      2               1      < ,      C     Caps
;                                                                      Lock
;   1110  E                      3             Right    > .      B     Shift
;                                              Option
;   1111  F                    Enter                     O       N     Command
;
;


;-----------------------------------------------------------------------------
;
;   Keyboard Identification
;
;   Lisa support a host of different keyboards.  Each keyboard has three
;   major attributes: 1) manufacturer, 2) physical layout, and 3) keycap
;   legends.  The chart below describes how these three attributes are
;   combined to form a keyboard identification number.  The keyboards self
;   identify when the machine is turned on and when a new keyboard is attached.
;   Routine Keyboard returns the identification number of the keyboard
;   currently attached.  Routines Legends and SetLegends provide a means
;   of pretending to have different legends, without physically replacing
;   the keyboard.
;
;   Keyboard identification numbers:
;
;          7       6       5       4       3       2      1       0
;       ---------------------------------------------------------------
;      | manufacturer  |    Layout     |         Keycap Legends        |
;       ---------------------------------------------------------------
;
;   Manufacturer:
;
;       00  --  TKC
;       01  --
;       10  --  Keytronics
;
;   Layout:
;
;       00  --  Old US (73 keys)
;       01  --
;       10  --  European (77 keys)
;       11  --  Final US (76 keys)
;
;   Layout/Legends:
;
;       0F  --  Old US
;
;       24  --  French-Canadian
;       25  --  Dutch
;       26  --  Swiss-German
;       27  --  Swiss-French
;       28  --  Portugese     (proposed)
;       29  --  Spanish
;       2A  --  Danish
;       2B  --  Swedish
;       2C  --  Italian
;       2D  --  French
;       2E  --  German
;       2F  --  UK
;
;       3C  --  APL           (proposed)
;       3D  --  Canadian      (proposed)
;       3E  --  US-Dvorak     (proposed)
;       3F  --  Final US
;
;
;
;   Routine:    Keyboard
;   Arguments:    D0 (output)  --  keyboard identification (integer)
;   Function:   Return the keyboard identification number of the actual
;               keyboard.
;

Keyboard        CLR.W   D0                  ; clear register
                MOVE.B  KeybdId,D0          ; keyboard id
                RTS                         ; return


;
;   Routine:    Legends
;   Arguments:    D0 (output)  --  keyboard layout/legends (integer)
;   Function:   Return the keyboard layout/legends code.  The layout/
;               legends are determined by plugging in a keyboard or
;               calling SetLegends, whichever is most recent.

Legends         CLR.W   D0                  ; clear register
                MOVE.B  KeyLegends,D0       ; keyboard layout/legends
                RTS                         ; return


;
;   Routine:    SetLegends
;   Arguments:    D0 (input)   --  keyboard layout/legends (integer)
;   Functions:  Modify the keyboard mapping to match the specified set of
;               keyboard legends.  The new mapping will be overridden by
;               a subsequent call to SetLegends, or by plugging in an actual
;               keyboard.
;

SetLegends      MOVEM.L D0-D1/A0,-(SP)      ; save registers
                AND.W   #$003F,D0           ; keyboard layout/legends
                MOVE.B  D0,KeyLegends       ; keyboard layout/legends

;   Zero the keyboard mapping table, AsciiTable.

                MOVE.L  #AsciiTable,A0      ; AsciiTable (address)
                LEA     768(A0),A1          ; past end of AsciiTable
                CLR.L   D1                  ; zero

@1              MOVE.L  D1,(A0)+            ; zero AsciiTable
                CMP.L   A1,A0               ; end of table ?
                BLT.S   @1                  ; branch if not end of table

;   Locate the required layout/legends in the keyboard transformation table,
;   and establish the new keyboard mapping by applying the corresponding
;   transformation.

                LEA     KeybdTrans-2,A0     ; keyboard transformation table

@2              ADD.W   #2,A0               ; next keybd transformation entry
                CMP.B   (A0),D0             ; found layout/legends ?
                BEQ.S   @3                  ; branch if found layout/legends

                CMP.B   #$FF,(A0)           ; end of list, use default ?
                BNE.S   @2                  ; branch if not end of list

@3              CLR.W   D0                  ; clear register
                MOVE.B  1(A0),D0            ; transformation number
                JSR     Transform           ; construct AsciiTable
                MOVEM.L (SP)+,D0-D1/A0      ; restore registers
                RTS                         ; return


;-----------------------------------------------------------------------------
;
;   Transform
;
;   Internal routine Transform applies a transformation to the keyboard
;   mapping table AsciiTable.  All registers are preserved.
;
;
;   Input Parameters:
;
;       D0  --  transformation number
;
;   Register Assignments:
;
;       D0  --  transformation number, control
;       D1  --  offset within section
;       D2  --  byte count
;       D3  --  bytes transferred
;
;       A0  --  current step of transformation (address)
;       A1  --  AsciiTable+section+offset (address)
;


Transform       MOVEM.L D0-D3/A0-A1,-(SP)   ; save registers
                LEA     TransTables,A0      ; transformation table (address)
                ADD.W   D0,D0               ; transformation number*2
                ADD.W   0(A0,D0.W),A0       ; transformation (address)

XStep           MOVE.B  (A0),D0             ; control byte
                CMP.B   #StopHere,D0        ; end of transformation ?
                BEQ.S   XExit               ; branch if end of transformation

                CMP.B   #SeeAlso,D0         ; see also another transformation ?
                BLT.S   @1                  ; branch if not a SeeAlso

;   Recursively apply another transformation.

                SUB.B   #SeeAlso,D0         ; transformation number
                JSR     Transform           ; recursively call Transform
                ADD.W   #1,A0               ; next transformation step
                BRA.S   XStep               ; go on to the next step

;   For each specified section of the AsciiTable, transfer count bytes from
;   the transformation to AsciiTable, beginning at offset.

@1              CLR.W   D1                  ; clear register
                MOVE.B  1(A0),D1            ; offset within section
                CLR.W   D2                  ; clear register
                MOVE.B  2(A0),D2            ; byte count
                MOVE.L  #AsciiTable,A1      ; AsciiTable (address)
                ADD.W   D1,A1               ; AsciiTable+offset (address)

XSection        BTST    #0,D0               ; applies to this section ?
                BEQ.S   @3                  ; branch if doesn't apply

                MOVE.W  #0,D3               ; bytes transferred
@2              CMP.W   D2,D3               ; end of transfer ?
                BGE.S   @3                  ; branch if end of transfer

                MOVE.B  3(A0,D3.W),0(A1,D3.W) ; transfer one byte
                ADD.W   #1,D3                 ; bytes transferred
                BRA.S   @2                    ; go on to the next byte

@3              ADD.W   #128,A1             ; AsciiTable+section+offset (address)
                LSR.W   #1,D0               ; shift in control for next section
                BNE.S   XSection            ; go on to next section, if any

                ADD.W   #3,A0               ; skip control, offset, count
                ADD.W   D2,A0               ; next transformation step (address)
                BRA.S   XStep               ; go on to the next step

XExit           MOVEM.L (SP)+,D0-D3/A0-A1   ; restore registers
                RTS                         ; return

ˇ