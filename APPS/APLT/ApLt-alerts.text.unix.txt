{$S SegTEIdle}
{ Copyright 1983, Apple Computer, Inc. }

function IsActive: Boolean;
  {IsActive returns True if there is an active TE folder.}

  {$S SegTEIdle}
  begin {IsActive}
    {$IFC SampCalls}   ALogCall;   {$ENDC}
    IsActive:= (TheTerm<>NIL) and (TheTerm<>ScrapTerm);
  end; {IsActive}

{$S SegTEAlert }

procedure AddAlert (var HNewAlert: THAlertSave);
  {AddAlert creates a new TAlertSave record and places it on the tail of the}
  {alert queue.  HNewAlert^^.Prev and .Next are the only fields initialized here.}

  {$S SegTEAlert }
  begin {AddAlert}
    {$IFC SampCalls}   ALogCall;   {$ENDC}
    NewHAlertSave (HNewAlert);
    with HNewAlert^^ do begin
      Prev:=AlertTail;
      Next:=NIL;
    end;

    if AlertHead=NIL then
      AlertHead:=HNewAlert;

    if AlertTail<>NIL then
      AlertTail^^.Next:=HNewAlert;

    AlertTail:=HNewAlert;
  end;  {AddAlert}


procedure DelAlert (HAlert: THAlertSave);
  {DelAlert removes an alert from the alert queue and dealocates}
  {the space used by HAlert^^.}

  var
    ThePrev: THAlertSave;
    TheNext: THAlertSave;

  {$S SegTEAlert }
  begin {DelAlert}
    {$IFC SampCalls}   ALogCall;   {$ENDC}
    with HAlert^^ do begin
      ThePrev:=Prev;
      TheNext:=Next;
    end;

    DspHAlertSave (HAlert);

    if ThePrev<>NIL then
      ThePrev^^.Next:=TheNext
    else
      AlertHead:=TheNext;

    if TheNext<>NIL then
      TheNext^^.Prev:=ThePrev
    else
      AlertTail:=ThePrev;
  end;  {DelAlert}


procedure KillAlerts (HTerm: THTerm);
  {KillAlerts removes all alerts posted for HTerm that are in the alert queue.}

  var
    HAlert: THAlertSave;
    HNext : THAlertSave;

  {$S SegTEAlert }
  begin {KillAlert}
    {$IFC SampCalls}   ALogCall;   {$ENDC}
    HAlert:=AlertHead;
    while HAlert<>NIL do begin
      HNext:=HAlert^^.Next;

      if HAlert^^.FromTerm=HTerm then
        DelAlert (HAlert);

      HAlert:=HNext;
    end;
  end;  {KillAlert}


procedure PostAlert (AlertKind: TAlertType; AlertNumber: Integer;
                     Param1: TParamAlert; Param2: TParamAlert; Param3: TParamAlert);
   {PostAlert displays the given alert with the given paramters.}

  {$S SegTEAlert }
   begin {PostAlert}
     {$IFC SampCalls}   ALogCall;   {$ENDC}
     ParamAlert (Param1, Param2, Param3);
     case AlertKind of
       AlrtNote: NoteAlert (MyAlerts, AlertNumber);
       AlrtStop: StopAlert (MyAlerts, AlertNumber);
       AlrtWait: WaitAlert (MyAlerts, AlertNumber);
     end;
   end;  {PostAlert}


procedure GiveAlert (HTerm: THTerm; TheKind: TAlertType; TheNr: Integer;
                     P1: TParamAlert; P2: TParamAlert; P3: TParamAlert);
  {GiveAlert is called whenever anything needs to make an alert.  If there}
  {is an active LisaTerminal document then the alert is given normally.  If}
  {LisaTerminal is inactive and it is a stop or note alert, it is put on the}
  {alert queue, and a noise is given to alert the user.  If LT is inactive and}
  {it is a wait alert, it is ignored.  Calls to GiveAlert for a WaitAlert}
  {should be followed by a DoneAlert to take the alert back down.  GiveAlert}
  {must not be used for CautionAlerts or AskAlerts.  Instead, action should}
  {be taken in the code if not IsActive, and a matching alert should be given}
  {(using GiveAlert) to note what action was taken.  Note and Stop Alerts are}
  {only posted if HTerm is on the list of terminals, or if HTerm is NIL.}

  var
    GiveIt: Boolean;
    TempTerm: THTerm;
    HAlert: THAlertSave;


  procedure MakeNoise;
    {MakeNoise uses the hardware to signal that an alert has happened.}

    var
      OldVolume: Integer;
      I: Integer;

   {$S SegTEAlert }
    begin {MakeNoise}
      {$IFC SampCalls}   ALogCall;   {$ENDC}
      OldVolume:=Volume;

      for I:=7 downto 0 do begin
        SetVolume (I);
        if I=7 then
          Noise (1000);

        Wait (10);
      end;
      Silence;

      for I:=7 downto 0 do begin
        SetVolume (I);
        if I=7 then
          Noise (2000);

        Wait (10);
      end;
      Silence;

      SetVolume (OldVolume);
    end;  {MakeNoise}

  {$S SegTEAlert }
  begin {GiveAlert}
    {$IFC SampCalls}   ALogCall;   {$ENDC}
    if TheKind=AlrtWait then       {Post or queue it if it is a wait alert ...}
      GiveIt:=True

    else if not IsActive then      {... or if we're not active ...}
      GiveIt:=True

    else if HTerm=NIL then         {... or if it's not for a specific terminal ...}
      GiveIt:=True

    else begin                     {... or if it's for an existing terminal.}
      TempTerm:=TermList;
      while (TempTerm<>HTerm) and (TempTerm<>NIL) do
        TempTerm:=TempTerm^^.Next;

      GiveIt:= (TempTerm=HTerm);
    end;

    if GiveIt then
      if IsActive then             {Post the alert.}
        PostAlert (TheKind, TheNr, P1, P2, P3)

      else                         {Queue the alert.}
        if TheKind<>AlrtWait then begin
          AddAlert (HAlert);
          with HAlert^^ do begin
            AlertNumber:=TheNr;
            AlertKind:=TheKind;

            Param1:=P1;
            Param2:=P2;
            Param3:=P3;

            FromTerm:=HTerm;
          end;

          MakeNoise;
        end;
  end;  {GiveAlert}


procedure DoneAlert;
  {DoneAlert is called to take down a WaitAlert passed to GiveAlert.  If there}
  {is an active LisaTerminal document then the alert is removed from the screen.}

  {$S SegTEAlert }
  begin {DoneAlert}
    {$IFC SampCalls}   ALogCall;   {$ENDC}
    if IsActive then begin
      EndWaitAlert;
      if EventAvail then;
      FlushWindow (AlertFolder);
    end;
  end;  {DoneAlert}


procedure SayAlerts;
  {SayAlerts is called from MainLoop when there is an active LisaTerminal}
  {document.  It runs through the queue of pending alerts (alerts left when}
  {LT is inactive), and tells the user about each one.  Each alert is removed}
  {from the queue after it is put up for the user to see.}

  {$S SegTEAlert }
  begin {SayAlerts}
    {$IFC SampCalls}   ALogCall;   {$ENDC}
    while AlertHead<>NIL do begin
      with AlertHead^^ do
        PostAlert (AlertKind, AlertNumber, Param1, Param2, Param3);

      DelAlert (AlertHead);
    end;
  end;  {SayAlerts}

{$S SegTE }

ÿ