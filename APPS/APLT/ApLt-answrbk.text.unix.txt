{ Copyright 1983, Apple Computer, Inc. }

{$S SegTEAnswr }

procedure EndAnswrBk (DoIt: Boolean);
  {EndAnswrBk is called when the answerback dialog is finished.  If DoIt is set}
  {then EndAnswrBk sets TheTerm's AnswrBk to the AnswerMsg.}

  var
    TheTitle: Str30;

  {$S SegTEAnswr }
  begin {EndAnswrBk}
    {$IFC SampCalls}   ALogCall;   {$ENDC}
    if DoIt then
      TheTerm^^.Setup.AnswrBk:=AnswerMsg;

    Answering:=False;
    ClearDBox;
  end; {EndAnswrBk}


procedure GetAnswrBk(thisEvent: EventRec);
{GetAnswrBk processes events sent to the dialog box folder.  Only KeyDown events}
{are serviced.}
const
    maxLen = 40;            (* max length of names *)
var ch:        char;
    endCh:     char;
    curLen:    Integer;
    name:      ^Str40;
    seq:       PAOC;
    len:       Integer;
    i:         Integer;
    first:     Integer;
    endSet:    Boolean;

{$S SegTEAnswr }
begin
    {$IFC SampCalls}   ALogCall;   {$ENDC}
    (* Process the event record, adding ascii characters to the *)
    (* dialogbox output data until get the same as the first char. *)
    (* The prompt has already been displayed in the SetUpProc or RestoreProc. *)

    (* process only keyDown events *)
    if thisEvent.what = keyDown then begin
        (* get state of output data *)
        name      := Pointer(Ord(theDBox.outData));
        curLen    := Length(name^);

        endSet    := curLen>0;          {The last character of the message is}
        if endSet then begin            {the first character that the user typed.}
            endCh := name^ [curLen];    {When endCh is typed again, the dialog}
            curLen:= curLen - 1;        {will be terminated.}
        end;
        name^ [0] := chr(curLen);
        ch        := thisEvent.ascii;

        if (ch=endCh) and endSet then        {Is it the end of the dialog?}
            CallEndProc(TRUE,theDBox.endProc)
        else if curLen<=maxLen then begin    {No... Process this event.}
            EventToSeq (TheTerm, thisEvent, seq, len); {Map through the keyboard.}

            if len>0 then begin              {Translated to something.}
                if not endSet then begin     {This is the first character.}
                    first := 2;              {Use it for termination.}
                    endCh := seq [1];
                    endSet := TRUE;
                end else
                    first := 1;

                for i := 1 to len do begin   {Put the keystroke in the name.}
                    if i>=first then begin
                        name^ := concat(name^, 'x');
                        curLen := curLen + 1;
                        name^ [curLen] := seq [i];
                    end;

                    if ord(seq [i]) in [32..126] then {Echo it.}
                        DrawChar(seq [i])
                    else
                        DrawChar(chr($A5));  {Echo non-print as a bullet.}
                    if curLen>=maxLen then
                        CallEndProc(TRUE,theDBox.endProc);
                end;

                if endSet then begin         {Tack on the terminating character.}
                    name^ := concat(name^,'x');
                    curLen := curLen + 1;
                    name^ [curLen] := endCh;
                end;
            end;
        end;
    end;
end; (* GetAnswrBk *)


procedure BeginAnswrBk;
  {BeginAnswrBk starts the keystroke dialog for answerback messages.}

  var
    ThePrompt: Str30;

  {$S SegTEAnswr }
  begin {BeginAnswrBk}
    {$IFC SampCalls}   ALogCall;   {$ENDC}
    with TheDBox do                          {Kill pending dialog.}
      if IsOpen then
        CallEndProc (False, EndProc);

    GetItem (TheMenus [MsgMenu], MsgAnswrBk, @ThePrompt);

    AnswerMsg:='';
    Answering:=True;
    SetDBox (Pointer (Ord (@ThePrompt)),     {The prompt (in-data).}
             Pointer (Ord (@AnswerMsg)),     {The resulting number (out-data).}
             @GetAnswrBk,                    {The event procedure.}
             @TrackMessage,                  {The mouse track procedure.}
             @RestoreName,                   {The restore (update) procedure.}
             @EndAnswrBk);                   {Dialog end procedure.}

    SetPort (DialogFolder);
    RestoreName;
  end; {BeginAnswrBk}

{$S SegTE }
ÿ