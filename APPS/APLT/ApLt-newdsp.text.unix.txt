{ Copyright 1983, Apple Computer, Inc. }

{$S SegTECold}
procedure NewHTerm (var HTerm: THTerm);
  {NewHTerm allocates a TTerm record.}

  {$S SegTECold}
  begin {NewHTerm}
    {$IFC SampCalls}   ALogCall;   {$ENDC}
    HTerm:=Pointer (Ord (HAllocate (TheHeap, SizeOf (TTerm))));
  end; {NewHTerm}

procedure DspHTerm (HTerm: THTerm);
  {DspHTerm disposes of a TTerm record.}

  {$S SegTECold}
  begin {DspHTerm}
    {$IFC SampCalls}   ALogCall;   {$ENDC}
    FreeBk (TheHeap, Pointer (Ord (HTerm)), TyBkStd);
  end; {DspHTerm}

procedure NewHStyle (var HStyle: THStyle);
  {NewHStyle allocates a TStyle record.}

  {$S SegTECold}
  begin {NewHStyle}
    {$IFC SampCalls}   ALogCall;   {$ENDC}
    HStyle:=Pointer (Ord (HAllocate (TheHeap, SizeOf (TStyle))));
  end; {NewHStyle}

procedure DspHStyle (HStyle: THStyle);
  {DspHStyle disposes of a TStyle record.}

  {$S SegTECold}
  begin {DspHStyle}
    {$IFC SampCalls}   ALogCall;   {$ENDC}
    FreeBk (TheHeap, Pointer (Ord (HStyle)), TyBkStd);
  end; {DspHStyle}

procedure NewHPage (var HPage: THPage);
  {NewHPage allocates a TPage record.}

  {$S SegTECold}
  begin {NewHPage}
    {$IFC SampCalls}   ALogCall;   {$ENDC}
    HPage:=Pointer (Ord (HAllocate (TheHeap, SizeOfTPage + PageInit)));
  end; {NewHPage}

procedure SizeHPage (HPage: THPage; PageSize: Integer);
  {SizeHPage changes HPage to have Page: packed array [1..PageSize] of Char.}

  {$S SegTECold}
  begin {SizeHPage}
    {$IFC SampCalls}   ALogCall;   {$ENDC}
    ChangeSizeH (TheHeap, Pointer (Ord (HPage)), SizeOfTPage + PageSize);
  end; {SizeHPage}

procedure DspHPage (HPage: THPage);
  {DspHPage disposes of a TPage record.}

  {$S SegTECold}
  begin {DspHPage}
    {$IFC SampCalls}   ALogCall;   {$ENDC}
    FreeBk (TheHeap, Pointer (Ord (HPage)), TyBkStd);
  end; {DspHPage}

procedure NewHBlinkItem (var HBlinkItem: THBlinkItem);
  {NewHBlinkItem allocates a TBlinkItem record.}

  {$S SegTECold}
  begin {NewHBlinkItem}
    {$IFC SampCalls}   ALogCall;   {$ENDC}
    HBlinkItem:=Pointer (Ord (HAllocate (TheHeap, SizeOf (TBlinkItem))));
  end; {NewHBlinkItem}

procedure DspHBlinkItem (HBlinkItem: THBlinkItem);
  {DspHBlinkItem disposes of a TBlinkItem record.}

  {$S SegTECold}
  begin {DspHBlinkItem}
    {$IFC SampCalls}   ALogCall;   {$ENDC}
    FreeBk (TheHeap, Pointer (Ord (HBlinkItem)), TyBkStd);
  end; {DspHBlinkItem}

procedure NewHCache (var HCache: THCache);
  {NewHCache allocates a TCache record.}

  {$S SegTECold}
  begin {NewHCache}
    {$IFC SampCalls}   ALogCall;   {$ENDC}
    HCache:=Pointer (Ord (HAllocate (TheHeap, SizeOf (TCache))));
  end; {NewHCache}

procedure DspHCache (HCache: THCache);
  {DspHCache disposes of a TCache record.}

  {$S SegTECold}
  begin {DspHCache}
    {$IFC SampCalls}   ALogCall;   {$ENDC}
    FreeBk (TheHeap, Pointer (Ord (HCache)), TyBkStd);
  end; {DspHCache}

procedure NewHLine (var HLine: THLine);
  {NewHLine allocates a TLine record.}

  {$S SegTECold}
  begin {NewHLine}
    {$IFC SampCalls}   ALogCall;   {$ENDC}
    HLine:=Pointer (Ord (HAllocate (TheHeap, SizeOf (TLine))));
  end; {NewHLine}

procedure DspHLine (HLine: THLine);
  {DspHLine disposes of a TLine record.}

  {$S SegTECold}
  begin {DspHLine}
    {$IFC SampCalls}   ALogCall;   {$ENDC}
    FreeBk (TheHeap, Pointer (Ord (HLine)), TyBkStd);
  end; {DspHLine}

procedure NewHCkForm (var HCkForm: TCkFormHnd; NrItems: Integer);
  {NewHCkForm allocates a new TCkFormInfo record with NrItems+1 elements}
  {in CkItmLst.}

  var
    FormSize: Integer;

  {$S SegTECold}
  begin {NewHCkForm}
    {$IFC SampCalls}   ALogCall;   {$ENDC}
    FormSize:=SizeOf (TCkFormInfo) + SizeOf (TCkBoxPtr)*NrItems;
    HCkForm:=Pointer (Ord (HAllocate (TheHeap, FormSize)));
  end; {NewHCkForm}


procedure DspHCkForm (HCkForm: TCkFormHnd);
  {DspHCkForm disposes of a TCkFormInfo record.}

  {$S SegTECold}
  begin {DspHCkForm}
    {$IFC SampCalls}   ALogCall;   {$ENDC}
    FreeBk (TheHeap, Pointer (Ord (HCkForm)), TyBkStd);
  end; {DspHCkForm}

{procedure NewHRowList (var HRowList: THRowList; NrLines: Integer);
  NewHRowList allocates a new TRowList record dimensioned [1..NrLines].

  begin NewHRowList
    HRowList:=Pointer (Ord (HAllocate (TheHeap, NrLines*SizeOf (THLine))));
  end; NewHRowList

procedure DspHRowList (HRowList: THRowList);
  DspHRowList disposes of a TRowList record.

  begin DspHRowList
    FreeBk (TheHeap, Pointer (Ord (HRowList)), TyBkStd);
  end; DspHRowList}


procedure NewHMatch (var HMatch: THMatch);
  {NewHMatch allocates a TMatch record.}

  {$S SegTE}
  begin {NewHMatch}
    {$IFC SampCalls}   ALogCall;   {$ENDC}
    HMatch:=Pointer (Ord (HAllocate (TheHeap, SizeOf (TMatch))));
  end; {NewHMatch}


procedure DspHMatch (HMatch: THMatch);
  {DspHMatch disposes of a TMatch record.}

  {$S SegTE}
  begin {DspHMatch}
    {$IFC SampCalls}   ALogCall;   {$ENDC}
    FreeBk (TheHeap, Pointer (Ord (HMatch)), TyBkStd);
  end; {DspHMatch}


procedure NewHAlertSave (var HAlertSave: THAlertSave);
  {NewHAlertSave allocates a TAlertSave record.}

  {$S SegTECold}
  begin {NewHAlertSave}
    {$IFC SampCalls}   ALogCall;   {$ENDC}
    HAlertSave:=Pointer (Ord (HAllocate (TheHeap, SizeOf (TAlertSave))));
  end; {NewHAlertSave}


procedure DspHAlertSave (HAlertSave: THAlertSave);
  {DspHAlertSave disposes of a TAlertSave record.}

  {$S SegTECold}
  begin {DspHAlertSave}
    {$IFC SampCalls}   ALogCall;   {$ENDC}
    FreeBk (TheHeap, Pointer (Ord (HAlertSave)), TyBkStd);
  end; {DspHAlertSave}

ÿ