{ Copyright 1983, Apple Computer, Inc. }
{$S SegTE}

procedure SizeHeap (Hz: THz; var DSRefNum: Integer; BytesNeeded: Integer;
          var HeapSize: LongInt; var HeapNeed: LongInt; var HeapWant: LongInt;
          var Mem_Size: LongInt; var Mem_Need: LongInt; var Mem_Want: LongInt;
          var DiskSize: LongInt; var DiskNeed: LongInt; var DiskWant: LongInt
                    );
  {SizeHeap returns HeapSize, Mem_Size and DiskSize with the current sizes}
  {(in bytes of course) of heap Hz, the memory segment and the disk segment.}
  {It then returns the sizes needed and desired (determined by global constants)}
  {of the three for normal operational state.  DSRefNum is returned with the}
  {RefNum for the data segment containing Hz.}

  var
    eCode: Integer;
    Info_Rec: DSInfoRec;

  {$S SegTE}
  begin {SizeHeap}
    {$IFC SampCalls}   ALogCall;   {$ENDC}
    Info_Address (eCode, Ord (Hz), DSRefNum);
    Info_DataSeg (eCode, DSRefNum, Info_Rec);

    HeapSize:=CBofHz (Hz);
    HeapNeed:=HeapSize+BytesNeeded;
    HeapWant:=HeapNeed+HeapExtra;

    Mem_Size:=Info_Rec.Mem_Size;
    Mem_Need:=HeapNeed+MinMem_Extra;
    Mem_Want:=HeapWant+MaxMem_Extra;

    DiskSize:=Info_Rec.Disc_Size;
    DiskNeed:=Mem_Need+MinDiskExtra;
    DiskWant:=Mem_Want+MaxDiskExtra;
  end;  {SizeHeap}


function HeapError (Hz: THz; BytesNeeded: Integer): Integer;
  {HeapError gets called when the heap zone is full.}

  var
    DSRefNum: Integer;

    HeapSize: LongInt;             {Previous heap size.}
    HeapNeed: LongInt;             {Minimum  heap size.}
    HeapWant: LongInt;             {Desired  heap size.}
    NewHSize: LongInt;             {New      heap size.}

    Mem_Size: LongInt;             {Previous memory size.}
    Mem_Need: LongInt;             {Minimum  memory size.}
    Mem_Want: LongInt;             {Desired  memory size.}
    NewMSize: LongInt;             {New      memory size.}

    DiskSize: LongInt;             {Previous disk size.}
    DiskNeed: LongInt;             {Minimum  disk size.}
    DiskWant: LongInt;             {Desired  disk size.}
    NewDSize: LongInt;             {New      disk size.}

    {$IFC Scramble }
      Checking: Boolean;
    {$ENDC }


  function TryExpand: Boolean;
    {TryExpand tries to expand the heap, and the memory and disk data segments}
    {if needed, based on the parameters local to HeapError.  TryExpand returns}
    {true if the attempt succeeded.}

    var
      eCode: Integer;

    {$S SegTE}
    begin {TryExpand}
      {$IFC SampCalls}   ALogCall;   {$ENDC}
      eCode:=0;

      if Mem_Size >= Mem_Need then begin                {Expand heap only.}
        {$IFC DbgHeap }
          Write ('Case 1 ');
        {$ENDC }

        NewMSize:=Mem_Size;

      end else if DiskSize >= DiskNeed then begin       {Expand heap and memory only.}
        {$IFC DbgHeap }
          Write ('Case 2 ');
        {$ENDC }

        Size_DataSeg (eCode, DSRefNum,
                      (DiskSize - MinDiskExtra) - Mem_Size, NewMSize,
                      0                                   , NewDSize);

      end else begin                                    {Try for what we want.}
        Size_DataSeg   (eCode, DSRefNum, Mem_Want - Mem_Size, NewMSize,
                                         DiskWant - DiskSize, NewDSize);

        if eCode<>0 then begin                          {Didn't work, try what we need.}
          {$IFC DbgHeap }
            Write ('Case 3b');
          {$ENDC }

          Size_DataSeg (eCode, DSRefNum, Mem_Need - Mem_Size, NewMSize,
                                         DiskNeed - DiskSize, NewDSize);
        end
          {$IFC DbgHeap }
            else Write ('Case 3a')
          {$ENDC };
      end;

      NewHSize:=HeapNeed + (NewMSize - Mem_Need);
      TryExpand:= (eCode=0) and (NewHSize>=HeapNeed);
    end;  {TryExpand}

  {$S SegTE}
  begin {HeapError}
    {$IFC SampCalls}   ALogCall;   {$ENDC}
    {$IFC DbgHeap }
      WriteLn;
      WriteLn ('Heap expansion requested.');
    {$ENDC }

    {$IFC FindDecr }
      if TermList<>NIL then
        PrintRgns (TermList, 'HeapError 1');
    {$ENDC }

    {$IFC Scramble }
      Checking:=Hz^.fCheck;
      Hz^.fCheck:=False;
    {$ENDC }

    SizeHeap (Hz, DSRefNum, BytesNeeded,        {Find the sizes.}
              HeapSize, HeapNeed, HeapWant,
              Mem_Size, Mem_Need, Mem_Want,
              DiskSize, DiskNeed, DiskWant);

    {$IFC Scramble }
      Hz^.fCheck:=Checking;
    {$ENDC }

    {$IFC DbgHeap }
      Write   ('Need: ', BytesNeeded:5, '  Heap: ', HeapSize:8);
      WriteLn ('  Mem: ', Mem_Size:8, '  Disk: ', DiskSize:8);

      NewHSize:=HeapSize;
      NewMSize:=Mem_Size;
      NewDSize:=DiskSize;
    {$ENDC }

    if TryExpand then                           {Try to expand normally.}
      HeapState:=HeapNormal

    else begin                                  {No dice, try warning heap level.}
      {$IFC DbgHeap }
        WriteLn (' Failed.  *** WARNING STATE ***');
      {$ENDC }

      Mem_Need:=HeapNeed + WrnMem_Extra;
      DiskNeed:=Mem_Need + WrnDiskExtra;

      if TryExpand then
        HeapState:=HeapWarning

      else begin                                {No dice again, space is critically low.}
        {$IFC DbgHeap }
          WriteLn (' Failed.  *** CRITICAL STATE ***');
        {$ENDC }

        Mem_Need:=HeapNeed + CrtMem_Extra;
        DiskNeed:=Mem_Need + CrtDiskExtra;

        if TryExpand then
          HeapState:=HeapCritical

        else begin                              {Couldn't expand at all!!.}
          {$IFC DbgHeap }
            WriteLn (' Failed.  *** GOODBYE ***');
          {$ENDC }

          Quit;
        end;
      end;
    end;

    {$IFC DbgHeap }
      Write   ('      Heap: ', NewHSize:8);
      WriteLn ('  Mem: ', NewMSize:8, '  Disk: ', NewDSize:8);
    {$ENDC }

    if NewHSize - HeapSize <= MaxInt then
      HeapError:=NewHSize - HeapSize
    else
      if Odd (MaxInt-2) then
        HeapError:=MaxInt-1
      else
        HeapError:=MaxInt;

    {$IFC FindDecr }
      if TermList<>NIL then
        PrintRgns (TermList, 'HeapError 2');
    {$ENDC }
  end; {HeapError}


procedure ShrinkSegMemory (Hz: THz);
  {ShrinkSegMemory compacts the heap (Hz) and shrinks the memory and}
  {disk data segments to contain the new heap size.  ShrinkSegMemory}
  {first tries to shrink to the maximum deltas, and, if that failed,}
  {to the minimum deltas.  The data segments will never grow due to}
  {ShrinkSegMemory.}

  var
    eCode: Integer;
    DSRefNum: Integer;

    HeapSize: LongInt;                  {Previous heap size.}
    HeapNeed: LongInt;                  {Minimum  heap size (ignored).}
    HeapWant: LongInt;                  {Desired  heap size (ignored).}

    Mem_Size: LongInt;                  {Previous memory size.}
    Mem_Need: LongInt;                  {Minimum  memory size.}
    Mem_Want: LongInt;                  {Desired  memory size.}
    Mem_Dlta: LongInt;                  {Delta    memory size.}
    NewMSize: LongInt;                  {New      memory size.}

    DiskSize: LongInt;                  {Previous disk size.}
    DiskNeed: LongInt;                  {Minimum  disk size.}
    DiskWant: LongInt;                  {Desired  disk size.}
    DiskDlta: LongInt;                  {Delta    disk size.}
    NewDSize: LongInt;                  {New      disk size.}

  {$S SegTE}
  begin {ShrinkSegMemory}
    {$IFC SampCalls}   ALogCall;   {$ENDC}
    if CBShrinkHz (Hz, Hz^.CBFree)=0 then {do nothing};

    SizeHeap (Hz, DSRefNum, 0,                    {Find the sizes.}
              HeapSize, HeapNeed, HeapWant,
              Mem_Size, Mem_Need, Mem_Want,
              DiskSize, DiskNeed, DiskWant);

    NewMSize:=Mem_Size;
    NewDSize:=DiskSize;

    if Mem_Size >= Mem_Want then                  {Try to get what we want.}
      Mem_Dlta:=Mem_Want - Mem_Size
    else                                          {But don't grow to get it.}
      Mem_Dlta:=0;

    if DiskSize >= DiskWant then
      DiskDlta:=DiskWant - DiskSize
    else
      DiskDlta:=0;

    Size_DataSeg (eCode, DSRefNum, Mem_Dlta, NewMSize,
                                   DiskDlta, NewDSize);

    if eCode<>0 then begin                        {Can't get what we want.}
      if Mem_Size >= Mem_Need then                {Get what we need.}
        Mem_Dlta:=Mem_Need - Mem_Size
      else
        Mem_Dlta:=0;

      if DiskSize >= DiskNeed then
        DiskDlta:=DiskNeed - DiskSize
      else
        DiskDlta:=0;

      Size_DataSeg (eCode, DSRefNum, Mem_Dlta, NewMSize,
                                     DiskDlta, NewDSize);
    end;

    if (HeapSize+MinMem_Extra <= NewMSize) and         {Within HeapNormal deltas?}
       (NewMSize+MinDiskExtra <= NewDSize) then
      HeapState:=HeapNormal

    else if (HeapSize+WrnMem_Extra <= NewMSize) and    {Within HeapWarning deltas?}
            (NewMSize+WrnDiskExtra <= NewDSize) then
      HeapState:=HeapWarning

    else                                               {Space is critical!}
      HeapState:=HeapCritical;

    {$IFC DbgHeap }
      WriteLn;
      if eCode=0 then begin
        Write   ('Shrinking... Heap: ', HeapSize:8);
        WriteLn ('  Mem: ', NewMSize:8, '  Disk: ', NewDSize:8);
        case HeapState of
          HeapNormal  : WriteLn ('HeapState = HeapNormal');
          HeapWarning : WriteLn ('HeapState = HeapWarning');
          HeapCritical: WriteLn ('HeapState = HeapCritical');
        end;

      end else
        WriteLn ('Tried to shrink ... eCode = ', eCode:1);
    {$ENDC }
  end; {ShrinkSegMemory}

ÿ