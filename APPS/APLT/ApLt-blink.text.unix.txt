{ Copyright 1983, Apple Computer, Inc. }
{$S SegTEMain}
procedure MakeBlink (var HBlinker: THBlinkItem; MyFolder: GrafPtr);
  {MakeBlink makes a new blinking region on BlinkList with its associated folder}
  {pointing to MyFolder.  The region created is empty.}

  var
    TheRgn: RgnHandle;

  {$S SegTEMain}
  begin {MakeBlink}
    {$IFC SampCalls}   ALogCall;   {$ENDC}
    NewHBlinkItem (HBlinker);
    with HBlinker^^ do begin
      Folder:=MyFolder;
      Solid:=False;
      ShouldBeSolid:=False;

      Prev:=NIL;
      Next:=BlinkList;
    end;
    if BlinkList<>NIL then
      BlinkList^^.Prev:=HBlinker;
    BlinkList:=HBlinker;

    TheRgn:=NewRgn;
    RectRgn (TheRgn, ZeroRect);
    HBlinker^^.BlinkArea:=TheRgn;
  end; {MakeBlink}


procedure KillBlink (HBlinker: THBlinkItem);
  {KillBlink removes a blinking region from the screen and from BlinkList.}

  var
    SavePort: GrafPtr;
    ThePrev: THBlinkItem;
    TheNext: THBlinkItem;
    TheRgn: RgnHandle;

  {$S SegTEMain}
  begin {KillBlink}
    {$IFC SampCalls}   ALogCall;   {$ENDC}
    if BlinkVis or HBlinker^^.Solid then begin
      GetPort (SavePort);
      SetPort (HBlinker^^.Folder);
      InvertRgn (HBlinker^^.BlinkArea);
      SetPort (SavePort);
    end;

    with HBlinker^^ do begin
      ThePrev:=Prev;
      TheNext:=Next;
      TheRgn:=BlinkArea;
    end;
    DisposeRgn (TheRgn);
    DspHBlinker (HBlinker);

    if TheNext<>NIL then
      TheNext^^.Prev:=ThePrev;
    if ThePrev<>NIL then
      ThePrev^^.Next:=TheNext
    else
      BlinkList:=TheNext;
  end; {KillBlink}


procedure SetSolid (HBlinker: THBlinkItem; IsSolid: Boolean);
  {SetSolid sets HBlinker's Solid (Unblinking) attribute.}

  var
    SavePort: GrafPtr;

  {$S SegTEMain}
  begin {SetSolid}
    {$IFC SampCalls}   ALogCall;   {$ENDC}
    with HBlinker^^ do begin
      ShouldBeSolid:=IsSolid;

      if Solid<>IsSolid then begin
        Solid:=IsSolid;

        if not BlinkVis then begin
          GetPort (SavePort);
          SetPort (Folder);
          InvertRgn (BlinkArea);
          SetPort (SavePort);
        end;
      end;
    end;
  end; {SetSolid}


procedure ChangeBlink (HBlinker: THBlinkItem; TheArea: Rect);
  {ChangeBlink changes HBlinker's BlinkArea to TheArea.}

  var
    SavePort: GrafPtr;
    TheRgn: RgnHandle;

  {$S SegTE}
  begin {ChangeBlink}
    {$IFC SampCalls}   ALogCall;   {$ENDC}
    GetPort (SavePort);
    SetPort (HBlinker^^.Folder);

    if BlinkVis or HBlinker^^.Solid then begin
      TheRgn:=NewRgn;

      RectRgn (TheRgn, TheArea);
      XOrRgn (TheRgn, HBlinker^^.BlinkArea, TheRgn);
      InvertRgn (TheRgn);

      DisposeRgn (TheRgn);

    end else begin
      with HBlinker^^ do begin
        Solid:=True;
        ShouldBeSolid:=False;
      end;

      InvertRect (TheArea);
    end;

    SetPort (SavePort);

    RectRgn (HBlinker^^.BlinkArea, TheArea);
  end; {ChangeBlink}


procedure RgnChangeBlink (HBlinker: THBlinkItem; TheRgn: RgnHandle);
  {RgnChangeBlink changes HBlinker's BlinkArea to TheRgn.}

  var
    SavePort: GrafPtr;
    TempRgn: RgnHandle;

  {$S SegTEMain}
  begin {RgnChangeBlink}
    {$IFC SampCalls}   ALogCall;   {$ENDC}
    GetPort (SavePort);
    SetPort (HBlinker^^.Folder);

    if BlinkVis or HBlinker^^.Solid then begin
      TempRgn:=NewRgn;

      XOrRgn (TheRgn, HBlinker^^.BlinkArea, TempRgn);
      InvertRgn (TempRgn);

      DisposeRgn (TempRgn);

    end else begin
      with HBlinker^^ do begin
        Solid:=True;
        ShouldBeSolid:=False;
      end;

      InvertRgn (TheRgn);
    end;

    SetPort (SavePort);

    CopyRgn (TheRgn, HBlinker^^.BlinkArea);
  end; {RgnChangeBlink}


procedure AddBlink (HBlinker: THBlinkItem; TheArea: Rect);
  {AddBlink adds TheArea to HBlinker's BlinkArea.}

  var
    SavePort: GrafPtr;
    TheRgn: RgnHandle;
    PaintRgn: RgnHandle;

  {$S SegTEMain}
  begin {AddBlink}
    {$IFC SampCalls}   ALogCall;   {$ENDC}
    TheRgn:=NewRgn;
    RectRgn (TheRgn, TheArea);

    if BlinkVis or HBlinker^^.Solid then begin
      PaintRgn:=NewRgn;
      DiffRgn (TheRgn, HBlinker^^.BlinkArea, PaintRgn);
      GetPort (SavePort);
      SetPort (HBlinker^^.Folder);
      InvertRgn (PaintRgn);
      SetPort (SavePort);
      DisposeRgn (PaintRgn);
    end;

    UnionRgn (TheRgn, HBlinker^^.BlinkArea, HBlinker^^.BlinkArea);
    DisposeRgn (TheRgn);
  end; {AddBlink}


procedure SubBlink (HBlinker: THBlinkItem; TheArea: Rect);
  {SubBlink removes TheArea from HBlinkers's BlinkArea.}

  var
    SavePort: GrafPtr;
    TheRgn: RgnHandle;
    PaintRgn: RgnHandle;

  {$S SegTE}
  begin {SubBlink}
    {$IFC SampCalls}   ALogCall;   {$ENDC}
    TheRgn:=NewRgn;
    RectRgn (TheRgn, TheArea);

    if BlinkVis or HBlinker^^.Solid then begin
      PaintRgn:=NewRgn;
      SectRgn (TheRgn, HBlinker^^.BlinkArea, PaintRgn);

      GetPort (SavePort);
      SetPort (HBlinker^^.Folder);
      InvertRgn (PaintRgn);
      SetPort (SavePort);

      DisposeRgn (PaintRgn);
    end;

    DiffRgn (HBlinker^^.BlinkArea, TheRgn, HBlinker^^.BlinkArea);
    DisposeRgn (TheRgn);
  end; {SubBlink}


procedure ClipBlink (HBlinker: THBlinkItem; TheArea: Rect);
  {ClipBlink removes all of the HBlinker that falls outside of TheArea.}

  var
    SavePort: GrafPtr;
    TheRgn: RgnHandle;
    PaintRgn: RgnHandle;

  {$S SegTE}
  begin {ClipBlink}
    {$IFC SampCalls}   ALogCall;   {$ENDC}
    TheRgn:=NewRgn;
    RectRgn (TheRgn, TheArea);

    if BlinkVis or HBlinker^^.Solid then begin
      PaintRgn:=NewRgn;
      DiffRgn (HBlinker^^.BlinkArea, TheRgn, PaintRgn);

      GetPort (SavePort);
      SetPort (HBlinker^^.Folder);
      InvertRgn (PaintRgn);
      SetPort (SavePort);

      DisposeRgn (PaintRgn);
    end;

    SectRgn (HBlinker^^.BlinkArea, TheRgn, HBlinker^^.BlinkArea);
    DisposeRgn (TheRgn);
  end; {ClipBlink}


procedure BlinkAll;
  {BlinkAll traverses the list of blinking regions and inverts each.}

  var
    SavePort: GrafPtr;
    HBlinker: THBlinkItem;

  {$S SegTEIdle}
  begin {BlinkAll}
    {$IFC SampCalls}   ALogCall;   {$ENDC}
    BlinkVis:=not BlinkVis;

    GetPort (SavePort);

    HBlinker:=BlinkList;
    while HBlinker<>NIL do begin
      with HBlinker^^ do
        if Solid then begin
          if not ShouldBeSolid then
            Solid:=False;

        end else
          if not EmptyRgn (BlinkArea) then begin
            SetPort (Folder);
            InvertRgn (BlinkArea);
          end;

      HBlinker:=HBlinker^^.Next;
    end;

    SetPort (SavePort);
  end; {BlinkAll}
  {$S SegTE}

ÿ