(* ********************************************************************* *)

(* CopyRight 1983, Apple Computer Inc. *)
(* GE Unit INT Include File - needing units to be swapped in *)

(* ********************************************************************* *)
(*$S Init*)

    (* Initialize all GE Units.  Requires that they be swapped in. *)

    procedure InitGE2;
    VAR {XXX timing vars}
        tLast:    LongInt;
        tStart:   LongInt;

    (* ***************************************************************** *)

        procedure SetProtoPnl;  (* Create Prototype panel *)
        type
            TSArray = Array[0..255] of TByte;
        var i: integer;
            s: Str255;
            sPtr: ^TSArray;
            pt2D: Point2D;
        begin
        {$IFC sampcalls} ALogCall; {$ENDC}
            (* protoBoxes are 0,vOffset,35,23+vOffset *)
            (* prototypes are 6,4+vOffset,29,19+vOffset *)
            for i := iProtoFirst to iProtoLast do
                with protoObj[i],oDat do begin
                    kind      := i;
                    cSel      := iSelNil;
                    pSel      := iSelNil;
                    locked    := 0;
                    inf.fgClr := iClrBlack;
                    inf.bgClr := iClrWhite;
                    inf.pnSiz := 1;
                    inf.pnPat := iPenBlack;
                    inf.flPat := iFillClear;
                    inf.dat   := 0;
                    GetPRect(i,bBox);
                    InsetRect(bBox,6,4);
                    if i<>iObjText then begin
                        ScrnToWld(bBox.topLeft,p1);
                        ScrnToWld(bBox.botRight,p2);
                        p2.x := p2.x-1;
                        p2.y := p2.y-1;
                    end;
                end;

            with protoObj[iObjText],oDat do begin
                (* set up txtLoc array to reflect alignment setting *)
                with bBox do begin
                    SetPt(txtLoc[1],left              ,top+12);
                    SetPt(txtLoc[2],right             ,top+12);
                    SetPt(txtLoc[3],(right+left) Div 2,top+12);
                end;
                GetItem(geMenus[iMnuExtra],1,@s);
                inf.tLen   := Length(s);
                inf.fLen   := 1;
                inf.tDat   := cAlnCtr;   (* how proto is drawn *)
                inf.flPat  := 2;
                tLoc.x     := txtLoc[3].h;
                tLoc.y     := txtLoc[3].v;
                tHnd       := HAllocate(geHHz,inf.tLen);
                sPtr       := Pointer(Ord(tHnd^));
                for i := 1 to inf.tLen do
                    sPtr^[i-1] := Ord(s[i]);
                (* fmt is set up in InitTxt *)
            end;

            with protoObj[iObjSLin],bBox,oDat do begin
                p1.y := top+2;
                p2.y := top+13;
            end;

            protoObj[iObjRndR].oDat.inf.dat := 1;

            with protoObj[iObjArc],oDat do begin
                inf.flPat := iFillClear;
                arc := Pointer(Ord(HAllocate(geHHz,SizeOf(TArcRec))));
                with arc^^ do
                with bBox do begin
                    SetRect2D(aR2D,-12,top+2,28,top+28);
                    aStart := 0;
                    aAngle := 90;
                end;
            end;

            {XXX bypass FCk in CloseCLst}
            curDoc.hHz := geHHz;

            (* needs Unit DAT *)
            with protoObj[iObjFHnd],oDat do begin
                inf.flPat := iFillClear;
                OpenCLst(geHHz,clst,17,iObjFHnd);
                SetPt2D(cLst^^.beg2D,bBox.left,bBox.top+10);
                PutNode(clst,  2,  2);
                PutNode(clst,  3,  1);
                PutNode(clst,  3,  0);
                PutNode(clst,  5, -2);
                PutNode(clst,  2, -3);
                PutNode(clst,  1, -3);
                PutNode(clst, -1, -3);
                PutNode(clst, -2, -3);

                PutNode(clst, -2,  0);

                PutNode(clst, -3,  3);
                PutNode(clst, -1,  3);
                PutNode(clst,  1,  3);
                PutNode(clst,  2,  3);
                PutNode(clst,  5,  2);
                PutNode(clst,  2,  0);
                PutNode(clst,  3, -1);
                PutNode(clst,  2, -2);
                CloseCLst(clst);
            end;

            with protoObj[iObjPoly],oDat do begin
                inf.flPat := iFillClear;
                OpenCLst(geHHz,clst,5,iObjPoly);
                SetPt2D(cLst^^.beg2D,bBox.left,bBox.top);
                With cLst^^ do
                    c2DLst[0] := beg2D;
                pt2D.x := bBox.left;
                pt2D.y := bBox.top + 12;
                PutPNode(clst,pt2D);

                pt2D.x := pt2D.x + 17;
                pt2D.y := pt2D.y + 3;
                PutPNode(clst,pt2D);

                pt2D.x := pt2D.x + 7;
                pt2D.y := pt2D.y -15;
                PutPNode(clst,pt2D);

                pt2D.x := pt2D.x - 17;
                pt2D.y := pt2D.y + 8;
                PutPNode(clst,pt2D);

                CloseCLst(clst);
                cLst^^.cClose := iCLstUsr;
            end;

            {XXX undo FCk bypass in CloseCLst}
            curDoc.hHz := NIL;

        end; (* SetProtoPnl *)

    (* ***************************************************************** *)

    begin
        {$IFC sampcalls} ALogCall; {$ENDC} (* InitGE2 *)
        {XXX timing}
        if traceInit then begin
            tStart := Time;
            tLast  := Time;
            WrtTime('InitGE2',tLast);
        end;

        (* all units *)
        InitDat;
        if traceInit then WrtTime('    InitDAT',tLast);
        InitDBX2;
        if traceInit then WrtTime('    InitDBX2',tLast);
        InitSel;
        if traceInit then WrtTime('    InitSEL',tLast);
        InitUop;
        if traceInit then WrtTime('    InitUOP',tLast);
        InitMnu;
        if traceInit then WrtTime('    InitMNU',tLast);
        InitTxt;
        if traceInit then WrtTime('    InitTXT',tLast);
        InitDrw;
        if traceInit then WrtTime('    InitDRW',tLast);
        InitScr;
        if traceInit then WrtTime('    InitSCR',tLast);
        InitTrk;
        if traceInit then WrtTime('    InitTRK',tLast);
        InitCmd;
        if traceInit then WrtTime('    InitCMD',tLast);
        InitPrt;
        if traceInit then WrtTime('    InitPRT',tLast);
        SetProtoPnl;
        if traceInit then WrtTime('    SetProto',tLast);
        if traceInit then WrtTime('Total InitGE2',tStart);

        inInit := FALSE;
    end;  (* InitGE2 *)



ÿ