(* ********************************************************************* *)

(* CopyRight 1983, Apple Computer Inc. *)
(* GE Unit SCR Include File - Object List, Sel Display *)


(* ********************************************************************* *)

(* Object Display *)

(* ********************************************************************* *)
(*$S Core*)
    procedure FramePaper(thisRect: Rect);
    var sizeRect,wrkRect: Rect;
        sizeRgn: RgnHandle;
        thisRgn: RgnHandle;
        wrkRgn:  RgnHandle;
        thisPen: PenState;
    begin
        {$IFC sampcalls} ALogCall; {$ENDC}
        if traceCmd then
            WlnRect('    FramePaper',thisRect);

        with thisRect do
        if NOT (PtInRect(topLeft,sizeLBox) AND PtInRect(botRight,sizeLBox))
        then begin
            (* set pen *)
            GetPenState(thisPen);
            PenPat(Black);
            PenMode(patOr);
            PenSize(3,2);
            (* Zoom: get screen coords *)
            sizeRect := sizeLBox;
            GEMapRect(sizeRect);
            GEMapRect(thisRect);
            (* frame paper *)
            InsetRect(sizeRect,-3,-2);
            FrameRect(sizeRect);
            (* fill anything off paper with ltGray *)
            sizeRgn  := NewRgn;
            thisRgn  := NewRgn;
            wrkRgn   := NewRgn;
            wrkRect  := wrkLBox;
            GEMapRect(wrkRect);
            RectRgn(sizeRgn,sizeRect);
            RectRgn(thisRgn,thisRect);
            RectRgn(wrkRgn,wrkRect);
            DiffRgn(wrkRgn,sizeRgn,sizeRgn);
            SectRgn(thisRgn,sizeRgn,thisRgn);
            FillRgn(thisRgn,ltGray);
            DisposeRgn(sizeRgn);
            DisposeRgn(thisRgn);
            DisposeRgn(wrkRgn);
            (* restore pen *)
            SetPenState(thisPen);
        end;
    end; (* FramePaper *)

(* ********************************************************************* *)

    procedure ShowOLst(thisRect: Rect; showSelect: Boolean);
    var obj: TObjPtr;
        tempRect: Rect;
    begin
        {$IFC sampcalls} ALogCall; {$ENDC}
        if traceCmd then
            WlnRect('    ShowOLst:',thisRect);

        if curDoc.atr.tckOn then
            DrwTick(thisRect);
        ResetOLst(ilDirFwd,obj);
        while obj<>NIL do begin
            if SectRect(obj^.bBox,thisRect,tempRect) then
                if (obj^.cSel=iSelEdt) AND showSelect AND curDoc.edtStart then
                    DrwObj(obj)
                else if (obj^.cSel=iSelNil) or showSelect then
                    ShowObj(obj);
            GetNxtObj(ilDirFwd,obj);
        end;
        if curDoc.proto=iObjPoly then
            if NOT polyStart then
                if NOT autoSFlag then
                    DrwPLine(polyPt,lastPolyPt);
        if curDoc.atr.pgBOn then
            DrwPgBreak(thisRect);
    end; (* ShowOLst *)

(* ********************************************************************* *)

    procedure ShowRect(* r: Rect; showSelect,showHiLite,ersFlag: Boolean *);
    var vRect: Rect;
    begin
        {$IFC sampcalls} ALogCall; {$ENDC}
        (* show everything in the wrkLBox *)
        if traceCmd then begin
            write('ShowRect(');
            WrtRect(r);
            Writeln(',',showSelect,',',showHiLite,',',ersFlag,')');
        end;

        with curDoc.fldr^ do
        if fActive then
            vRect := visRgn^^.rgnBBox
        else
            vRect := portRect;
        GEUnMapRect(vRect);
        if SectRect(vRect,r,r) then
            if SectRect(wrkLBox,r,r) then begin
                GEClipRect(r);
                (* erase the rect *)
                if ersFlag then begin
                    (* reset txt hilite so erase doesn't confuse hilight state *)
                    if curDoc.fldSet then
                        HiLiteObj(CkObjTrfo(curDoc.txtObj),OFF);
                    vRect := r;
                    GEMapRect(vRect);
                    FillRect(vRect,white);
                end;
                (* frame the paper *)
                FramePaper(r);
                (* show objects *)
                if SectRect(dwgLBox,r,r) then begin
                    GEClipRect(r);
                    (* show objects *)
                    ShowOLst(r,showSelect);
                    if showSelect AND showHiLite then
                        HiliteSel(ON);
                end;
                (* restore clip *)
                GEClipRect(dwgLBox);
            end;
    end; (* ShowRect *)

(* ********************************************************************* *)
(*$S Ring*)
    procedure ShowRFrom(* r: Rect; obj: TObjPtr *);
    var tempRect: Rect;
    begin
        {$IFC sampcalls} ALogCall; {$ENDC}
        (* This procedure is called in lieu of ShowRect from routines
           which add objects to the top of the list, e.g. MkObjCmd,
           DupCmd.  Do NOT call from routines which require special
           casing for oLst traversal, such as iOpTop,iOpBot,iOpUnG.
           it shows obj AND all objects in front of it, e.g. text
           set traversal to end of graphical objects *)

        curDoc.oLst.lCur := obj;
        while obj<>NIL do begin
            if SectRect(obj^.bBox,r,tempRect) then
                ShowObj(obj);
            GetNxtObj(ilDirFwd,obj);
        end;
        HiliteSel(ON);
        if curDoc.atr.pgBOn then
            DrwPgBreak(r);
    end; (* ShowRFrom *)

(* ********************************************************************* *)
(*$S Core*)
    procedure ReShow(* r: Rect *);
    var flag: Boolean;
    begin
        {$IFC sampcalls} ALogCall; {$ENDC}
        ShowRect(r,TRUE,fActive,TRUE);
    end; (* ReShow *)

(* ********************************************************************* *)
(*$S Ring*)
    procedure ReShowUnion(* r,r1: Rect *);
    var flag: Boolean;
    begin
        {$IFC sampcalls} ALogCall; {$ENDC}
        UnionRect(r1,r,r);
        ReShowInset(r);
    end; (* ReShow *)

(* ********************************************************************* *)
(*$S Ring*)
    procedure ReShowInset(* r: Rect *);
    var flag: Boolean;
    begin
        {$IFC sampcalls} ALogCall; {$ENDC}
        InsetRect(r,-zoomKnobSz.h,-zoomKnobSz.v);
        ShowRect(r,TRUE,fActive,TRUE);
    end; (* ReShow *)

(* ********************************************************************* *)
(*$S Core*)
    procedure RSSel(* showHiLite: boolean *);
    var selRect: Rect;
        i: Integer;
        tTime: LongInt;
    begin
        {$IFC sampcalls} ALogCall; {$ENDC}
        (* EraseSel(curDoc.sLst); *)
        if traceTrk then begin tTime := TIME; WrtTime('ReShowSel',tTime); end;
        for i := 1 to curDoc.sLst^^.sCnt do
            EraseObj(CkObjTrfo(CurSelObj(i)));
        if traceTrk then WrtTime('    EraseObj',tTime);
        GetSelRect(curDoc.sLst,selRect);
        if traceTrk then WrtTime('    GetSelRect',tTime);
        ShowRect(selRect,TRUE,showHilite,FALSE);
        if traceTrk then WrtTime('    ShowRect',tTime);
    end; (* RSSel *)

(* ********************************************************************* *)
(*$S Core*)
    procedure ReShowSel;
    begin
        {$IFC sampcalls} ALogCall; {$ENDC}
        RSSel(TRUE);
    end; (* ReShowSel *)

(* ********************************************************************* *)

(* Selection Display *)

(* ********************************************************************* *)
(*$S Core*)
    procedure EraseSel;
    var selRect: Rect;
        i: Integer;
    begin
        {$IFC sampcalls} ALogCall; {$ENDC}
        (* erase objects *)
        for i := 1 to curDoc.sLst^^.sCnt do
            EraseObj(CkObjTrfo(CurSelObj(i)));

        GetSelRect(curDoc.sLst,selRect);
        ShowRect(selRect,FALSE,FALSE,FALSE);
        GEClipRect(dwgLBox);
    end; (* EraseSel *)

(* ********************************************************************* *)
(*$S Core*)
    procedure HiLiteSel(* sVal: Boolean *);
    var knobs: TKnobs;
        i,j: Integer;
        thisObj:  TObjPtr;
        tSel: TSelLst;
    begin
        {$IFC sampcalls} ALogCall; {$ENDC}
        if traceCmd then begin
            with curDoc.sLst^^ do
            writeln('HiLiteSel(',sState:4,',',sCnt:4,sVal,')');
        end;
        tSel := curDoc.sLst^^;
        if tSel.sState>iObjNil then
            HiLiteObj(CkObjTrfo(CurSelObj(1)),sVal)
        {
        else if tSel.sState=iSStPrt then
            ShowProto(curDoc.proto,TRUE)
        }
        else if tSel.sState=iSStGrp then begin
            (* hilite all objs in sLst *)
            for i := 1 to tSel.sCnt do begin
                thisObj := CkObjTrfo(CurSelObj(i));
                if thisObj^.oDat.kind=iObjText then
                    HiLiteObj(thisObj,sVal)
                else begin
                    GetObjKnobs(thisObj,knobs);
                    with knobs do
                    for j := 1 to knobCnt do
                        XorKnob(knobInfo[j]);
                end;
            end;
        end;
    end; (* HiLiteSel *)


ÿ