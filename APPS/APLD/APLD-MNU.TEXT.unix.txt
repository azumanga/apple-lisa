(* ********************************************************************* *)

(* CopyRight 1983,1984 Apple Computer Inc. *)
(* GE Menu Routines *)

(* ********************************************************************* *)

Unit Mnu;

(* Segment MNU *)
INTERFACE
USES
    (*$U UNITSTD*)     UnitStd,     (* interface units  *)
    (*$U UNITHZ*)      UnitHz,
    (*$U STORAGE*)     Storage,
    (*$U QUICKDRAW*)   QuickDraw,
    (*$U FONTMGR*)     FontMgr,
    (*$U libos/syscall.obj*)     SysCall,
    (*$U WM.EVENTS*)   Events,
    (*$U WM.FOLDERS*)  Folders,
    (*$U WM.MENUS*)    Menus,

    {$U LibPm/PmDecL}      PmDecL,
    {$U PrStdInfo}     PrStdInfo,
    {$U PrPublic}      PrPublic,
    (*$U ApLd/HDR *)     Hdr,         (* implementation units  *)
    {$IFC sampcalls}
    {$U apld/tracecalls.obj}  tracecalls,
    {$ENDC}
    (*$U ApLd/UTL *)     Utl,
    (*$U ApLd/DRW *)     Drw;

CONST
    (* menus *)
    iMnuFirst   =  2;
    iMnuLast    = 14;{changed to make room for color menu and pen menu}
    iMBarFirst  =  2;
    iMBarLast   = 10;
    iMnuFile    =  2;
    iMnuEdit    =  3;
    iMnuType    =  4;
    iMnuLayout  =  5;
    iMnuArrange =  6;
    iMnuFill    =  7;
    iMnuLines   =  8;
    iMnuPen     =  9;
    iMnuColor   = 10;
    iMnuDBug    = 11;
    iMnuExtra   = 12;
    iMnuCmds    = 13;
    iMnuScrap   = 14;
VAR
    geMenus:    Array[iMnuFirst..iMnuLast] of MenuInfo;

    procedure InitMNU;

(* ********************************************************************* *)

IMPLEMENTATION

(* ********************************************************************* *)

const
    (* menu parameters *)
    gMnuWidth   = 80;                   (* graphical menu width *)
    gColWidth   = 40;
    gNumRow     = 12;
    gNumCol     =  3;
    fStyleHt    = 16;
    lStyleHt    = 15;

VAR
    (* graphical menu *)
    patState: Boolean;
    patRect:  Rect;
    patTime:  LongInt;

(* ********************************************************************* *)
(*$S BasicOps*)

    procedure DrwPenMenu(menu: MenuInfo; menuRect: Rect);
    CONST
        vertSpace       =  15;    { vertical spacing in text menus }
        itemHoriz       =  13;    { text item menuRect.left offset }
        appleLeft       = -26;    { apple icon menuRect.right offset }
        itemRight       = -13;    { text item menuRect.right offset }
    VAR
        {len,}item,vItem,vTemp: INTEGER;
        {srcPtr:        ^Str255;}
        {srcAdr:        LongInt;}
        {disableFlag:   Boolean;}
        p1,p2:         Point;
    begin
        {$IFC sampcalls} ALogCall; {$ENDC}
        { draw all the text items }
        DrawTxtMenu(menu,menuRect);

        (* line size menu items *)
        PenNormal;
        vItem := menuRect.top-(vertSpace+1) Div 2;
        FOR item:=1 TO 4 DO with penSizes[item] do begin

            {This section does make any sence nor does anythingl}
            (* bump the menu item pointer *)
            {srcAdr := srcAdr+len+4;}
            {srcPtr := Pointer(srcAdr);}    { point to next item     }
            {len := Length(srcPtr^);}       { get its length         }

            (* set the vert coord *)
            vItem := vItem+vertSpace;
            vTemp := vItem-(v Div 2);
            (* draw the line item *)
            PenSize(h,v);
            MoveTo(menuRect.left+itemHoriz,vTemp);
            LineTo(menuRect.right+itemRight-h,vTemp);
        end;
        PenNormal;

        (* other two arrow menu items *)
        vItem := menuRect.top+7*vertSpace-(vertSpace+1) Div 2;
        SetPt(p1,menuRect.left+itemHoriz,vItem);
        SetPt(p2,menuRect.right+itemRight,vItem);
        drwMnuFlag := TRUE;
        DrwLine(p1,p2,1,1,1);

        p1.v := p1.v+vertSpace;
        p2.v := p2.v+vertSpace;
        DrwLine(p1,p2,1,1,2);
        drwMnuFlag := FALSE;

    end; (* DrwPenMenu *)

(* ********************************************************************* *)

    procedure GetPenItem(menu: MenuInfo; menuRect: Rect;
                        hitPt: Point; VAR whichItem: INTEGER);
    CONST
        vertSpace       =  15;    { vertical spacing in text menus }
    VAR
        hitItem: Integer;

    (* ***************************************************************** *)

        procedure HLLine;
        var tempRect: Rect;
        begin
        {$IFC sampcalls} ALogCall; {$ENDC}
            if not (whichItem in [0,5]) then begin
                tempRect := menuRect;
                tempRect.bottom := tempRect.top+vertSpace;
                with menuRect do
                OffSetRect(tempRect,0,(whichItem-1)*vertSpace);
                InvertRect(tempRect);
            end;
        end; (* HLLine *)

    (* ***************************************************************** *)

    begin
        {$IFC sampcalls} ALogCall; {$ENDC}
        (* get hitItem *)
        IF PtinRect(hitPt,menuRect) THEN BEGIN
            hitItem := 1+(hitPt.v-menuRect.top) DIV vertSpace;
            hitItem := CMin(hitItem,12);
        end else
            hitItem:=0;

        (* hiLite new hitItem *)
        if hitItem<>whichItem then begin
            (* erase old *)
            HLLine;
            (* hiLite new *)
            whichItem := hitItem;
            HLLine;
        end;
    end; (* GetPenItem *)

(* ********************************************************************* *)

    procedure DrwPatMenu(menu: MenuInfo; menuRect: Rect);
    (* called from MenuSelect to draw pattern menu *)
    VAR row,col: INTEGER;
        patRect,patFrame: Rect;
        item: Str255;
    begin
        {$IFC sampcalls} ALogCall; {$ENDC}
        PenNormal;
        SetRect(patRect,0,0,gColWidth-1,fStyleHt-1);
        OffSetRect(patRect,menuRect.left,menuRect.top);
        patFrame := patRect;
        InSetRect(patFrame,-1,-1);
        FillRect(menuRect,black);
        FOR row := 1 TO gNumRow do begin
            for col := 0 to gNumCol-1 do begin
                FillRect(patRect,fillPats[row+col*gNumRow]);
                OffSetRect(patRect,gColWidth,0);
            end;
            OffSetRect(patRect,-3*gColWidth,fStyleHt);
        end;
        MoveTo(menuRect.left+3,menuRect.top+12);
        GetItem(menu,1,@item);
        TextFont(tile12);
        TextFace([bold]);
        DrawString(item);
        TextFont(sysText);
        TextFace([]);
    end; (* DrwPatMenu *)

(* ********************************************************************* *)

    procedure GetPatItem(menu: MenuInfo; menuRect: Rect;
                        hitPt: Point; VAR whichItem: INTEGER);

    (* Called from MenuSelect to choose and highlight an item from the *)
    (* pattern menu. WhichItem enters with old, returns with new item. *)

    VAR hitItem: Integer;
        hitRow:  Integer;
        hitCol:  Integer;

    (* ***************************************************************** *)

        procedure HLPat;
        begin
        {$IFC sampcalls} ALogCall; {$ENDC}
            if whichItem<>0 then begin
                PenMode(patXor);
                PenSize(2,1);
                FrameRect(patRect);
                PenNormal;
            end;
        end; (* HLPat; *)

    (* ***************************************************************** *)

    begin
        {$IFC sampcalls} ALogCall; {$ENDC}
        (* get hitItem *)
        if PtinRect(hitPt,menuRect) then begin
            hitRow  := (hitPt.v-menuRect.top)  Div fStyleHt;
            hitCol  := (hitPt.h-menuRect.left) Div gColWidth;
            hitItem := hitCol*gNumRow+hitRow+1;
        end else
            hitItem:=0;

        if hitItem<>whichItem then begin
            (* hiLite new hitItem *)
            (* erase old hiLite *)
            if patState=On then
                HLPat;
            (* get new patRect to hiLite *)
            SetRect(patRect,0,0,gColWidth-1,fStyleHt-1);
            InSetRect(patRect,-1,-1);
            with menuRect do
            OffSetRect(patRect,left+hitCol*gColWidth,top+hitRow*fStyleHt);
            (* draw new hiLite *)
            whichItem := hitItem;
            HLPat;
            patState := On;
        end else if Time > patTime then begin
            (* blink patRect *)
            HLPat;
            patState := not patState;
            patTime  := patTime+5;
        end;
    end; (* GetPatItem *)

(* ********************************************************************* *)
(*$S Init*)
    procedure InitMNU;
    var item: Str255;
    begin
        {$IFC sampcalls} ALogCall; {$ENDC}
        (* set up fStyle menu state vars *)
        drwMnuFlag := FALSE;
        patState := Off;
        patTime  := Time;

        (* set up graphical menus *)
        With geMenus[iMnuLine] do begin       (* lineStyle *)
            DrawProc   := @DrwPenMenu;
            ChooseProc := @GetPenItem;
        end;

        With geMenus[iMnuFill] do begin      (* fillStyle *)
            menuWidth  := gNumCol*gColWidth;
            menuHeight := (numFStyle Div gNumCol)*fStyleHt;
            DrawProc   := @DrwPatMenu;
            ChooseProc := @GetPatItem;
        end;

        With geMenus[iMnuPen] do begin      (* penStyle *)
            menuWidth  := gNumCol*gColWidth;
            menuHeight := (numFStyle Div gNumCol)*fStyleHt;
            DrawProc   := @DrwPatMenu;
            ChooseProc := @GetPatItem;
        end;
    end;

end. (* unit *)
ÿ