
;-------------------------------------

        .FUNC   TSTQ,1  ; ( Q : Quadint ) : integer
;
;       Result indicates whether Q is <0, =0, >0.
;               values returned:      -1,  0,  1

        move.l  (sp)+,a0                ;return address
        move.l  (sp)+,a1                ;@q
        CLR     D0

        TST.L   (A1)+
        BMI.S   @3
        BNE.S   @1

        TST.L   (A1)
        BEQ.S   @2

@1      ADDQ    #1,D0

@2      move    d0,(sp)
        jmp     (a0)

@3      SUBQ    #1,D0
        BRA.S   @2

;-------------------------------------

        .FUNC   NEGQ,1  ; ( Q : Quadint ) : boolean
;
;       If false, Q has been negated OK.  Overflow
; (for $8000...0000) is signalled true.

        move.l  (sp)+,a0                ;return address
        move.l  (sp)+,a1                ;@q
        CLR     D0

        NEG.L   4(A1)
        NEGX.L  (A1)

        BVC.S   @1
        ADDQ    #1,D0

@1      move.b  d0,(sp)
        jmp     (a0)

;-------------------------------------

        .PROC   CLRQ,1  ; ( Q : Quadint )
;
;       Q is set to all 0s

        move.l  (sp)+,a0                ;return address
        move.l  (sp)+,a1                ;@q

        CLR.L   (A1)+
        CLR.L   (A1)

        jmp     (a0)

;-------------------------------------

        .PROC   LDQI,2  ; ( Q : Quadint, I : integer )
;
;       Q := I  (with proper sign extension)

        move.l  (sp)+,a0                ;return address
        move    (sp)+,d2                ;d2 := longint(i)
        ext.l   d2
        move.l  (sp)+,a1                ;@q

        CLR.L   D1
        TST.L   D2
        BPL.S   @1
        SUBQ.L  #1,D1

@1      MOVEM.L D1-D2,(A1)

        jmp     (a0)

;-------------------------------------

        .FUNC   ADDQI,2 ; ( Q : Quadint, I : integer ) : boolean
;
;       Q := Q + I.     ADDLI=true -> Overflow

        move.l  (sp)+,a0                ;return address
        move    (sp)+,d2                ;d2 := longint(i)
        ext.l   d2
        move.l  (sp)+,a1                ;@q

        CLR     D0
        CLR.L   D1
        TST.L   D2
        BEQ.S   @3
        BGT.S   @1
        SUBQ.L  #1,D1

@1      ADD.L   D2,4(A1)
        MOVE.L  (A1),D2
        ADDX.L  D1,D2
        BVC.S   @2
        ADDQ    #1,D0
@2      MOVE.L  D2,(A1)

@3      move.b  d0,(sp)
        jmp     (a0)


;-------------------------------------

        .FUNC   MULQI,2 ; ( Q : Quadint, I : integer ) : boolean
;
;       Q := Q * I.     MULLI=true -> Overflow

        move.l  (sp)+,a0                ;return address
        move    (sp)+,d2                ;i
        move.l  (sp)+,a1                ;@q
        move.l  d7,-(sp)                ;save d7

        CLR.W   D7              ; Set low order bit to 0 (overflow)
        CLR     D1              ; D1 keeps track of result sign
        TST     D2
        BEQ.S   @10             ; fast exit if zero multiplier

@1      BGT.S   @2              ; generate magnitude
        ADDQ    #1,D1
        NEG     D2
        BVC.S   @2
        ORI     #1,D7

@2      MOVE.L  4(A1),-(SP)
        BNE.S   @3              ; skip special zero tests
        MOVE.L  (A1),-(SP)
        BNE.S   @4
        ADDQ    #8,SP

@10     CLR.L   (A1)+           ; special zero result exit
        CLR.L   (A1)
        CLR     D0              ;  and ignore possible error
        BRA.S   @9

@3      MOVE.L  (A1),-(SP)      ; force magnitude of Q on stack
        BPL.S   @4
        ADDQ    #1,D1
        NEG.L   4(SP)
        NEGX.L  (SP)
        BVC.S   @4
        ORI     #1,D7

;       if we make it this far, we have real work
        .PAGE
;
;       do a fast single multiply by integer

@4      CLR.L   (A1)+           ; A1--------v
        MOVE    6(SP),D0        ;  ! 0 ! 2 ! 4 ! 6 !
        MULU    D2,D0
        MOVE.L  D0,(A1)
        SUBQ    #2,A1           ; A1----v
        MOVE    4(SP),D0        ;  ! 0 ! 2 ! 4 ! 6
        MULU    D2,D0
        ADD.L   D0,(A1)
        SUBQ    #2,A1           ; A1v
        MOVE    2(SP),D0        ;  ! 0 ! 2 ! 4 ! 6 !
        MULU    D2,D0
        ADD.L   D0,(A1)
        MOVE    (SP),D0
        MULU    D2,D0

        CLR.L   D2              ; last partial needs special handling
        MOVE    (A1),D2
        ADD.L   D2,D0
        MOVE    D0,(A1)
        BMI.S   @6              ; this is overflow!!

        MOVE.L  D0,(SP)         ; check on overflow of upper word
        TST     (SP)
        BEQ.S   @7
@6      ORI     #1,D7

@7      ADDQ    #8,SP           ; pop temp of stack
        ROR     #1,D1           ; fixup sign of result
        BCC.S   @8
        NEG.L   4(A1)
        NEGX.L  (A1)
        BVC.S   @8
        ORI     #1,D7

@8      MOVE    D7,D0           ; set overflow indicator
        ANDI    #1,D0

@9      move.l  (sp)+,d7        ;restore d7
        move.b  d0,(sp)
        jmp     (a0)


;-------------------------------------

        .FUNC   DIVQIR,3  ; ( Q : Quadint, I : integer, R : Quadint )
;
;       Q := Q div I;  R := remainder.
;       DIVLIR=true -> Overflow or Divide error

        move.l  (sp)+,a0        ; return address
        move.l  (sp)+,d0        ; @R
        move    (sp)+,d1        ; i
        move.l  (sp)+,a1        ; @Q
        movem.l d3/d7/a2-a3,-(sp)
        move.l  d0,a3           ; @R
        move    d1,d2           ; i

        CLR     D3              ; D3 accumulates sign info
        TST     D2              ; check on sign of I
        BNE.S   @1
        MOVE    #1,D0           ; if zero, we have big error
        BRA.S   DIVLIRX         ;  which can be handled fast

@1      BPL.S   @2
        ADDQ    #1,D3           ; update result sign and fixup
        NEG     D2
        BVC.S   @2
        ORI     #1,D7

@2      MOVEM.L (A1),D0-D1      ; get value of L
        TST.L   D0
        BNE.S   @3              ; make special check for 0 dividend
        TST.L   D1
        BNE.S   DIVLIR1         ; nope, normal handling
        CLR     (A3)            ; show remainder zero also
        BRA.S   DIVLIR2         ;  if 0, leave it alone

@3      BPL.S   DIVLIR1
        ADDQ    #5,D3           ; update sign stuff (and sign of dividend)
        NEG.L   D1
        NEGX.L  D0
        BVC.S   DIVLIR1
        ORI     #1,D7

;       Loop is now set up, do it
        .PAGE
;
;       Single divide loop here

DIVLIR1 MOVEM.L D0-D1,-(SP)     ; abs(L) to stack

        CLR.L   D0              ; Clear initial remainder
        MOVE    #4,D1           ; D1 is loop counter

@1      MOVE    (SP)+,D0        ; get next dividend word
        DIVU    D2,D0           ;  and get partial quotient
        MOVE    D0,(A1)+        ;   saving it
        SUBQ    #1,D1
        BGT.S   @1

        ROR     #1,D3           ; now, set sign of quotient
        BCC.S   @2
        NEG.L   -(A1)
        NEGX.L  -(A1)

@2      LSR.L   #8,D0           ; get final remainder
        LSR.L   #8,D0
        BTST    #1,D3           ;  and check for what its sign sb.
        BEQ.S   @3
        NEG     D0

@3      MOVE    D0,(A3)         ; store the remainder for caller

DIVLIR2 MOVE    D7,D0           ; set result value
        ANDI    #1,D0

DIVLIRX movem.l (sp)+,d3/d7/a2-a3
        move.b  d0,(sp)
        jmp     (a0)

;-------------------------------------
;-------------------------------------
;-------------------------------------
        .END

ÿ