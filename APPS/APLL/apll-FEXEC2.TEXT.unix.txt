
PROGRAM LISALIST;
{Copyright 1983,1984, Apple Computer Inc.}

{$SETC ForOS := TRUE }
{$DECL IsIntrinsic}
{$SETC IsIntrinsic := TRUE}
{$DECL UTProblems}
{$SETC UTProblems := FALSE}
{$DECL WithUObject}
{$SETC WithUObject := FALSE}

{$IFC NOT WithUObject}
    {$SETC LibraryVersion := 30 } { 10 = 1.0 libraries; 13 = 1.3 libraries; 10 = Pepsi, 30 = Spring, etc. }
{$ENDC}

USES
     {$U  unitStd } UnitStd,
     {$U  unitHz} UnitHz,
     {$U  Storage} Storage,
     {$U  QuickDraw}  QuickDraw,
     {$U  Fontmgr} Fontmgr,
     {$U  dbenv}          dbenv,
     {$U  fedec} fedec,
     {$U  fld} fieldEdit,
     {$U  teenv} teenv,
     {$U  dbdecl1.Obj} dbdecl1,
     {$U  libos/syscall.Obj} syscall,
     {$U  libos/psyscall.Obj}     psyscall,
     {$U  wm.events.obj} events,
     {$U  wm.folders.obj} folders,
     {$U  wm.menus.obj} menus,
     {$U  alertmgr.obj} AlertMGR,
     {$U  lowlevel.Obj} lowlevel,
     {$U  pooler.Obj} pooler,
     {$U  heap.Obj} heap,
{$IFC PRERELEASE }
     {$U  pstuff.Obj} pstuff,
{$ENDC }
     {$U  czcompact.Obj} czcompact,
     {$U  vltree.Obj} vltree,
     {$U  scan.Obj} scan,
     {$U  labscan.Obj} labscan,
     {$U  schema.Obj} schema,
     {$U  libdb/extnsort.Obj} Extnsort,
     {$U  apll/lmscan.obj} lmscan,
     {$U  apll/dbconvert.Obj} dbconvert,
     {$U  pmdecl}          PmDecl,
     {$U  PrStdInfo  }  PrStdInfo,
     {$U  PrPublic}  PrPublic,
     {$U  unitFile.obj}    unitFile,
     {$U  unitFmt.obj}     unitFmt,
     {$U  unitCs.obj}      UnitCs,
     {$U  unitFF.obj}      unitFF,
     {$U  uunivtext}       UUniversalText,
     {$U  apll/matmgr} lmmat,
{$IFC SAMPCALLS}
     {$U  apll/tracecalls.obj} tracecalls,
{$ENDC}
     {$U  apll/lmprint} lmprint,
     {$U  wmlstd} wmlstd,
     {$U  wmlsb  } wmlsb,
     {$U  wmlgrow} wmlgrow,
     {$U  wmlcrs} wmlcrs,
     {$U  tm} tm,
     {$U  apll/lmmenus} lmmenus,
     {$U  scrap}     scrap,
     {$U  filercomm} filercomm;


{$R-}

{$IFC MMSYMBOLS}
{$D+}
{$ELSEC }
{$D-}
{$ENDC}

{ This program is organized as follows:
  The file fexec2 contains the main program loop.
  The file Pevent contains the event handling loop, plus the mouse down code
      plus grow-icon and scroll bar management, as well as update processing.
  The file initfex contains initialization code and code to open documents.

  Unit LMMenus is coprised of 2 files, lmmenus and menuprocs.  Lmmenus contains
  general procedures used either by routines in menuprocs or by the event loop
  handling in the main program. Menuprocs contains a procedure for each menu.
  Within each menuprocedure, there is a case statement for each menu item.

  Unit LMPrint has all the printing code. It resides in file lmprint.

  Unit LMMAT contains the guts of the List Manager.  It handles data structures,
  file access, searching, sorting etc.   It also contains the support routines
  needed by the table editor.

 }

VAR fstatus : integer;
    reason : freason;

{$I  apll/initfex.text}
{$I  apll/pevent.text}

{$S lmmain}
FUNCTION SkipEvent(Event:EventRecord): Boolean;
   BEGIN
{$IFC SAMPCALLS}  ALogCall;  {$ENDC}
   { This procedure snarfs events from the event queue if abort is set}
   if PrintProcs then writeln('skipevent');
   SkipEvent := False;
   IF Abort then
      SkipEvent := event.what in [KeyDown, ButtonDown, ButtonUp];
   END;


{$S lmmain}
Procedure Timeout;
   BEGIN
{$IFC SAMPCALLS}  ALogCall;  {$ENDC}
   {This procedure is called when ever a timeout occurs.}
   {Update screen, blink caret etc. }

   CASE ActivePnl of

       cWidePnl,
       cTblPnl:
          BEGIN
          NewTimOut(curTimeout);
          END;

       cTitlePnl:
          BEGIN
          END;

       END; {case}

   IF tracing then If Not Check2or3Click THEN WRITELN('Timeout event..');
   IF Check2or3Click then
      BEGIN              {timed out while looking for a double or triple click}
      IF tracing THEN WRITELN('   End of possible mouse click sequence');

      {reset state so we aren't looking for dbl and trpl clicks}

      Check2or3Click := FALSE;
      FndDouble := FALSE;
      FndTriple := FALSE;
      END;
   END;


{$S  lmmain}
Procedure UpdateCursor;
   VAR
       icrs : integer;
       mousept,
       mouseglobal,
       mouserel : point;
       hsbhit : thsb;
       iconhit : tIcon;
       thispnl : pnlindex;
       r:rect;


   BEGIN
{$IFC SAMPCALLS}  ALogCall;  {$ENDC}
   {This routine sets the cursor shape based on the location of the cursor}
   if PrintProcs then writeln('updatecursor');
   if (
      (activepnl = cfolderpnl) or (activepnl = ctblpnl) or
      (activepnl=cwidepnl) or (activepnl= ctitlepnl)
      ) and fldrupdateok and not fileclosed   then
      begin
      SetPort(folder);
      SetOrigin(0,0);
      GetMouse(mousept);
      if not ptinrect(mousept,folder^.portrect) and not
         ptinrect(mousept,scrapfolder^.portrect) then
          begin
          {not in folder, or scrap folder}
          icrs := icrsInactive;
          end

      else
         begin
         ThisPnl := ptInPnl(folder,mousept,cHiPnl);
         if (thispnl = cwidepnl) and ((CurRange.rkind = a1CellRg) or
            ((CurRange.rkind = aColHedRg) and (Tblpars.EditColTitle)))
            then icrs := icrsXIbeam  {IN FIELD}
         else if thispnl = ctblpnl then
            begin
            AdjToPnl(cTblPnl,mousept,mouserel);   {relocate to panel}
            if PtIn1cRg(mouserel, curRange) then icrs := icrsXIbeam
            else icrs := icrsLCCross; {IN TABLE}
            end
         else if thispnl = titlepnl then icrs := icrsinactive {TITLE PNL}
         else icrs := icrsinactive;
         end ;
      END
   ELSE if (activepnl = cscrappnl)   then
      begin
      {SCRAP}
      icrs := icrsinactive;
      end
   ELSE icrs := icrsInactive;
   SetStdCursor(icrs);
   END;

{$S lmmain}
Procedure EventDispatch;
   BEGIN
{$IFC SAMPCALLS}  ALogCall;  {$ENDC}
   {Get an Event and Process it}
   if PrintProcs then writeln('eventDispatch');
   if (docsopen <> 0) AND  ImActive then setPnlPort(folderpnl);
   GetEvent(theEvent);
   IF NOT SkipEvent(theEvent) then ProcessEvent;
   END;


{$S lmmain}
Procedure ListMain;
   VAR Status : integer;
   BEGIN
{$IFC SAMPCALLS}  ALogCall;  {$ENDC}
   {The Main Program Loop}
   if PrintProcs then writeln('listMain');

   Repeat
   WHILE NOT ImActive and NOT QuitRequest DO
      BEGIN
      EventDispatch; {may suspend us}
      END;

   WHILE ImActive and NOT QuitRequest DO
      BEGIN
      UpdateCursor;

      IF EventAvail THEN
         BEGIN
         EventDispatch;
         if curtimeout = -1 then timeouttime := -1
         else timeouttime := curtimeout + time; {schedule timeout}
         END
      ELSE
         BEGIN
         {Watch out for timer wraparound}
         IF (timeouttime <> -1 ) and ((Time > TimeoutTime) or
                                     (ABS(time-timeouttime) > 100))  THEN
            begin
            Timeout;
            if curtimeout = -1 then timeouttime := -1
            else timeouttime := curtimeout + time;
            end;

         LetOthersRun;
         END;
      END;  {WHile}


   UNTIL quitRequest;

   END;

{$S        }

BEGIN {***************************** main ***************************** }

{$IFC SAMPCALLS}  AInitTrCalls;  {$ENDC}
{$IFC SAMPCALLS}  ALogCall;  {$ENDC}

initfexec(reason);
if reason = allok then ListMain
else
   begin
   TellFiler(fstatus,initfailed,reason,nil);
   if mmtrap1 then if fstatus <> 0 then writeln('tellfiler status ',fstatus);
   end;

{$S lminit}
END.



ÿ