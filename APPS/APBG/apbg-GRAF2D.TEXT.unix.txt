UNIT Graf2D;                            {'Copyright 1983, 1984, Apple Computer Inc.'}

INTERFACE

uses (*$U UnitStd.obj *)                UnitStd,
     (*$U UnitHz.obj *)                 UnitHz,
     (*$U Storage.obj *)                Storage,
     (*$U QuickDraw.obj *)              QuickDraw,
     (*$U Fontmgr.obj *)                FontMgr,
     (*$U dbenv.obj *)                  dbenv,
     (*$U FEdec.obj *)                  FEdec,
     (*$U fld.obj *)                    fieldedit,
     (*$U FPlib.obj      *)             FPlib,
     (*$U teenv.obj *)                  teenv,

     (*$U libos/Syscall.obj    *)       Syscall,
     (*$U PMDecl *)                     PMDecl,
     (*$U PrStdInfo *)                  PrStdInfo,
     (*$U PrPublic.obj *)               PrPublic,
     (*$U WM.events.obj  *)             events,
     (*$U aplc/mm/BGEnv.obj      *)     BGEnv,
     (*$U aplc/mm/matmgr.obj *)         matmgr;



type
   Pt2D=RECORD
             x: REAL;
             y: REAL;
           END;

     RealPtr = ^RealPort;
     RealPort = RECORD
                  GPort:                     GrafPtr;
                  xLeft,yTop,xRight,yBottom: REAL;
                  pen:                       Pt2D;
                  xScale,yScale:             REAL;
                  xOffset,yOffset:           REAL;
                  viewRect:                  Rect;
                END;


  VAR
    BGPrintFlag: Boolean;  { True iff we're currently printing       }
    PenPoint   : Point;    { Last point moved or drawn to            }
    BGCutFlag  : Boolean;  { True iff we're currently cutting to GE  }

  PROCEDURE OpenRealPort(rp: RealPtr; gp: GrafPtr);
  PROCEDURE SetRealPort(rp: RealPtr);

  PROCEDURE BGMapPt (x,y: Real; VAR LisaPt: Point);
  PROCEDURE MoveTo2D(x,y: REAL);
  PROCEDURE LineTo2D(x,y: REAL);
  PROCEDURE Move2D(dx,dy: REAL);
  PROCEDURE Line2D(dx,dy: REAL);

  PROCEDURE ViewPort(r: Rect);
  PROCEDURE LookAt(FPleft, FPtop, FPright, FPbottom: REAL);
  PROCEDURE ViewAngle(Ang: Real);  (* Dummy procedure for up Compatibility *)

  Procedure BGMin(VAR Arg1: Real; Arg2: Real);
  Procedure BGMax(VAR Arg1: Real; Arg2: Real);
  Function  Alog10(X: Real): Real;

  Procedure BGPrinting( PrintFlag: Boolean );
  Procedure Graf2DPen( VAR pt: Point);


IMPLEMENTATION

(*$R- *)

(*$IFC teSym *)
(*$D+ *)
(*$ELSEC *)
(*$D- *)
(*$ENDC *)

(*$S     *)

VAR theRPort: RealPtr;


PROCEDURE OpenRealPort(* rp: RealPtr; gp: GrafPtr *);
{ initialize all values in rp^ to their defaults }

BEGIN;
   (* tell Graf2D we're not printing *)
   BGPrinting(False);

   theRPort:=rp;
   theRPort^.GPort:=gp;
   rp^.viewRect:=gp^.portRect;
   WITH gp^.portRect DO LookAt(left,top,right,bottom);
   MoveTo2D(0,0);
END;


PROCEDURE SetRealPort(* rp: RealPtr *);
{ change to another RealPort }
BEGIN
  theRPort:=rp;
  SetPort(theRPort^.GPort);
END;


PROCEDURE BGMapPt(* x,y: Real; VAR LisaPt: Point *);
Begin
   With theRPort^ do begin
      LisaPt.h    := ROUND(xOffset+x*xScale);
      LisaPt.v    := ROUND(yOffset+y*yScale);
   end;
end;

PROCEDURE MoveTo2D(* x,y: REAL *);
BEGIN
  WITH theRPort^ DO
    BEGIN
      pen.x:=x;
      pen.y:=y;
      BGMapPt(x, y, penpoint);
      With penpoint do begin
         MoveTo(h, v);
      End;
    END;
END;


PROCEDURE Move2D(* dx,dy: REAL *);
BEGIN
  WITH theRPort^ DO MoveTo2D(pen.x+dx,pen.y+dy);
END;


PROCEDURE LineTo2D(* x,y: REAL *);
BEGIN
  WITH theRPort^ DO
    BEGIN
      BGMapPt(x, y, penPoint);
      WITH penpoint DO Begin
         LineTo(h, v);
      End; (* With *)

      (* update the 2D pen position *)
      pen.x:=x;
      pen.y:=y;
    END;
END;


PROCEDURE Line2D(* dx,dy: REAL *);
BEGIN
  WITH theRPort^ DO LineTo2D(pen.x+dx,pen.y+dy);
END;


PROCEDURE ViewLook;
{ re-calculate offsets and scales after LookAt or ViewPort }
{ formula for xScreen = f(xReal) is:

   xScreen = xScale*xReal + xOffset

Therefore, xScale converts from the real length to the integer length,
and xOffset must subtract the real left coordinate and add in the
integer left coordinate. Similarly for Y.                      }

BEGIN
  WITH theRPort^ DO
    WITH viewRect DO
      BEGIN
        xScale := (right-left)/(xRight-xLeft);
        yScale := (bottom-top)/(yBottom-yTop);
        xOffset:= left-xLeft * xScale;
        yOffset:= top-yTop * yScale;
      END;
END;


PROCEDURE ViewPort(* r: Rect *);
{ specify what portion of the folder to map onto }
BEGIN
  theRPort^.viewRect:=r;
  ViewLook;  { re-calculate scales and offsets }
END;


PROCEDURE LookAt(* FPleft,FPtop,FPright,FPbottom: REAL *);
{ specify the real number coordinates of the portRect }
BEGIN
  WITH theRPort^ DO
    BEGIN
      xLeft:=FPleft;
      xRight:=FPright;
      yBottom:=FPbottom;
      yTop:=FPtop;
    END;
  ViewLook;  { re-calculate scales and offsets }
END;


Procedure ViewAngle(*Ang:Real*);
(* Dummy proc to be upward compatible with the full RealGraf *)

Begin
End;


Procedure BGMin{(VAR Arg1: Real; Arg2: Real)};
(* returns Arg1 as the lesser of Arg1 and Arg2. *)
Begin
   If (Arg2 < Arg1) Then Arg1 := Arg2;
End;


Procedure BGMax{(VAR Arg1: Real; Arg2: Real)};
(* returns Arg1 as the greater of Arg1 and Arg2 *)
Begin
   If (Arg2 > Arg1) Then Arg1 := Arg2;
End; (* BGABS *)


Function Alog10{(X: Real): Real};
(* Function to return the log base 10 of X *)

VAR
   myX: extended;           (* extended version of X      *)

Begin
   (* move the real X into extended myX *)
   s2x(X, myX);
   (* use the FP routine to get the log10 into myX *)
   LnX(myX);
   DivX(VofLog10, myX);
   (* get the Real value to return into Alog10 *)
   x2s(myX, x);
   alog10 := x
End;


Procedure BGPrinting{( PrintFlag: Boolean )};
{ Call with True to make output go to printer, false for output to screen }
Begin
   BGPrintFlag := PrintFlag;
End;


Procedure Graf2DPen(* VAR pt: Point*);
(* Returns the integer point last moved or drawn to *)
Begin
   pt := PenPoint;
End;

(*$S BGInit *)
END. { END OF UNIT }

ÿ