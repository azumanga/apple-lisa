
                            {'Copyright 1983, 1984, Apple Computer Inc.'}

(*********** aplc/formmgr - lisacalc formula manager - unit comgr **************)

{$S LCstatmgr}
procedure drawForm;
        {Just draw the formula, according to formFldH and formFSH}
begin
(*$IFC fTraceLC *) LogCall; (*$ENDC *)

   pnlSetPortClip(formPnl, formFldH);
   DrawField(formFldH, formFSH, true, true);
end;


{$S LCstatmgr}
procedure emptyFormDisp;
        {Empty the coordinates display, ie, clear all text}
var errNum : integer;
begin
(*$IFC fTraceLC *) LogCall; (*$ENDC *)

{$IFC fDebug }
   if traceCoMgr then LCtraceMess(22);
{$ENDC }
   ClearField(formFldH, formFSH, errNum);
   ExitField(formFldH, formFSH);
   initFstate(formFldH, formFSH);
   formFldH^^.curlen := 0;
end;


{$S LCstatmgr}
procedure endRgInsert;
        {The user has done something to indicate that s/he is no longer pointing
         at a range whose name is to be inserted into the formula, replacing the
         last-inserted range name.  I.E., next time newFormRg is called, the
         name of the range passed should be inserted at the selection, not over
         the RgIntrvl.  Make rgIntrvl null.}
begin
(*$IFC fTraceLC *) LogCall; (*$ENDC *)

  rgIntrvl.lpFst := nullIntrvl;
end;


{$S LCstatmgr}
procedure enterForm {rowId, colId: idType; var status: integer;
                     var errRec: errRecord};
        {Enter the formula in the Formula Display into the matrix.
        Assume the selection in the Formula Display has been ended,
        ie, field exited.  If the matMgr says that there is an edit
        check error, return the errRec that it returns.  If status = 0,
        then all went well.}
begin
(*$IFC fTraceLC *) LogCall; (*$ENDC *)

{$IFC fDebug }
   if traceFormMgr then LCtraceMess(21);
{$ENDC }
   CellFormula(mmWrite, rowId, colId, formFldH^^.curvalue^, formFldH^^.curlen, status, errRec);
end;



{$S LCstatmgr}
procedure findFormFld {var fKind: fldKind; var pnlFldH: hndfield;
                var pnlFSH: hndfstate};
        {If Formula Display editing is enabled, then return handles to
        the formula field data structures and set fKind to plainTxt;
        otherwise, set fKind to noSel}
begin
(*$IFC fTraceLC *) LogCall; (*$ENDC *)

{$IFC fDebug }
   if traceFormMgr then LCtraceMess(23);
{$ENDC }
   if editForm then begin
      fKind := plainTxt;
      pnlFldH := formFldH;
      pnlFSH := formFSH;
   end
   else fKind := noSel
end;


{$S initial}
procedure initForm;
        {Set up the Formula Display data structures and initialize to
        no string and no selection, then display.  Disable Formula Display
        editing}
var formRect : rect;
begin
(*$IFC fTraceLC *) LogCall; (*$ENDC *)

{$IFC fDebug }
   if traceFormMgr then LCtraceMess(24);
{$ENDC }
   SetRect(formRect, 0, 0, 0, 0);
   formFldH := CreateField(formRect, maxFormLen + 1, 0, left, 4, 1, 0, TblFntId.Fam, false);

   formFSH  := pointer(ord(newHandle(sizeof(fieldstate))));

   InitFstate(formFldH, formFSH);
   editForm := false;
   endRgInsert;
end;


{$S LCstatmgr}
procedure newFormRg {formRg: range; var status: integer};
        {Insert the "name" of the range designated by formRg into the formula,
         covering rgIntrvl if rgIntrvl is non-null (ie, we're replacing the
         last range name inserted into the formula), or at the selection if
         rgIntrvl is null (ie, we're just inserting the range name at a new
         place.  Leave the blinking cursor after the formula name and remember
         the interval of the inserted text (in rgIntrvl) for subsequent
         calls to newFormRg. Return the Field Editor status for the text
         insertion.  For now, also print out the new range.}
     var
        rgName: array [0..maxCoLen] of byte;
        numBytes, i: integer;
        errNum: integer;
      begin
(*$IFC fTraceLC *) LogCall; (*$ENDC *)

         if not rgEq(formRg, lastFormRg) or (rgInTrvl.lpFst = nullIntrvl) then begin
            lastformRg := formRg;
            if rgIntrvl.lpFst <> nullIntrvl then
               SetSel(formFldH, formFSH, rgIntrvl.lpFst, rgIntrvl.lpLim, tySelPt);
            rgIntrvl.lpFst := formFSH^^.select.int.lpFst;
            getRgName(formRg, @rgName, numBytes); {in coMgr}
            status := ok;
            if numBytes = 0 then begin
               CutCopyField(formFldH, formFSH, true, false, errNum);
               status := errNum;
            end
            else for i := 0 to numBytes - 1 do
                    pnlKey(chr(rgName[i]), false, g.curTimeout, status);
            drawForm;
            if status = 0 then setUndo(uPasteTxt, g.ActivePnl);
            rgIntrvl.lpLim := formFSH^^.select.int.lpLim
         end
      end;


{$S LCstatmgr}
procedure reDrawForm;
        {Redraw the Formula Display, according to the current data structures.
        Only the panel rectangle may have changed.}
var formRect : rect;
    errNum   : integer;
begin
(*$IFC fTraceLC *) LogCall; (*$ENDC *)

{$IFC fDebug }
   if traceFormMgr then LCtraceMess(25);
{$ENDC }
   getPnlRect(formPnl, formRect);
   SetFCoords(formFldH, formFSH, formRect);
   drawForm;
end;


{$S LCstatmgr}
procedure shoNewForm {rowId, colId: idType};
        {Show the formula, if there is one, for this cell.  If not, clear
        the display.  In either case, enable Formula Display editing}
var status : integer;
    errNum : integer;
    errRec : errRecord;
begin
(*$IFC fTraceLC *) LogCall; (*$ENDC *)

{$IFC fDebug }
   if traceFormMgr then LCtraceMess(26);
{$ENDC }
   formFldH^^.protect := false;
   formFldH^^.curlen  := maxFormLen + 1;
   CellFormula(mmRead, rowId, colId, formFldH^^.curvalue^, formFldH^^.curlen, status, errRec);
   initFstate(formFldH, formFSH);
   drawForm;
   editForm := true;
end;

ÿ