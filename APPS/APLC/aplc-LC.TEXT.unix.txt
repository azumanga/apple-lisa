
                            {'Copyright 1983, 1984, Apple Computer Inc.'}

Program LC;

uses (*$U UnitStd.obj *)                UnitStd,
     (*$U UnitHz.obj *)                 UnitHz,
     (*$U Storage.obj *)                Storage,
     (*$U QuickDraw.obj *)              QuickDraw,
     (*$U Fontmgr.obj *)                FontMgr,
     (*$U dbenv.obj *)                  dbenv,
     (*$U FEdec.obj *)                  FEdec,
     (*$U fld.obj *)                    fieldedit,
     (*$U teenv.obj *)                  teenv,

     (*$U libos/SysCall.obj    *)       Syscall,
     (*$U FPlib.obj *)                  FPlib,
     (*$U PMDecl *)                     PMDecl,
     (*$U PrStdInfo *)                  PrStdInfo,
     (*$U PrPublic.obj *)               PrPublic,
     (*$U aplc/mm/matmgr.obj *)         matmgr,

     (*$U wm.events.obj *)              events,
     (*$U wm.folders.obj *)             folders,
     (*$U wm.menus.obj *)               menus,
     (*$U AlertMgr.obj *)               AlertMgr,

     (*$U WMLstd.obj  *)                WMLstd,
     (*$U WMlCrs.obj  *)                WMlCrs,
     (*$U WMlsb.obj   *)                WMlsb,
     (*$U WMLgrow.obj *)                WMLgrow,
     (*$U tm.obj      *)                tm,

     (*$U aplc/feglobals.obj *)         feglobals,
     (*$U aplc/comgr.obj *)             coMgr,
     (*$U aplc/TEexec.obj *)            TEexec,
     (*$U aplc/mm/BGenv.obj *)          BGenv,
     (*$U aplc/FilerComm.obj *)         filerComm,
     (*$U aplc/LCfexec.obj *)           LCfexec;

(*$R- *)

(*$IFC teSym *)
(*$D+ *)
(*$ELSEC *)
(*$D- *)
(*$ENDC *)

var XXXstatus : integer;
    copyRight : integer;

   (*$S     *)
   procedure BringUpLC;
   var ch          : char;
       filerReason : FReason;
       exName      : T_Ex_Name;
       filerError  : integer;

(*$IFC DEBUGVERSION *)

       function  RodStuff(menuItem: integer): boolean; external;

(*$ENDC *)

   begin
(*$IFC DEBUGVERSION *)
      upTime := time;
(*$ENDC *)

      InitGraf(@thePort);                            {Init LisaGraf}
      OpenWm;
      exName := 'SYS_TERMINATE';
      Declare_Excep_Hdl(XXXstatus, exName, @LastWishes);
      numDocsOpen := 0;
      Folder      := nil;

(*$IFC not DEBUGVERSION *)

      g.BGFlag := false;
      g.LCFlag := not g.BGFlag;

(*$ELSEC *)

      if XXXstatus = 0 then begin

         g.BGFlag := false;
         g.LCFlag := not g.BGFlag;

         GetKeys(myOwnKeys);
         eventDebug := (myOwnKeys = [126, 127, 104]) or eventdebug;
         debug[9] := false;
         debug[5] := false;
         debug[0] := false;
         debug[1] := false;
         tracing  := false;
         rodFlag  := false;
         skipFlag := false;
         relFlag  := false;
         traceOC  := false;
         if 118 in myOwnKeys then begin
            skipFlag := true;
            write(chr(7))
         end;
         writeln;
         write('Version: ',verTitle,' -- ');
         if g.LCflag then write('LisaCalc')
         else write('LisaGraph');
         writeln('(',lcdate,')  Matrix Manager(',mmDate,')');
         if eventDebug then begin
            write(chr(7));
            repeat
               writeln;
               write('Set Debugging flags(''?'' for a list): ');
               read(ch);
               if ch = chr(13) then ch := 'n';
               if ch in ['q', 'Q'] then XXXstatus := -1;
               if ch in ['s', 'S'] then skipFlag := true;
               if ch in ['t', 'T'] then debug[0] := true;
               if ch in ['m', 'M'] then rodFlag := true;
               if ch in ['o', 'O'] then traceOC := true;
               if ch in ['r', 'R'] then begin
                  writeln;
                  if rodstuff(-2) then
               end;
               if ch = '?' then begin
                  writeln;
                  writeln('Q = Quit');
                  writeln('S = Skip initialization questions');
                  writeln('T = re-initialize the table information in LISACALCTABLES');
                  writeln('M = enable matrix manager tracing during initialization');
                  writeln('O = trace open/close');
                  writeln('R = enable rodstuff')
               end
            until ch in ['N', 'n', 'Y', 'y', 'Q', 'q', ' '];
            writeln
         end
         else relFlag := true
      end;
(*$ENDC *)

        if XXXstatus = 0 then begin
           InitBGprocs(nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,
                       nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,
                       nil, nil);

         NewInitFexec(XXXstatus)
      end;

   (*$IFC DEBUGVERSION *)
      if XXXstatus <> 0 then writeln('Newinitfexec returned ', XXXstatus);
   (*$ENDC *)

      if XXXstatus <> 0 then begin
         case XXXstatus of
            315         : filerReason := noMemory;
            309,
            311,
            312         : filerReason := noDiskSpace;
            userStopped : filerReason := aUserAbort;
            otherwise     filerReason := internalError
         end;
         TellFiler(FilerError, InitFailed, filerReason, Folder)
      end
   end;


(*$S   *)
begin
   BringUpLC;
   copyRight := length(copy(sCopyright, 1, length(sCopyright)));
   if XXXstatus = 0 then begin
      GetEvent(WMEvent);                {wait for open event and setup folder}
      ProcessEvent;
      LCBGmainloop
   end
end.

ÿ