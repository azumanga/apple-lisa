Unit BGenv;                            {'Copyright 1983, 1984, Apple Computer Inc.'}
     intrinsic;

INTERFACE

(* This unit is to contain only those constants/types/vars that must be declared in
   common for LisaCalc & BusinessGraphics.  LisaCalc makes use of these constants
   to either call Business Graphics routines or check items within Business Graphics
   menus.  Any other declarations should be placed in Business Graphics such that
   when LisaCalc is running, LisaCalc does not expend space for Business Graphic's
   variables.
*)

uses (*$U UnitStd.obj *)                UnitStd,
     (*$U UnitHz.obj *)                 UnitHz,
     (*$U Storage.obj *)                Storage,
     (*$U QuickDraw.obj *)              QuickDraw,
     (*$U Fontmgr.obj *)                FontMgr,
     (*$U dbenv.obj *)                  dbenv,
     (*$U FEdec.obj *)                  FEdec,
     (*$U fld.obj *)                    fieldedit,
     (*$U libos/Syscall.obj    *)       Syscall,
     (*$U WM.events.obj  *)             events;

type
   THorV = (BGHoriz, BGVert);  { horiz or vertical scrolling }

   GraphTypes = (Bar, LineGraph, Scatter, Pie,

                { Stacked and solid bar, text X axis }
                StackBar, SolidBar,

                { Area graph with numeric X axis }
                NumbAreaGraph,

                { Line graph and scatter with text X axis }
                BarLine, BarScat,

                { Area graph with text or numeric X axis }
                TextAreaGraph, ExtraGraph);

   TitleNames = (Main, Subtitle, YAx, XAx, Footnote, Leg1, Leg2, Leg3,
                 Leg4, Leg5, Leg6, Leg7, Leg8, NullTitle);

   TPAnotRec = ^TAnotRec;
   THAnotRec = ^TPAnotRec;

   TAnotRec = Record
      AnotFld     : HndField;
      XFract,
      YFract      : Real;       (* Fraction of graph to place annotation *)
      AnotNext    : THAnotRec;
   end;

   tGraphProportion = (Full, Half, Third, Quarter);

   AxisCntl= Record         (* Information about the Y Axis              *)
      Min,Org,Max   : Real; (* Corresponds to the min,origin,and max data*)
                            (* points showable on the axis               *)
      MinSet,
      OrgSet,
      MaxSet: Boolean ;     (* true if user set the value                *)
      XPos1,YPos1: Real;    (* World coordinate first pos of the axis    *)
      Delta : Real     ;    (* World coordinate length of the Axis       *)
      Grid  : Boolean  ;    (* true if gridding is on                    *)
      AxIncr: Real;         (* Data increment between labels             *)
      AxIncrSet: Boolean;   (* True iff user set the label increment     *)
      UserAxIncr: Real;     (* Axis increment entered by the user        *)
   End;

   LegendCntl = Record      (* information about all the legends *)
      (* Number of legends to display. Note:Ttl/DrawLegends now
         uses BGData.RepNum, not LegendTot.             *)
      LegendTot: Integer;
      LegendFlag:Boolean;   (* legends on or off?                *)
   End;

   tBoolArray= Array[1..8 {YListMax from L:BG2 }] of Boolean;

var
   RefreshRect : Rect;          (* Lisagraf rect to be refreshed         *)
   BGRefreshRgn: RgnHandle;     (* Rgn to be refreshed                   *)
   GType  : GraphTypes;         (* Bar,Line etc.                         *)
   BGPreview : Boolean;         (* True when BG in printing preview mode *)
                                (* BGPrintFlag is in L:Graf2D            *)
   GraphProportion : tGraphProportion; (* full, half, third, etc.        *)
   Legends: LegendCntl;
   BGFld     : hndField;        (* field currently under edit            *)
   XAxis  : AxisCntl;           (* Axis specs. YAxis declared in L:BG2   *)
   BGAllFlag : Boolean;         (* True when the entire graph is selected  *)

      (* For hybrid graph. True if bar, False if line                    *)
   BarBoolean  : tBoolArray;
   hFldSt      : hndfState;               (* handle to the fieldstate      *)
   RgrsBoolean : tBoolArray;
   BGMarkFlag  : Boolean;  (* True if showing data markers *)



implementation

(*$S initial *)
END.

ÿ