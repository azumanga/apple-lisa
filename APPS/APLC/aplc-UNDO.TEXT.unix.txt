
                            {'Copyright 1983, 1984, Apple Computer Inc.'}

(*********** aplc/lcmenus - thrid include file for LCMenus - unit teexec **************)
{******************         Contains undo control routines               **************)

{$S undoCode}
procedure doUndo;
        {The user has selected undo in the menu.  Do it.}
var newCR : boolean;
begin
(*$IFC fTraceLC *) LogCall; (*$ENDC *)

{$IFC fDebug }
   if traceLCexec then LCtraceMess(112);
{$ENDC }
   case undoRec.undoOp of
      uCutTxt,
      uCopyTxt,
      uKey,
      uPasteTxt,
      uClrTxt     : unTxtEdit(undoRec.undoOp);
      uInsrt,
      uAttrChg,
      uBreaks,
      uClrTem,
      uColWid,
      uCutRg,
      uCopyRg,
      uPasteRg,
      uPasteRel,
      uPasteVal   : unNewSnips(undoRec.undoOp);
      uFontChg    : fontCommand (true, newCR);  {in LCMenus3}
     {
      uBGAxis,
      uEnter,
      uNothing,
      uUndo,
      uGoto,
      uRestore,
      uFldFldMove,
     }
      otherwise     doStopAlert(109)
   end
end;


{$S undoCode}
procedure chgPnlSel;
        {We have just undone an operation in undoPnl.  If that's different from
        g.ActivePnl, end the selection in g.ActivePnl and change the g.ActivePnl to
        undoPnl}
begin
(*$IFC fTraceLC *) LogCall; (*$ENDC *)

{$IFC fDebug}
   if traceLCExec then LCtraceMess(72);
{$ENDC }
   with undoRec do begin
      if (g.ActivePnl <> undoPnl) and not (tblEditPnl(g.ActivePnl) and tblEditPnl(undoPnl)) then begin
         if tblEditPnl(g.ActivePnl) then ExitSel
         else endOtherSel(g.ActivePnl);
         g.ActivePnl := undoPnl;
         g.lastActPnl := g.ActivePnl;
{$IFC fDebug}
         if TempCode then setUndo(uUndo, g.ActivePnl);  {TEMP until we can undo text
                                                         edits among fields}
{$ENDC }
         end
      end
end;


{$S undoCode}
procedure undoCR (newRg: range; recalculate : boolean);

        {The user has just undone an operation, changing the current range.
        Save the appropriate undo-undo info, then force a recalculate and make
        newRg the new g.curRange.}
begin
(*$IFC fTraceLC *) LogCall; (*$ENDC *)

{$IFC fDebug}
   if traceLCExec then LCtraceMess(74);
{$ENDC }
   g.curRange := newRg;
   if recalculate then forceCalc(true)
   else selectRg(g.curRange, selectCell);
{$IFC fDebug}
   if traceLCExec then writeln('new range after undo: ', wrg(newRg));
{$ENDC }
   chgStatPnl(false);
end;


{$S undoCode}
procedure unNewSnips{rgOp: undoOpKind};
        {The last undo-able operation was an insert or cut/copy/paste of a range.
        Undo it.}
var status   : integer;
    newRange : range;
    upDateRg : range;
begin
(*$IFC fTraceLC *) LogCall; (*$ENDC *)

{$IFC fDebug}
   if traceLCExec then LCtraceMess(75);
{$ENDC }
   nullCR;
   FormulaChanged := true;
   NewSnips(newRange, mmUndo, true, true, status);
   if status <> ok then begin
      DoSelCR(g.curRange, g.curTimeout, selectCell);
      doStopAlert(109);        {There''s nothing to undo}
{$IFC fDebug}
      if Tempcode then writeln('Status = ', status)
{$ENDC }
   end
   else begin
           case rgOp of
              uColWid  : shoNewWid(colKind, newRange.loCol, newRange.hiCol);
              uBreaks  : begin
                            lcReDoBreaks;
                            tmShoBreaks
                         end;
              uAttrChg : begin
                            DisplayRange(newRange);
                            upDateRg.rKind := aWTBoxRg;
                            FixRange(upDateRg);
                            FxNewRgImg
                         end;
           end;
           undoCR(newRange, not (rgOp in [uColWid, uBreaks, uAttrChg, uCopyRg]));
           case rgOp of
             uCopyRg,
             uCutRg : UndoInheritScrap(status)
           end
        end
end;


{$S undoCode}
procedure unTxtEdit{txtOp: undoOpKind};
        {The last undo-able action was typing of key(s), cut, copy, or paste
        of text.  Undo it.}
var status : integer;
begin
(*$IFC fTraceLC *) LogCall; (*$ENDC *)

{$IFC fDebug}
   if traceLCExec then LCtraceMess(76);
{$ENDC }
   with undoRec do begin
      if tblEditPnl(undoPnl) then undoSel(status)
      else pnlUndo(undoPnl, status);
      if status <> 0 then begin
         doStopAlert(109); {Couldn''t undo}
{$IFC fDebug}
         if Tempcode then writeln('unTxtEdit: Status = ', status);
{$ENDC }
      end
      else begin
              if tblEditPnl(undoPnl) or (undoPnl = formPnl) then
                 ShoNewRx(g.curRange, g.curRange, nearJ);
              chgPnlSel;
              case txtOp of
                 uCutTxt,
                 uCopyTxt : UndoInheritScrap(status)
              end
           end
   end
end;

ÿ