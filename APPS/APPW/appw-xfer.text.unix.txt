
        .PROC XFERLEFT

; PROCEDURE XferLeft(source, dest: TP; nBytes: INTEGER);
;
; uses A0,A1,D0,D1
;

        MOVE.L  (SP)+,D1        ; POP RETURN ADDRESS
        MOVE.W  (SP)+,D0        ; D0 := NBYTES
        MOVE.L  (SP)+,A1        ; A1 := DEST
        MOVE.L  (SP)+,A0        ; A0 := SOURCE
        MOVE.L  D1,-(SP)        ; PUSH RETURN ADDRESS FOR RTS

        SUB.W   #1,D0           ; DECREMENT NBYTES

        BLT.S   RTSLEFT         ; NBYTES <= 0, SO EXIT

XFER    MOVE.B  (A0)+,(A1)+
        DBF     D0,XFER

RTSLEFT RTS

;=============================================================================================

        .PROC XFERRIGH

; PROCEDURE XferRight(source, dest: TP; nBytes: INTEGER);
;
; uses A0,A1,D0,D1
;

        MOVE.L  (SP)+,D1        ; POP RETURN ADDRESS
        MOVE.W  (SP)+,D0        ; D0 := NBYTES
        MOVE.L  (SP)+,A1        ; A1 := DEST
        MOVE.L  (SP)+,A0        ; A0 := SOURCE
        MOVE.L  D1,-(SP)        ; PUSH RETURN ADDRESS FOR RTS

        TST.W   D0              ; TEST NBYTES
        BLE.S   RTSRIGH         ; NBYTES <= 0, SO EXIT

        ADDA.W  D0,A0           ; START AT RIGHT END
        ADDA.W  D0,A1

        SUB.W   #1,D0           ; DECREMENT NBYTES

XFER    MOVE.B  -(A0),-(A1)
        DBF     D0,XFER

RTSRIGH RTS

;=============================================================================================

        .PROC EqualBytes

; PROCEDURE EqualBytes(source, dest: TP; nBytes: INTEGER);
;
; uses A0,A1,D0,D1
;

        MOVE.L  (SP)+,D1        ; POP RETURN ADDRESS
        MOVE.W  (SP)+,D0        ; D0 := NBYTES
        MOVE.L  (SP)+,A1        ; A1 := DEST
        MOVE.L  (SP)+,A0        ; A0 := SOURCE
        MOVE.L  D1,-(SP)        ; PUSH RETURN ADDRESS FOR RTS

        MOVE.B  #1,4(SP)        ; RETURN TRUE UNLESS PROVEN UNEQUAL

        SUB.W   #1,D0           ; DECREMENT NBYTES

        BLT.S   RTSEQUL         ; NBYTES <= 0, SO EXIT

XFER    MOVE.B  (A0)+,D1
        CMP.B   (A1)+,D1
        BNE     UNEQUL
        DBF     D0,XFER

RTSEQUL RTS

UNEQUL  CLR.B   4(SP)           ; RETURN FALSE
        RTS

;=============================================================================================

        .PROC EqualChar

; PROCEDURE EqualChar(source, dest: TP; nBytes: INTEGER);
;
; uses A0,A1,D0,D1,D2
;

        MOVE.L  (SP)+,D1        ; POP RETURN ADDRESS
        MOVE.W  (SP)+,D0        ; D0 := NBYTES
        MOVE.L  (SP)+,A1        ; A1 := DEST
        MOVE.L  (SP)+,A0        ; A0 := SOURCE
        MOVE.L  D1,-(SP)        ; PUSH RETURN ADDRESS FOR RTS

        MOVE.B  #1,4(SP)        ; RETURN TRUE UNLESS PROVEN UNEQUAL

        SUB.W   #1,D0           ; DECREMENT NBYTES

        BLT.S   RTSEQUL         ; NBYTES <= 0, SO EXIT

XFER    MOVE.B  (A0)+,D3  ; MOVE THE CHARACTER TO D3 AND SHIFT TO LOWER CASE
        JSR     SHIFT
        MOVE.B  D3, D1
        MOVE.B  (A1)+,D3  ; MOVE THE CHARACTER TO D3 AND SHIFT TO LOWER CASE
        JSR     SHIFT
        MOVE.B  D3, D2

TEST    CMP.B   D1, D2
        BNE     UNEQUL
        DBF     D0,XFER

RTSEQUL RTS

UNEQUL  CLR.B   4(SP)           ; RETURN FALSE
        RTS

SHIFT   CMP.B   #$41, D3   ;IF LESS THAN 'A' RETURN
        BLT     RTSSHIFT
        CMP.B   #$5A, D3   ;IF GREATER THAN 'Z' RETURN
        BGT     RTSSHIFT
        BSET    #$5,  D3   ;MUST BE UPPER CASE CHARACTER - SHIFT IT.
RTSSHIFT RTS

;=============================================================================================

        .PROC ENTERLIS

; PROCEDURE EnterLisabug;

        TRAP    #0
        RTS

;=============================================================================================


.END
ÿ