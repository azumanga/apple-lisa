{$I APLW/COMPFLAGS }                                            {gdf 1/16/84}

{$R-}

UNIT UnitUs;

(* Copyright 1983, 1984, Apple Computer Inc. *)

{ gdf  2/27/84 -- insert trace calls for segmentation  }
{ gdf  1/16/84 -- printing compile flag & include COMPFLAGS added }
{ jrm  6/29/82  --  USES changes: LisaGraf => QuickDraw; moved USES UnitFile }
{ crc  6/02/82  --  Conditional compilation }
{ crc 05/25/82  --  USES PrStd moved }
{ crc 04/06/82  --  integration with new font manager }
{ bas 01/13/82  --  added USES for new }
{ bas 12/14/81  --  added USES for Lisaprint }
{ bas 12/10/81  --  integration with font manager }
{ edited by dsy 8/14/81 }

INTERFACE

USES
     {$IFC sampcalls}                                               {gdf 2/24/84}
        {$U aplw/tracecalls.obj} tracecalls,
     {$ENDC}
     {$U Obj:UnitStd.Obj  }   UnitStd,
     {$U Obj:UnitHz.Obj   }   UnitHz,
     {$U LibOS/Syscall.Obj }   Syscall,
     {$U Obj:UnitFile.Obj }   UnitFile,
     {$U Obj:Storage.Obj  }   Storage,
     {$U Obj:QuickDraw.Obj }   QuickDraw,
     {$U Obj:FontMgr.Obj  }   FontMgr,
     {$U Obj:PmDecl       }   PmDecl,
     {$IFC fPrintOld}                                               {gdf 1/16/84}
        {$U Obj:PrStd.Obj }     PrStd,
     {$ELSEC}
        {$U Obj:PrStdInfo.Obj } PrStdInfo,
          (* {$U Obj:PrPublic.Obj }  PrPublic,  unneeded ? *)
     {$ENDC}                                                        {gdf 1/16/84}
     {$U Obj:UnitFmt.Obj  }   UnitFmt,
     {$U Obj:UnitCs.Obj   }   UnitCs,
     {$U Obj:UnitFf.Obj}      UnitFf,
     {$U Obj:Wm.Events.Obj  } Events,
     {$U Obj:Wm.Folders.Obj } Folders,
     {$U Obj:WmlStd     }     WmlStd,
     {$U Obj:WM.Menus.Obj }   Menus,
     {$U Obj:AlertMgr.Obj }   AlertMgr,
     {$U ApLW/Queue.Obj    }   Queue,
     {$U ApLW/UnitBox.Obj  }   UnitBox,
     {$U ApLW/UnitRec.Obj  }   UnitRec,
     {$U ApLW/UnitTld.Obj  }   UnitTld,
     {$U ApLW/UnitPrt.Obj  }   UnitPrt;

{$IFC NOT fDbgOk}
CONST
     fTstUs = FALSE;
{$ENDC}

TYPE TCsus = RECORD
             cs:     TCs;
             ichMac: TC;
             argch:  TArgch;
             END;
     TPcsus = ^TCsus;
     THcsus = ^TPcsus;

{$IFC fDbgOk}
VAR
     fTstUs: TF;
{$ENDC}

PROCEDURE PxHcsus(hcs: THcs);

PROCEDURE SeqLpdUs(lpd: TLpd; VAR achad: TAchad);

FUNCTION IcsUsCreate(VAR sp: TSp; hz: THz) : TB;

PROCEDURE FreeUsIcs(ics: TB);

PROCEDURE ChangeIchMacUs(ics: TB; ichMacNew: TC);

IMPLEMENTATION

{$IFC fSymOK }
{$D+ }
{$ELSEC }
{$D- }
{$ENDC }

{$S LWDebug}
{-------------------------------}
PROCEDURE PxHcsus { (hcs: THcs) };
{-------------------------------}
VAR pcsus:  TPcsus;
    achad:  TAchad;
BEGIN
{$IFC sampcalls}  ALogCall;  {$ENDC}
{$ifc fDbgOk}
pcsus := POINTER(ORD(hcs^));
WRITELN('hcsus: ', ORD(hcs), ' pcsus: ', ORD(pcsus), ' ichMac: ', pcsus^.ichMac);
achad.ichFst := 0; achad.ichLim := pcsus^.ichMac; achad.rgch := @pcsus^.argch;
PxAchad(achad);
{$endc}
END;

{$S LWType}
{---------------------------------------------------}
PROCEDURE SeqLpdUs { (VAR lpd: TLpd; achad: TAchad) };
{---------------------------------------------------}
VAR lp:     TLp;
    achadSrc: TAchad;
    cchSeq: TC;
    lpLim:  TLp;
    chadT:  TChad;
    hcsus:  THcsus;
BEGIN
{$IFC sampcalls}  ALogCall;  {$ENDC}
IF fTstUs THEN
        BEGIN
        WRITELN('SeqLpdUs');
        chadT := @achadSrc;
        WRITELN('lpd: ', ORD(lpd), ', @achadSrc: ', ORD(chadT));
        END;
hcsus := POINTER(ORD(rghcs^[lpd^.ics]));
IF hcsus^^.cs.tycs <> tycsUs THEN Break(2);
achadSrc.rgch := @hcsus^^.argch;
lpLim := hcsus^^.ichMac;
lpd^.rce := @arceStd;
cchSeq := achad.ichLim-achad.ichFst;
lp := lpd^.lpLim;
IF lp > lpLim THEN lp := lpLim;
cchSeq := LpMinP(lpLim-lp, cchSeq);
IF lpd^.tyset.fRpe THEN
        BEGIN
        lpd^.rpe := @arpeStd;
        IF lp = 0
           THEN lpd^.fParSt := TRUE
           ELSE lpd^.fParSt := (achadSrc.rgch^[lp-1] = chCr);
        END;
IF lpd^.tyset.fParBnds THEN
        BEGIN
        achadSrc.ichFst := 0; achadSrc.ichLim := lp;
        lpd^.lpFstPar := IchCr(achadSrc, FALSE)+1;
        achadSrc.ichFst := lp; achadSrc.ichLim := lpLim;
        lpd^.lpLimPar := IchCr(achadSrc, TRUE)+1;
        cchSeq := CMin(cchSeq, lpd^.lpLimPar-lp);
        END;
lpd^.lp := lp;
achadSrc.ichFst := lp;
lp := lp + cchSeq;
lpd^.lpLim := lp;
IF fTstUs THEN WRITELN('  lp: ', lp, ', cchSeq: ', cchSeq);
achadSrc.ichLim := achadSrc.ichFst+cchSeq;
{$ifc fDbgOk}
IF fTstUs THEN  BEGIN WRITELN('achadSrc - '); PxAchad(achadSrc); END;
{$endc}
IF achad.rgch <> NIL THEN
        BEGIN
        achad.ichLim := achad.ichFst+cchSeq;
        MoveAchad(achad, achadSrc);
        END
ELSE    BEGIN
        achad := achadSrc;
        achad.ichLim := achad.ichFst+cchSeq;
        END;
END;

{$S LWCreate}
{--------------------------------------------------}
FUNCTION IcsUsCreate { (VAR sp: TSp; hz: Thz) : TB };
{--------------------------------------------------}
VAR ichMacSp: TC;
    rgchSrc:    TRgch;
    ics:    TB;
    hcsus:  THcsus;
BEGIN
{$IFC sampcalls}  ALogCall;  {$ENDC}
ichMacSp := LENGTH(sp);
ics := IcsCreate(tycsUs, SIZEOF(TCsus) + ichMacSp, hz);
WITH rghcs^[ics]^^.cspd DO
     BEGIN
     argproc[iprocSeqLpd]       := @SeqLpdUs;
     argproc[iprocFindLpFixed]  := @FindLpFstPar;
     argproc[iprocCrd]          := @GenCrdTld;
     argproc[iprocFreeIcs]      := @FreeUsIcs;
     argproc[iprocFSelLpBounds] := @TrueStdSelLpBounds;
     argproc[iprocPxHcs]        := @PxHcsus;
     argproc[iprocHilight]      := @HilightTld;
     argimgp[iimgpScrn]         := @GenImgTld;
     argimgp[iimgpQume]         := @PrtImgTld;
     END;
hcsus := POINTER(ORD(rghcs^[ics]));
hcsus^^.ichMac := ichMacSp;
rgchSrc := @sp;
rgchSrc := POINTER(ORD(rgchSrc) + 1);
IF fTstUs THEN WRITELN('IcsUsCreate - @sp: ', ORD(@sp), ' : ', ics);
MoveRgch(@hcsus^^.argch, rgchSrc, ichMacSp);
IcsUsCreate := ics;
END;

{$S LWUsUf}
{-------------------------------}
PROCEDURE FreeUsIcs { (ics: TB) };
{-------------------------------}
VAR hcs:    THcs;
BEGIN
{$IFC sampcalls}  ALogCall;  {$ENDC}
IF fTstUs THEN WRITELN('FreeUsIcs:', ics:3);
hcs := rghcs^[ics];
IF ORD(hcs) = ORD(hNil) THEN Break(72);
{$ifc fDbgOk}
IF fTstUs THEN PxCs(ics);
{$endc}
IF hcs^^.ointFst <> ointNil THEN Break(70);
FreeBk(hcs^^.hz, POINTER(ORD(hcs)), tybkStd);
rghcs^[ics] := POINTER(ORD(hNil));
IF fTstUs THEN WRITELN('...ics', ics:3, ' freed.');
END;

{$S LWType}
{---------------------------------------------------}
PROCEDURE ChangeIchMacUs { (ics: TB; ichMacNew: TC) };
{---------------------------------------------------}
VAR hcsus: THcsus; cbNew: TC;
BEGIN
 { Make the string have ichMacNew chars. }
{$IFC sampcalls}  ALogCall;  {$ENDC}
IF fTstUs THEN WRITELN('ChangeIchMacUs - ics:', ics:3, '; ichMacNew:', ichMacNew:4);
IF ichMacNew > 25000 THEN StopAlert(WPAlerts, 27); (* tell the user to restart Lotus *)
IF ichMacNew > 30000 THEN
    BEGIN
    StopAlert(WPAlerts, 22); (* the jerk didn't do it, so pull the plug *)
    KillLotus;
    END;
hcsus := POINTER(ORD(rghcs^[ics]));
IF hcsus^^.cs.tycs <> tycsUs THEN Break(2);
cbNew := SIZEOF(TCsus) + ichMacNew;
ChangeSizeH(hcsus^^.cs.hz, POINTER(ORD(hcsus)), cbNew);
hcsus^^.ichMac := ichMacNew;
END;



END.


ÿ