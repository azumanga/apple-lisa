{$I APLW/COMPFLAGS }                                            {gdf 1/16/84}

{$R-}

UNIT UnitLDialog;

(* Copyright 1983, 1984, Apple Computer Inc. *)

{ gdf  2/27/84 -- insert trace calls for segmentation  }

{Lotus Dialog Box code:  Implements LisaWrite-specific  portions of the general
 dialog box code.  Uses DMgr, which is a slightly modified version of
 LisaDraw's dialog box manager.  UnitLDialog adds the necessary stuff with
 orecs and oboxes and streams...  It also provides the coordination between the
 two basic kinds of dialog boxes: the "Prompt" type that is, e.g., used with
 the Search menu commands, and the "check box" type that is, e.g.,
 used with the Spelling menu commands.}

INTERFACE

USES
     {$IFC sampcalls}                                               {gdf 2/24/84}
        {$U aplw/tracecalls.obj} tracecalls,
     {$ENDC}
     {$U Obj:UnitStd.Obj  } UnitStd,
     {$U LibOS/Syscall.Obj }   Syscall,
     {$U Obj:UnitHz.Obj   } UnitHz,
     {$U Obj:UnitFile.Obj } UnitFile,
     {$U Obj:Storage.Obj  } Storage,
     {$U Obj:QuickDraw.Obj }  QuickDraw,
     {$U Obj:FontMgr.Obj  }  FontMgr,
     {$U Obj:Wm.Events.Obj  } Events,
     {$U Obj:Wm.Folders.Obj } Folders,
     {$U Obj:Wm.Menus.Obj } Menus,
     {$U Obj:WmlStd     }   WmlStd,
     {$U Obj:PmDecl       } PmDecl,
     {$IFC fPrintOld}                                               {gdf 1/16/84}
        {$U Obj:PrStd.Obj }     PrStd,
     {$ELSEC}
        {$U Obj:PrStdInfo.Obj } PrStdInfo,
          (* {$U Obj:PrPublic.Obj }  PrPublic,  unneeded ? *)
     {$ENDC}                                                        {gdf 1/16/84}
     {$U Obj:Filercomm    } Filercomm,
     {$U Obj:UnitFmt.Obj  } UnitFmt,
     {$U Obj:UnitCs.Obj   } UnitCs,
     {$U Obj:UnitFf.Obj   } UnitFf,
     {$U Obj:Scrap        } Scrap,
     {$U Obj:AlertMgr.Obj } AlertMgr,
     {$U ApLW/Queue.Obj    } Queue,
     {$U ApLW/UnitBox.Obj  } UnitBox,
     {$U ApLW/BoxScid.Obj  } BoxScid,
     {$U ApLW/UnitFolder.Obj } UnitFolder,
     {$U ApLW/UnitRec.Obj  } UnitRec,
     {$U ApLW/UnitOver.Obj } UnitOver,
     {$U ApLW/UnitTld.Obj  } UnitTld,
     {$U ApLW/UnitUs.Obj   } UnitUs,
     {$U ApLW/UnitUf.Obj   } UnitUf,
     {$U ApLW/UnitEd.Obj   } UnitEd,
     {$U ApLW/UnitEdit.Obj } UnitEdit,
     {$U ApLW/UnitKid.Obj  } UnitKid,
     {$U ApLW/UnitFm.Obj   } UnitFm,
     {$U ApLW/UnitDsp.Obj  } UnitDsp,
     {$U ApLW/UnitSel.Obj  } UnitSel,
     {$U ApLW/UnitScrap.Obj} UnitScrap,
     {$U ApLW/UnitPg.Obj}    UnitPg,
     {$U ApLW/UnitRuler.Obj} UnitRuler,
     {$U ApLW/DMgr.Obj     } Dmgr,
     {$U ApLW/EventMgr.Obj } EventMgr;

CONST ButnCancel = 0;

TYPE TTyDBox = (TyPrmt, TyGuesses, TyNone);

VAR
    icsPrmt: TB;
    ointPrmt: TC;
    orecPrmt: TC;
    oboxDbox: TC;


{Procedures for "Prompt" type of dialog box}
PROCEDURE FreePrompt;
PROCEDURE ShowPrompt(ics: TB; vSize: TC);

{Procedures for "Check Box" type of dialog box}
PROCEDURE SetDPort;
PROCEDURE LRmvDBox;
PROCEDURE LCreateDBox (vSize: TC; tyDBox: TTyDBox);

{Procedures for coordination among different types of dialog boxes}
FUNCTION  FWhatsUp: TTyDBox;
PROCEDURE RmvAnyDbox;
PROCEDURE InitLDialog;

IMPLEMENTATION

{$IFC fSymOK }
{$D+ }
{$ELSEC }
{$D- }
{$ENDC }

VAR
   curTyDbox: TTyDBox;
   orecDbox: TC;


{$S LWMiscSearch}
{-------------------}
PROCEDURE FreePrompt;
{-------------------}
VAR oboxPrmt, orec: TC;
    recPrmt: TRec;
    rPrmt: TR;
    pint: TPint;
BEGIN
{$IFC sampcalls}  ALogCall;  {$ENDC}
IF fTstDmgr THEN WRITELN('FreePrompt -- icsPrmt:', icsPrmt:3,
                                   '; orecPrmt:', orecPrmt:4);
recPrmt := POINTER(ORD(dsp) + orecPrmt);
oboxPrmt := OboxOfOrec(orecPrmt);
orec := OrecSibFree(orecPrmt);
orecPrmt := orecNil;
pint := POINTER(ORD(lldInt) + selCur.oint);
IF pint^.ics = icsPrmt THEN
     BEGIN
     IF ointPrmt <> ointNil THEN
          BEGIN
          pint := POINTER(ORD(lldInt) + ointPrmt);
          LSetSel(pint^.ics, pint^.lpFst, pint^.lpLim);
          FreeInt(pint^.ics, ointPrmt);
          END
     ELSE LSetSel(icsNil, 0, 0);
     END;
icsPrmt := icsNil;
RemoveKid(TRUE);
FreeDialogObox(oboxPrmt);
curTyDbox := tyNone;
END;


{-------------------------------------------}
PROCEDURE ShowPrompt { (ics: TB; vSize: TC) };
{-------------------------------------------}
VAR lp: TLp;
    orecCon: TC;
    ptTopLftCon: TPt;
    pboxPrmt: TPBox; oboxPrmt: TC;
    refConOrec: LONGINT;
    ich: TC;
    pintCur: TPint;
BEGIN
{$IFC sampcalls}  ALogCall;  {$ENDC}
IF fTstDmgr THEN WRITELN('ShowPrompt -- ics:', ics:3);
(*
RmvAnyDbox;
 { Free up any old prompts }
*)
IF icsPrmt <> icsNil THEN FreePrompt;
icsPrmt := ics;
 { save the state of the selection and other goodies }
IF selCur.oint = ointNil THEN
     ointPrmt := ointNil
ELSE BEGIN
     pintCur := POINTER(ORD(lldInt) + selCur.oint);
     WITH pintCur^ DO
          ointPrmt := OintMark(ointNil, ics, lpFst, lpLim, TRUE, ointNil);
     END;
ptTopLftCon.h := 0; ptTopLftCon.v := 0;
refConOrec := 0;
oboxPrmt := OboxDialogCreate(vSize, refConOrec, TRUE);
orecPrmt := OrecCreateWindow(icsPrmt, 0, ptTopLftCon, oboxPrmt);
pboxPrmt := PboxFromObox(oboxPrmt);
pboxPrmt^.refCon := orecPrmt;
curTyDbox := tyPrmt;
END; { ShowPrompt }



{$S LWDialog}

{-------------------------------------------------}
PROCEDURE SetDPort;
{-------------------------------------------------}
{Set all port stuff before drawing check-box type of dialog box}
VAR
   tRect: Rect;
BEGIN
{$IFC sampcalls}  ALogCall;  {$ENDC}
    SetPort(dialogFolder);
    SetOrigin(0,0);
    TextFont(sysText);
    TextFace([]);
    (* should set clip on DialogHeight *)
    SetRect(tRect,-30000,-30000,30000,30000);
    ClipRect(tRect);
END; (* SetDPort *)


{$S LWGuess}
{-------------------------------------------------}
PROCEDURE LFreeDBox;
{-------------------------------------------------}
{A check box type dialog box has just been removed from the screen.  Now, do all
 of the necessary Lotus things to remember that it's gone.}
VAR oboxDbox, orec: TC;
    recDbox: TRec;
    rDbox: TR;
    pint: TPint;
BEGIN
{$IFC sampcalls}  ALogCall;  {$ENDC}
recDbox := POINTER(ORD(dsp) + orecDbox);
oboxDbox := OboxOfOrec(orecDbox);
orec := OrecSibFree(orecDbox);
orecDbox := orecNil;
FreeDialogObox(oboxDbox);
END;



{-------------------------------------------------}
PROCEDURE LRmvDBox;
{-------------------------------------------------}
{Remove the check box type dialog box from the screen.  Then, do all
 of the necessary Lotus things to remember that it's gone.  Does nothing if
 a check-box type of dialog box is not currently showing.}
BEGIN
{$IFC sampcalls}  ALogCall;  {$ENDC}
IF fDboxIsOpen THEN
   BEGIN
   LFreeDBox;
   ClearDBox;
   curTyDbox := tyNone;
   END;
END;


{-------------------------------------------------}
PROCEDURE LCreateDBox {(vSize: TC; tyDBox: TTyDBox)};
{-------------------------------------------------}
{A check box type dialog box has just been drawn on the screen.  Now, do all
 of the necessary Lotus things to remember that it's there: create the obox and
 orec and set fields and whatever else...  vSize is the vertical height of the
 dialog box.  tyDBox is the type of dialog box.}
VAR orecCon: TC;
    ptTopLftCon: TPt;
    pboxDbox: TPBox;
    refConOrec: LONGINT;
    ointDbox: TC;
    recDbox: TRec;
    pint: TPint;
BEGIN
{$IFC sampcalls}  ALogCall;  {$ENDC}
ptTopLftCon.h := 0; ptTopLftCon.v := 0;
refConOrec := 0;
oboxDbox := OboxDialogCreate(vSize, refConOrec, FALSE);
        (*              testing obox
        writeln ('oboxDbox = ', oboxDbox);
        *)
orecDbox := OrecCreateWindow(icsNil, 0, ptTopLftCon, oboxDbox);
recDbox := POINTER(ORD(dsp)+orecDbox);
recDbox^.strec.fvalid := TRUE;
pboxDbox := PboxFromObox(oboxDbox);
pboxDbox^.refCon := orecDbox;
{Associate a meaningless but valid interval on any old stream with the dbox
 orec so that validate code will work:}
pint := POINTER(ORD(lldInt)+kid.ointVan);
recDbox^.ointDep := OintMark(ointNil, pint^.ics, 0, 0, TRUE, ointNil);
curTyDbox := tyDBox;
END;



{$S LWSpFind}
FUNCTION FWhatsUp{: TTyDBox};
{Determines what kind of dialog box, if any, is up now.}
BEGIN
{$IFC sampcalls}  ALogCall;  {$ENDC}
FWhatsUp := curTyDbox;
END;


{$S LWActive}
PROCEDURE RmvAnyDbox;
{If a dialog box is up, remove it.}
BEGIN
{$IFC sampcalls}  ALogCall;  {$ENDC}
CASE curTyDbox of
   TyGuesses: LRmvDbox;
   TyPrmt: FreePrompt;
   Otherwise  BEGIN END;
   END;
END;



{$S LWCreate}
PROCEDURE InitLDialog;
BEGIN
{$IFC sampcalls}  ALogCall;  {$ENDC}
curTyDbox := TyNone;
END;



END.






ÿ