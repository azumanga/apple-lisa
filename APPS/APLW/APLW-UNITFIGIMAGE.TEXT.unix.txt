{$I APLW/COMPFLAGS }                                            {gdf 1/16/84}
{$R-}

UNIT UnitFigImage;

(* Copyright 1983, 1984, Apple Computer Inc. *)

{ gdf  2/27/84 -- insert trace calls for segmentation  }
{ med  2/21/84 -- non-scaling of figure text }
{ gdf  1/16/84 -- printing compile flag & include COMPFLAGS added }
{ tjm  5/25/83 -- created }


INTERFACE

USES
     {$IFC sampcalls}                                               {gdf 2/24/84}
        {$U aplw/tracecalls.obj} tracecalls,
     {$ENDC}
     {$U Obj:UnitStd.Obj  } UnitStd,
     {$U LibOS/Syscall.Obj }   Syscall,
     {$U Obj:UnitHz.Obj   } UnitHz,
     {$U Obj:UnitFile.Obj } UnitFile,
     {$U Obj:Storage.Obj  } Storage,
     {$U Obj:QuickDraw.Obj } QuickDraw,
     {$U Obj:FontMgr.Obj  } FontMgr,
     {$U Obj:Wm.Events.Obj  } Events,
     {$U Obj:Wm.Folders.Obj } Folders,
     {$U Obj:WmlStd       } WmlStd,
     {$U Obj:WmlCrs       } WmlCrs,
     {$U Obj:PmDecl       } PmDecl,
     {$IFC fPrintOld}                                               {gdf 1/16/84}
        {$U Obj:PrStd.Obj }     PrStd,
        {$U Obj:PrProcs.Obj }   PrProcs,
        {$U Obj:PrMgrUtil.Obj } PrMgrUtil,
        {$U Obj:PrMgr.Obj }     PrMgr,
     {$ELSEC}
        {$U Obj:PrStdInfo.Obj } PrStdInfo,
        {$U Obj:PrPublic.Obj }  PrPublic,
     {$ENDC}                                                        {gdf 1/16/84}
     {$U Obj:UnitFmt.Obj  } UnitFmt,
     {$U Obj:UnitCs.Obj   } UnitCs,
     {$U Obj:UnitFf.Obj   } UnitFf,
     {$U Obj:UnitFigAtom.Obj   } UnitFigAtom,
     {$U Obj:WM.Menus.Obj } Menus,
     {$U Obj:AlertMgr.Obj } AlertMgr,
     {$U ApLW/Queue.Obj    } Queue,
     {$U ApLW/UnitEd.Obj     }  UnitEd,
     {$U ApLW/UnitBox.Obj  } UnitBox,
     {$U ApLW/UnitRec.Obj  } UnitRec,
     {$U ApLW/UnitOver.Obj } UnitOver,
     {$U ApLW/UnitTld.Obj  } UnitTld,
     {$U ApLW/UnitPrt.Obj  } UnitPrt;

PROCEDURE LWStdText (byteCount: integer; textBuf: QDPtr;  numer, denom: Point); {for unscaled text}
PROCEDURE LWStdComment (kind, datasize: Integer; dataHandle: QDHandle);  {for color}
PROCEDURE GenImgFig        (crd: TCrd);
PROCEDURE GenCrdFig        (crd: TCrd; ics: TB; lpFst: TLp; tyxy: TTyxy);


IMPLEMENTATION

{$IFC fSymOK }
{$D+ }
{$ELSEC }
{$D- }
{$ENDC }

CONST
         KindForeColor  = 108;
         KindBackColor  = 109;

VAR xOrYDummy: TCd;


FUNCTION FInSet(element: TW; setof: TW): TF; EXTERNAL;


{$S LWFigure}
PROCEDURE LWStdText {(byteCount: integer; textBuf: QDPtr;
                        numer, denom: Point)};
  VAR   newPnLoc: Point;
  BEGIN
        {$IFC sampcalls}  ALogCall;  {$ENDC}
        StdText (byteCount, textBuf, numer, numer); {call with scaling 1:1}
  END;

PROCEDURE LWStdComment {(kind, datasize: Integer; dataHandle: QDHandle)};
  VAR   newPnLoc:       Point;
        PtrLongint:     ^Longint;
  BEGIN
        {$IFC sampcalls}  ALogCall;  {$ENDC}
        IF dataHandle <> NIL THEN IF datasize = 4 THEN BEGIN
            PtrLongint := pointer (ord4 (dataHandle^));
            CASE kind OF
             KindForeColor:
                 BEGIN
                    ForeColor (PtrLongint^);
                 END;
             KindBackColor:
                 BEGIN
                    BackColor (PtrLongint^);
                 END;
            END;
        END;
  END;

{--------------------------------}
PROCEDURE GenImgFig { (crd: TCrd) };
{--------------------------------}
VAR pint: TPint; icsFig:  TB;
    lp: TLp; hcsfig: THcsfig;
    {r: TR;}
    tyxy: TTyxy;
    hpic: THpic;
    n: TN;
    hz: THz;
    rec: TRec; rT: TR; oboxT: TC;
    argo: ARRAY [0..10] OF TC; orec: TC; io: TC; tyxyImg: TTyxy;
    hrgnSave: THrgn;
    LwGProcs:           QDProcs;
    oldProcsPtr:        QDProcsPtr;
    oldCommentProc:     QDPtr;
    oldTextProc:        QDPtr;

BEGIN
{$IFC sampcalls}  ALogCall;  {$ENDC}
pint := POINTER(ORD(lldInt) + crd^.arec.ointDep);
icsFig := pint^.ics;
hcsfig := POINTER(ORD(rghcs^[icsFig]));
lp := pint^.lpFst;
n := NFromIfilIb(hcsfig^^.ifil, lp);
hz := hcsfig^^.cs.hz;

{Do the crazy clipping}
orec := crdStd^.orec;
hrgnSave := NewRgn;
SetRgoFromOrec(orec, @argo, 2);
rec := POINTER(ORD(dsp) + argo[1]);
tyxyImg := rec^.tyxy;
{$ifc fDbgOk}
IF fTstFig THEN
     BEGIN
     WRITELN('GenImgFig - orec: ');
     PxOrec(orec);
     END;
{$endc}
rec := POINTER(ORD(dsp) + orec);
ConvertRTyxy(rec^.r, rT, rec^.tyxy, tyxyImg);
CopyRgn(thePort^.clipRgn, hrgnSave);
SectRgnVis(rT);
{$ifc fDbgOk}
IF fTstFig THEN
     BEGIN
     PxR('rT: ', rT);
     END;
{$endc}
{ SetRgoFromOrec(orec, @argo, 10);
  io := 1;
  rec := POINTER(ORD(dsp) + argo[1]);
  tyxyImg := rec^.tyxy;
  WHILE (argo[io] <> orec) AND (io < 10) DO
     BEGIN
     rec := POINTER(ORD(dsp) + argo[io]);
     IF FInSet(fixedR, rec^.strec.setfixed) THEN
          BEGIN
          ConvertRTyxy(rec^.r, rT, rec^.tyxy, tyxyImg);
          SectRgnVis(rT);
          END;
     io := io + 1;
     END;
}
hpic := POINTER(ORD(HLockN(hz, n, TRUE)));
IF POINTER(ORD(hpic)) <> hNil THEN
     BEGIN
     ConvertRTyxy(crd^.arec.r, rT, crd^.arec.tyxy, tyxyImg);
     WITH thePort^ DO BEGIN
        oldProcsPtr := grafprocs;             {save old procedure ptr}
        IF oldProcsPtr = NIL THEN BEGIN
           SetStdProcs (LwGProcs);            {set to standard QuickDraw procedures}
           grafprocs := @LwGProcs;            {insert into thePort}
        END;
        WITH grafprocs^ DO BEGIN
            oldTextProc := textProc;                {copy former procs}
            oldCommentProc := commentProc;
            textProc := @LWStdText;                 {change the text procedure to unscaled}
            IF fPrinting THEN commentProc := @LWStdComment;           {change the comment procedure for color}
        END;
     END;
     DrawPicture (hpic, rT);                    {draw, scaled to rT}
     WITH thePort^ DO BEGIN
        IF oldProcsPtr <> NIL THEN WITH grafprocs^ DO BEGIN
                textProc := oldTextProc;        {insert former procs}
                commentProc := oldCommentProc;
        END;
        grafprocs := oldProcsPtr;               {now reset procedures}
     END;
  END;
UnlockN(hz, n);

{Restore Clipping}
CopyRgn(hrgnSave, thePort^.clipRgn);
DisposeRgn(hrgnSave);
END;

{-------------------------------------------------------}
PROCEDURE GenCrdFig { (crd: TCrd; ics: TB; lpFst: TLp; tyxy: TTyxy) };
{-------------------------------------------------------}
VAR lpLim:  TLp; rPic: TR;
  hcsfig: THcsfig; ptPgWidHt: TPt; pint: TPint;
  ppic: TPpic;
BEGIN
{$IFC sampcalls}  ALogCall;  {$ENDC}
hcsfig := POINTER(ORD(rghcs^[ics]));
crd^.arec.strec.setfixed := fixedLpFst + fixedLpLim + fixedR;
crd^.arec.tyxy := tyxy;
ppic := POINTER(ORD(PMapN(hcsfig^^.cs.hz, NFromIfilIb(hcsfig^^.ifil, lpFst))));
IF ppic = NIL THEN
     lpLim := lpFst
ELSE BEGIN
     rPic := ppic^.picFrame;
     crd^.tyxy := tyxyDotMx;
     ConvertRTyxy(rPic, crd^.arec.r, crd^.tyxy, crd^.arec.tyxy);
     lpLim := lpFst + 1;
     END;
crd^.arec.dlpLim := lpLim-lpFst;
crd^.arec.ointDep := OintMark(crd^.arec.ointDep, ics, lpFst, lpLim, TRUE, ointNil);
crd^.tyloc := tylocLstSib;
END;




END.



ÿ