{$I APLW/COMPFLAGS }                                            {gdf 1/16/84}
{$R-}

Unit BoxScid;

(* Copyright 1983, 1984, Apple Computer Inc. *)

{ gdf  2/24/84 -- insert trace calls for segmentation  }
{ bas  7/20/82  --  new box structure }
{ jrm  6/29/82  --  USES changes: LisaGraf => QuickDraw; moved USES UnitFile }
{ crc  4/02/82  --  USES changes for new font manager }
{ bas 01/13/82  --  USES for new wm }
{ edited by bas 9/08/81 }

{ This unit provides scroll chain id's and folder id's (scid's and fid's)
  to the applications, plus the routines to walk the fid and scid
  data structures }

INTERFACE

USES
      {$IFC sampcalls}                                               {gdf 2/24/84}
         {$U aplw/tracecalls.obj} tracecalls,
      {$ENDC}
      {$U Obj:UnitStd.Obj    } UnitStd,
      {$U Obj:UnitHz.Obj     } UnitHz,
      {$U LibOS/Syscall.Obj }   Syscall,
      {$U Obj:UnitFile.Obj   } UnitFile,
      {$U Obj:Storage.Obj    } Storage,
      {$U Obj:QuickDraw.Obj  } QuickDraw,
      {$U Obj:FontMgr.Obj    } FontMgr,
      {$U Obj:Wm.Events.Obj  } Events,
      {$U Obj:Wm.Folders.Obj } Folders,
      {$U Obj:WmlStd         } WmlStd,
      {$U Obj:WM.Menus.Obj   } Menus,
      {$U Obj:AlertMgr.Obj   } AlertMgr,
      {$U ApLW/Queue         } Queue,
      {$U ApLW/UnitBox.Obj   } UnitBox;

CONST
   scidNil = oboxNil;
   fidNil  = oboxNil;

TYPE
   TScid = TC;
   TFid  = TC;

FUNCTION  ScidFstFromFid(fid: TFid; tyvh: TTyvh): TScid;
FUNCTION  ScidNxtFromScid(scid: TScid): TScid;
FUNCTION  ScidPrvFromScid(scid: TScid): TScid;
FUNCTION  TyvhOfSc(scid: TScid): TTyvh;
FUNCTION  FidFromScid(scid: TScid): TFid;
FUNCTION  OboxFstOnSc(scid: TScid): TC;
FUNCTION  OboxNxtOnSc(obox: TC; tyvh: TTyvh): TC;
FUNCTION  OboxPrvOnSc(obox: TC; tyvh: TTyvh): TC;
FUNCTION  ScidFromObox(obox: TC; tyvh: TTyvh): TScid;
PROCEDURE UnpackScid(scid: TScid; VAR oboxRep: TC; VAR tyvh: TTyvh);

IMPLEMENTATION

{$IFC fSymOK }
{$D+ }
{$ELSEC }
{$D- }
{$ENDC }

{ representations:
   a Scid is basically the obox of a representative pane on the scroll chain.
   The pane used is the FIRST pane on the chain.  The high-order bit
   of the obox is grabbed for an axis flag (FALSE - horizontal, TRUE - vertical).

   a Fid is the oboxTab of the folder.

   Scroll/grow boxes stay around even if the folder is closed or not active.
}


VAR scidCheat: PACKED RECORD
                 CASE TF OF
                   TRUE:  (fVert: TF;
                           c15: -16384..16383);
                   FALSE: (c16: TC)
                 END;


{$S LWCommand}
FUNCTION OboxScRep (obox: TC; tyvh: TTyvh): TC;
 { get the representative of the scroll chain -- the head pane.  given box
   may be either a pane or a scroll box. }
LABEL 99;
VAR pbox: TPbox;
BEGIN
    {$IFC sampcalls}  ALogCall;  {$ENDC}
    WHILE TRUE DO BEGIN
        pbox := POINTER(ORD(bdsp) + obox);
        IF pbox^.tybox = tyboxPane THEN
             IF pbox^.rgfScHead[tyvh] THEN GOTO 99
             ELSE obox := pbox^.rgoboxLink[tyvh]
        ELSE obox := pbox^.oboxPaneFst;
        END;
    99:
    OboxScRep := obox;
END;


FUNCTION ScidFromObox { (obox: TC; tyvh: TTyvh): TScid };
 { make a scid from an obox.  Users should only pass panes, but will work for
   scroll boxes too.  }
BEGIN
    {$IFC sampcalls}  ALogCall;  {$ENDC}
    scidCheat.c16 := OboxScRep(obox, tyvh);
    scidCheat.fVert := tyvh = tyvhV;
    ScidFromObox := scidCheat.c16;
END;


PROCEDURE UnpackScid { (scid: TScid; VAR oboxRep: TC; VAR tyvh: TTyvh) } ;
BEGIN
    {$IFC sampcalls}  ALogCall;  {$ENDC}
    scidCheat.c16 := scid;
    oboxRep := scidCheat.c15;
    IF scidCheat.fVert THEN tyvh := tyvhV ELSE tyvh := tyvhH;
END;


FUNCTION ScidFstFromFid {(fid: TFid; tyvh: TTyvh): TScid } ;
VAR obox: TC; pbox: TPbox;
BEGIN
    {$IFC sampcalls}  ALogCall;  {$ENDC}
    { invariants 2 and 4 imply the 1st pane is head for both chains }
    pbox := POINTER(ORD(bdsp) + fid);
    ScidFstFromFid := ScidFromObox(pbox^.oboxNxt, tyvh);
END;

{$S LWSelect}
FUNCTION TyvhOfSc {(scid: TScid): TTyvh)} ;
VAR obox: TC; tyvh: TTyvh;
BEGIN
    {$IFC sampcalls}  ALogCall;  {$ENDC}
    UnpackScid(scid, obox, tyvh);
    TyvhOfSc := tyvh;
END;

{$S LWCommand}
FUNCTION OboxFstOnSc {(scid: TScid): TC };
VAR obox: TC; tyvh: TTyvh;
BEGIN
    {$IFC sampcalls}  ALogCall;  {$ENDC}
    UnpackScid(scid, obox, tyvh);
    OboxFstOnSc := obox;
END;

FUNCTION OboxNxtOnSc {(obox: TC; tyvh: TTyvh): TC } ;
VAR oboxNxt: TC; pboxNxt: TPbox;
BEGIN
    {$IFC sampcalls}  ALogCall;  {$ENDC}
    oboxNxt := OboxNxtSc(obox, tyvh);
    pboxNxt := POINTER(ORD(bdsp) + oboxNxt);
    IF pboxNxt^.tybox <> tyboxPane THEN    { given was last on scroll chain }
         OboxNxtOnSc := oboxNil
    ELSE OboxNxtOnSc := oboxNxt;
END;

{$S LWMisc}
FUNCTION OboxPrvOnSc {(obox: TC; tyvh: TTyvh): TC} ;
VAR oboxPrv: TC; pboxPrv: TPbox;
BEGIN
    {$IFC sampcalls}  ALogCall;  {$ENDC}
    oboxPrv := OboxPrvSc(obox, tyvh);
    pboxPrv := POINTER(ORD(bdsp) + oboxPrv);
    IF pboxPrv^.tybox <> tyboxPane THEN
         OboxPrvOnSc := oboxNil
    ELSE OboxPrvOnSc := oboxPrv;
END;

{$S LWCommand}
FUNCTION ScidNxtFromScid {(scid: TScid): TScid } ;
VAR oboxP1, oboxP2: TC; tyvh: TTyvh;
BEGIN
 {$IFC sampcalls}  ALogCall;  {$ENDC}
 { the scroll head for the next scroll chain is directly after this
   this pane on the orthogonal scroll chain. }
    UnpackScid(scid, oboxP1, tyvh);
    oboxP2 := OboxNxtOnSc(oboxP1, tyvhNOT(tyvh));
    IF oboxP2 = oboxNil THEN ScidNxtFromScid := scidNil
    ELSE ScidNxtFromScid := ScidFromObox(oboxP2, tyvh);
END;

{$S LWMisc}
FUNCTION ScidPrvFromScid {(scid: TScid): TScid } ;
VAR oboxP1, oboxP2: TC; tyvh: TTyvh;
BEGIN
    {$IFC sampcalls}  ALogCall;  {$ENDC}
    UnpackScid(scid, oboxP1, tyvh);
    oboxP2 := OboxPrvOnSc(oboxP1, tyvhNOT(tyvh));
    IF oboxP2 = oboxNil THEN ScidPrvFromScid := scidNil
    ELSE ScidPrvFromScid := ScidFromObox(oboxP2, tyvh);
END;


{$S LWSelect}
FUNCTION FidFromScid {(scid: TScid): TFid } ;
VAR oboxRep: TC; tyvh: TTyvh;
BEGIN
    {$IFC sampcalls}  ALogCall;  {$ENDC}
    UnpackScid(scid, oboxRep, tyvh);
    FidFromScid := oboxFldr(oboxRep);
END;

END.


ÿ