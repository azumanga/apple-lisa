
{=====================================================================}
{======== GrafInRul.Text -- Graphics routines for the rulers. ========}
{=====================================================================}

(* Copyright 1983, 1984, Apple Computer Inc. *)

 { gdf  2/27/84 -- insert trace calls for segmentation  }
 { crc  3/17/83 -- VhNearestMark takes vhMin & vhMax parms }
 { crc 12/03/82 -- DrawMarks: improved number positioning on page ruler }
 { crc 12/01/82 -- DrawMarks assumes botRight defines bounding edges
                   and hense is just outside the ruler }
 { crc 11/03/82 -- VhNearestMark now rounds rather than truncates }
 { bas 3/15/82 -- orec tyxy update }
 { edited by dsy 9/14/81 }

{$ifc fDbgOk}
{$S LWDebug}
{---------------------------------------}
PROCEDURE PxBm(spTitle: TSp; bm: BitMap);
{---------------------------------------}
BEGIN
{$IFC sampcalls}  ALogCall;  {$ENDC}
WRITELN(spTitle, ' - rowbytes:',bm.rowbytes:2,', baseAddr:',ORD(bm.baseAddr));
PxR('  bounds', bm.bounds);
END;
{$endc}

{$S LWMScroll}
{-----------------------------------------------------------------------------}
FUNCTION VhNearestMark(vh, vhMin, vhMax: TC; tyrlu: TTyRlU; cmarkPerUnit: TC;
                       tyvh: TTyvh; VAR ratVhPerMark: TRat): TC;
{-----------------------------------------------------------------------------}
LABEL 7;
VAR vhT, vhNxt: TC; residue: TC;
BEGIN
{$IFC sampcalls}  ALogCall;  {$ENDC}
WITH argmarkd[tyrlu] DO BEGIN
    ratVhPerMark.denom := ratUnitsPerInch.num * cmarkPerUnit;
    DivMod(argptInch[tyxyScrn].vh[tyvh] * ratUnitsPerInch.denom,
    ratVhPerMark.denom, ratVhPerMark.c, ratVhPerMark.num);
    END;
vh := vh + (ratVhPerMark.c DIV 2);  { round to nearest strike }
residue := 0;
vhT := 0;
WHILE TRUE DO BEGIN
    vhNxt := vhT + ratVhPerMark.c;
    residue := residue + ratVhPerMark.num;
    IF residue >= ratVhPerMark.denom THEN
        BEGIN
        residue := residue - ratVhPerMark.denom; vhNxt := vhNxt + 1;
        END;
    IF ((vhNxt > vh) OR (vhNxt > vhMax)) AND (vhT >= vhMin) THEN GOTO 7;
    vhT := vhNxt;
    END;
7:
VhNearestMark := vhT;
END;

{----------------------------------------------------------}
PROCEDURE RulerRAdjust(irm: TC; VAR rDst: TR; hcsruler: THcsruler; orec: TC);
{----------------------------------------------------------}
VAR rec: TRec; ptDiff: TPt; rm: TRm;
BEGIN
{$IFC sampcalls}  ALogCall;  {$ENDC}
rm := hcsruler^^.argrm[irm];
rDst.topLeft := rm.ptHot;
rDst.botRight.h := rDst.topLeft.h + dhRmStd;
rDst.botRight.v := rDst.topLeft.v + dvRmStd;
rec := POINTER(ORD(dsp) + orec);
ptDiff := rec^.r.topLeft;
ConvertTyxy(ptDiff.h, ptDiff.v, rec^.tyxy, tyxyScrn);
 { AddPt(hcsruler^^.ptORules, ptDiff);}
SubPt(argPropOftyCsr[rm.tyCsr].ptHotDiff, ptDiff);
OffsetRect(rDst, ptDiff.h, ptDiff.v);
{$ifc fDbgOk}
IF fTstRuler THEN
    BEGIN WRITELN('RulerRAdjust'); PxR(' rDst',rDst); END;
{$endc}
END;

{----------------------------------------------------------------------}
PROCEDURE DrawRm(irm: TC; ptHotNew: TPt; hcsruler: THcsruler; orec: TC);
{----------------------------------------------------------------------}
VAR rT, sectRec: TR; port: TPort; bm: TBmp; xfer: TW; rm: TRm;
BEGIN
{$IFC sampcalls}  ALogCall;  {$ENDC}
IF fTstRuler THEN WRITELN('DrawRm - irm:',irm:2, ', ptHotNew: [', ptHotNew.h,
          ptHotNew.v, '], orec: ', orec);
rm := hcsruler^^.argrm[irm];
GetPort(port);
bm := bmRmSave;
IF rm.ptHot.h <> ptOffScrn.h THEN
    BEGIN
    RulerRAdjust(irm, rT, hcsruler, orec);
    IF irm = irmPt
       THEN CopyBits (bm, port^.portBits, rRmStd, rT, srcCopy, NIL)
       ELSE BEGIN (* erase the old mark *)
            SetWmFont;
            TextMode(srcBic);
            MoveTo(rT.left, rT.top);
            DrawChar(argPropOftyCsr[rm.tyCsr].ch);
            RestoreLFont;
            END;
    END;
hcsruler^^.argrm[irm].ptHot := ptHotNew;
IF ptHotNew.h <> ptOffScrn.h THEN
    BEGIN
    RulerRAdjust(irm, rT, hcsruler, orec);
    IF irm = irmPt THEN
        BEGIN
        {$ifc fDbgOk}
        IF fTstRuler THEN
            BEGIN
            WRITELN('Save new bits:');
            PxR(' rT',rT); PxR(' rRmStd',rRmStd);
            PxBm(' port^.portBits',port^.portBits);
            PxBm(' bm',bm);
            END;
        {$endc}
        IF SectRect (rT, port^.portBits.bounds, sectRec)
         THEN CopyBits(port^.portBits, bm, sectRec, rRmStd, srcCopy, NIL);
        END;
    SetWmFont;
    MoveTo(rT.left, rT.top);
    DrawChar(argPropOftyCsr[rm.tyCsr].ch);
    RestoreLFont;
    END;
IF fTstRuler THEN WRITELN('DrawRm done');
END;


(* ------
{---------------------------------------------------}
PROCEDURE DrawPgRuler(hcsruler: THcsruler; rRul: TR);
{---------------------------------------------------}
VAR ptRules: TPt; tyrlu: TTyRlU; imark: TC;

    PROCEDURE DrawMarks(cmarkPerUnit: TC; dxWid: TC; fLabel: TF);
    LABEL 111;
    VAR dy, dyHt: TC; i, residue: TC; ratT: TRat; spI: TSp;
    BEGIN
    {$IFC sampcalls}  ALogCall;  {$ENDC}
    dy := VhNearestMark(0, 0, MAXINT, tyrlu, cmarkPerUnit, tyvhV, ratT);
    dyHt := hcsruler^^.dptWidHt.v;
    i := 1;
    residue := 0;
    WHILE TRUE DO
        BEGIN
        dy := dy + ratT.c;
        residue := residue + ratT.num;
        IF residue >= ratT.denom THEN
            BEGIN residue := residue - ratT.denom; dy := dy + 1; END;
        IF dy > dyHt THEN GOTO 111;
        MoveTo(ptRules.h, ptRules.v + dy);
        Line(dxWid, 0);
        IF fLabel THEN
           BEGIN
           CToSp(i, spI); Move(-StringWidth(spI), 0); DrawString(spI);
           END;
        i := i + 1;
        END;
    111:
    END;
BEGIN
{$IFC sampcalls}  ALogCall;  {$ENDC}
IF fTstRuler THEN WRITELN('DrawPgRuler');
ptRules.h := rRul.topLeft.h + 2;
ptRules.v := rRul.topLeft.v;
tyrlu := hcsruler^^.tyrlu;
WITH argmarkd[tyrlu] DO
    BEGIN
    DrawMarks(argcmarkPerUnit[0], argvhWidHt[0], TRUE);
    FOR imark := 1 TO imarkMac - 1 DO
         DrawMarks(argcmarkPerUnit[imark], argvhWidHt[imark], FALSE);
    END;
END;
---- *)


PROCEDURE DrawMarks(cmarkPerUnit: TC; dvhWidHt: TC; fLabel: TF;
                    rRul: TR; tyvh: TTyvh; tyrlu: TTyRlU);
LABEL 111;
VAR vhDummy: TC; i, residue: TC; ratT: TRat; spI,spDigit: TSp;
 tyvhOther: TTyvh; ptRules, dptLine: TPt;
BEGIN
{$IFC sampcalls}  ALogCall;  {$ENDC}
IF tyvh = tyvhH THEN tyvhOther := tyvhV ELSE tyvhOther := tyvhH;
dptLine.vh[tyvh] := 0; dptLine.vh[tyvhOther] := dvhWidHt;
ptRules := rRul.topLeft;
ptRules.vh[tyvhOther] := rRul.topLeft.vh[tyvhOther] + 2;
vhDummy := VhNearestMark(0, 0, MAXINT, tyrlu, cmarkPerUnit, tyvh, ratT);
i := 1;
residue := 0;
WHILE TRUE DO
    BEGIN
    ptRules.vh[tyvh] := ptRules.vh[tyvh] + ratT.c;
    residue := residue + ratT.num;
    IF residue >= ratT.denom THEN
        BEGIN
        residue := residue - ratT.denom;
        ptRules.vh[tyvh] := ptRules.vh[tyvh] + 1;
        END;
    IF ptRules.vh[tyvh] >= rRul.botRight.vh[tyvh] THEN GOTO 111;
    MoveTo(ptRules.h, ptRules.v);
    Line(dptLine.h, dptLine.v);
    IF fLabel THEN
       BEGIN
       CToSp(i, spI);
       IF tyvh = tyvhH THEN Move(-StringWidth(spI), 1)
       ELSE BEGIN
            CToSp(1, spDigit);  {left flush labeling}
            Move(-StringWidth(spDigit), -1);
            END;
       DrawString(spI);
       END;
    i := i + 1;
    END;
111:
END;

{----------------------------------------------------}
PROCEDURE DrawRuler(hcsruler: THcsruler; rRul: TR);
{----------------------------------------------------}
VAR tyrlu: TTyRlU; imark: TC; tyvh: TTyvh;
BEGIN
{$IFC sampcalls}  ALogCall;  {$ENDC}
tyrlu := hcsruler^^.tyrlu;
IF hcsruler^^.tyRuler = tyRulPage THEN tyvh := tyvhV ELSE tyvh := tyvhH;
WITH argmarkd[tyrlu] DO
    BEGIN
    DrawMarks(argcmarkPerUnit[0], argvhWidHt[0], TRUE, rRul, tyvh, tyrlu);
    FOR imark := 1 TO imarkMac - 1 DO
        DrawMarks(argcmarkPerUnit[imark], argvhWidHt[imark], FALSE,
                  rRul, tyvh, tyrlu);
    END;
END;




ÿ