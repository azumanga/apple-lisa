;       GrafUtil routines borrowed from quickdraw--used here for speed.
;
.seg 'SegSpell'

SYMBOLS         .EQU    1

        .MACRO  FAKEHEAD
;--------------------------------------------------------------
;
;   FAKEHEAD, (no params)
;
;   Puts in a LINKA6 NOP to fake out the debugger's symbol mechanism.
;
        .IF SYMBOLS
        LINK    A6,#0                           ;DO THE LINK
        MOVE.L  (SP)+,A6                        ;UNDO THE LINK
        .ENDC
        .ENDM



        .MACRO  FAKETAIL
;--------------------------------------------------------------
;
;   FAKETAIL, 'ProcName'
;
;  Fake out the debugger's symbol mechanism.
;  Put FAKETAIL,'ProcName' after executable code.
;
        .IF SYMBOLS
        UNLK    A6                              ;RELEASE LOCAL VARIABLES
        RTS                                     ;THEN JUST RTS
        .ASCII  %1                              ;YES, PUT PROCEDURE IDENTIFIER
        .ENDC
        .ENDM


;-------------------------------------------------------------
;
;  --> UTIL.TEXT
;
;  SMALL UTILITY ROUTINES USED BY QuickDraw.
;


        .FUNC BitAnd,2
;-----------------------------------------------------------
;
;  Function BitAnd(long1,long2: LongInt): LongInt;
;
        FAKEHEAD
        MOVE.L  (SP)+,A0                        ;POP RETURN ADDR
        MOVE.L  (SP)+,D0                        ;GET ONE LONG
        AND.L   (SP)+,D0                        ;AND IT WITH THE OTHER
        MOVE.L  D0,(SP)                         ;STORE THE RESULT
        JMP     (A0)                            ;AND RETURN
        FAKETAIL 'BITAND  '


        .FUNC BitXor,2
;-----------------------------------------------------------
;
;  Function BitXor(long1,long2: LongInt): LongInt;
;
        FAKEHEAD
        MOVE.L  (SP)+,A0                        ;POP RETURN ADDR
        MOVE.L  (SP)+,D0                        ;GET ONE LONG
        MOVE.L  (SP)+,D1                        ;GET THE SECOND
        EOR.L   D1,D0                           ;XOR BOTH
        MOVE.L  D0,(SP)                         ;STORE THE RESULT
        JMP     (A0)                            ;AND RETURN
        FAKETAIL 'BITXOR  '


        .FUNC BitNot,1
;-----------------------------------------------------------
;
;  Function BitNot(long: LongInt): LongInt;
;
        FAKEHEAD
        MOVE.L  (SP)+,A0                        ;POP RETURN ADDR
        NOT.L   (SP)                            ;INVERT LONG
        MOVE.L  (SP)+,(SP)                      ;STORE INTO RESULT
        JMP     (A0)                            ;AND RETURN
        FAKETAIL 'BITNOT  '



        .FUNC BitOr,2
;-----------------------------------------------------------
;
;  Function BitOr(long1,long2: LongInt): LongInt;
;
        FAKEHEAD
        MOVE.L  (SP)+,A0                        ;POP RETURN ADDR
        MOVE.L  (SP)+,D0                        ;GET ONE LONG
        OR.L    (SP)+,D0                        ;OR IT WITH THE OTHER
        MOVE.L  D0,(SP)                         ;STORE THE RESULT
        JMP     (A0)                            ;AND RETURN
        FAKETAIL 'BITOR   '


        .FUNC BitShift,2
;-----------------------------------------------------------
;
;  Function BitShift(long: LongInt; count: INTEGER): LongInt;
;
;  positive count --> shift left.
;  negative count --> shift right.
;
        FAKEHEAD
        MOVE.L  (SP)+,A0                        ;POP RETURN ADDR
        MOVE    (SP)+,D1                        ;GET COUNT
        BPL.S   SHLEFT                          ;SHIFT LEFT IF POSITIVE
        NEG     D1                              ;MAKE COUNT POSITIVE
        MOVE.L  (SP)+,D0                        ;GET LONG
        LSR.L   D1,D0                           ;SHIFT IT RIGHT
        BRA.S   DONE                            ;AND STORE RESULT
SHLEFT  MOVE.L  (SP)+,D0                        ;GET LONG
        LSL.L   D1,D0                           ;SHIFT IT LEFT
DONE    MOVE.L  D0,(SP)                         ;STORE THE RESULT
        JMP     (A0)                            ;AND RETURN
        FAKETAIL 'BITSHIFT'


        .FUNC BitTst,2
;---------------------------------------------------------
;
;   FUNCTION BitTst(bytePtr: Ptr; bitNum: LongInt): BOOLEAN;
;
        FAKEHEAD
        MOVE.L  (SP)+,A0                        ;POP RETURN ADDR
        MOVE.L  (SP)+,D1                        ;GET BITNUM
        MOVE    D1,D0                           ;COPY IT
        ASR.L   #3,D1                           ;CONVERT BITS TO BYTES
        NOT     D0                              ;REVERSE BIT SENSE
        MOVE.L  (SP)+,A1                        ;GET PTR
        BTST    D0,0(A1,D1.L)                   ;TEST THE BIT
        SNE     (SP)                            ;SET OR CLEAR RESULT
        NEG.B   (SP)                            ;CONVERT -1 TO 1
        JMP     (A0)                            ;RETURN
        FAKETAIL 'BITTST  '


        .PROC BitSet,2
;---------------------------------------------------------
;
;   FUNCTION BitSet(bytePtr: Ptr; bitNum: LongInt): BOOLEAN;
;
        FAKEHEAD
        MOVE.L  (SP)+,A0                        ;POP RETURN ADDR
        MOVE.L  (SP)+,D1                        ;GET BITNUM
        MOVE    D1,D0                           ;COPY IT
        ASR.L   #3,D1                           ;CONVERT BITS TO BYTES
        NOT     D0                              ;REVERSE BIT SENSE
        MOVE.L  (SP)+,A1                        ;GET PTR
        BSET    D0,0(A1,D1.L)                   ;SET THE BIT
        JMP     (A0)
        FAKETAIL 'BITSET  '


        .PROC BitClr,2
;---------------------------------------------------------
;
;   FUNCTION BitClr(bytePtr: Ptr; bitNum: LongInt): BOOLEAN;
;
        FAKEHEAD
        MOVE.L  (SP)+,A0                        ;POP RETURN ADDR
        MOVE.L  (SP)+,D1                        ;GET BITNUM
        MOVE    D1,D0                           ;COPY IT
        ASR.L   #3,D1                           ;CONVERT BITS TO BYTES
        NOT     D0                              ;REVERSE BIT SENSE
        MOVE.L  (SP)+,A1                        ;GET PTR
        BCLR    D0,0(A1,D1.L)                   ;SET THE BIT
        JMP     (A0)
        FAKETAIL 'BITCLR '

.END
ÿ