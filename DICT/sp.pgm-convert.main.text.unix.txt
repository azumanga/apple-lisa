program convert;
(*
uses {$u -a-libos/syscall.obj }    syscall,
     {$u -a-libpl/paslibcall.obj } paslibcall;
*)
label
     1;
const
     defInName = '-dictionaries-dict/amer.data';
     defOutName = 'dict/amer.bin';
type Byte = -128..127;
     Nibble = 0..15;
     Str255 = string [255];
var  inFile, outFile: file of Byte;
     curByte, lastByte: Byte;
     curNibble, lastNibble: Nibble;
     charCount, lastCharCount, total, blocks: longint;
     ch: Char;
     i, rank: Integer;
     test: Boolean;
     outName, inName: Str255;
     s: string [1];
function HexConvert (n: Nibble): Char;
     begin
          if n < 10 then HexConvert := chr (n + ord ('0'))
          else HexConvert := chr (n - 10 + ord ('A'));
     end;
begin
     test := true;
     charCount := 0;
     lastCharCount := -1;
     lastByte := -1;
     repeat begin
          write ('Input file [', defInName, ']: ');
          readln (inName);
          if inName = '' then inName := defInName;
          reset (inFile, inName);
     end until ioresult <= 0;
     seek (inFile, 1024);                    { skip header blocks }
     get (inFile);                           { start at char 1024 (first is 0!) }

     repeat begin
          write ('Output file [', defOutName, ']: ');
          readln (outName);
          if outName = '' then outName := defOutName;
          rewrite (outFile, outName);
     end until ioresult <= 0;
     write ('blocks: ');
     readln (blocks);
     blocks := blocks * 512;                { convert to no. of chars }
     total := ord4 (1630) * 512;
     s := 'x';
     repeat begin
          curByte := inFile^;
          if curByte < 0 then curByte := curByte + 128;
          s [1] := chr (curByte);
          rank := pos (s, '0123456789ABCDEF') - 1;
          if rank < 0 then begin
               if curByte <> 0 then if curByte <> 13
                then if (lastCharCount = charCount) and (lastByte = curByte)
                 then write (']')
                 else begin
                    writeln;
                    write ('[', charCount : 1, ':', curByte : 1, ']');
                 end;
               lastCharCount := charCount;
               lastByte := curByte;
               goto 1;
          end;
          curNibble := rank;
          charCount := charCount + 1;
          if odd (charCount) then lastNibble := curNibble
            else begin
               if test then write (' ', HexConvert (lastNibble), HexConvert (curNibble));
               i := lastNibble * 16 + curNibble;
               if i >= 128 then i := i - 256;
               outFile^ := i;
               put (outFile);
          end;
          1:
          if keypress then begin
               writeln;
               write ('Interrupted with: ');
               read (ch);
               if (ch = 'q') or (ch = 'Q') then halt;
               if (ch = 't') or (ch = 'T') then test := not test;
               writeln ('{', charCount : 1, ' = ', charCount * 100 / total : 4 : 2, '%}');
          end;
          get (inFile);
     end until eof (inFile) or (charCount >= blocks);
     writeln ('{', charCount : 1, ' = ', charCount * 100 / total : 4 : 2, '%}');
     close (inFile, lock);
     close (outFile, lock);
end.
ÿ