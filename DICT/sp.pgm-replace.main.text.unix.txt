program replace;
uses      {$U -boot-SYS1LIB.OBJ }     International,
          {$u -boot-libos/syscall }         syscall,
          {$u -boot-libpl/paslibcall }      paslibcall;
     const
          limReps = 70;
          wildcardChr = 'É';
          pWildcardChr = 'Å';
          nWildcardChr = '¼';
          hWildcardChr = '»';
     type genStr = string [80];
          fileStr = string [255];
          str1 = string [1];
          TFileType = (inputFile, outputFile);
          TFile = text;
          option = (repeated);
          TMatchStyle = (none, parens, numbers);
     var  rep: array [0..limReps] of
                    record
                         find: genStr;
                         replace: genStr;
                         options: set of option;
                    end;
          maxReps: integer;
          fileList: array [-1..5] of TFile;
          maxFile: integer;
          inFile, outFile: TFile;
          state: (normal, control, quote, comment);
          test: boolean;
          cr: str1;
          hexStr: string [16];
          dotted: boolean;
          inEof, nextEof: boolean;
          inLine: fileStr;
procedure Main;
     var  outLine, nextLine: fileStr;
          inReplace, inOptions: genStr;
          i, j: integer;
          genOptions: set of (fortran, dropBlanks);
          done: boolean;
     procedure HexConvert (pStr: CompStrP);
          var  outStr: genStr;
               i, j, n, firstChar, secondChar, index: integer;
          begin
               outStr := '????????';
               n := 1;
               i := length (pStr^);
               for j := 8 downto 1 do begin
                    if i <= 0 then secondChar := 0 else secondChar := (ord (pStr^ [i]) - ord ('0'));
                    if i <= 1 then firstChar := 0 else firstChar := (ord (pStr^ [i - 1]) - ord ('0'));
                    { take bottom bits of firstChar and top bits of secondChar }
                    index := (firstChar mod (n * 2)) * (8 div n) + secondChar div n;
                    if index >= 0 then if index < 16 then outStr [j] := hexStr [index + 1];
                    i := i - 1;
                    if n < 4 then n := n * 2
                    else begin
                         n := 1;
                         i := i - 1; { skip extra character }
                    end;
               end;
               pStr^ := outStr;
          end;
     procedure TestHex;
          var str: genStr;
          begin
               while true do begin
                    write ('octal: ');
                    readln (str);
                    if str = '' then exit (TestHex);
                    HexConvert (@str);
                    writeln ('hex:  ', str);
               end;
          end;
     function ParensMatch (PString: CompStrP; start, finish: integer): boolean;
          var parens, brackets, braces, i: integer;
          begin
               if test then if start < finish then write ('ParensMatch>', start, ',', finish, ',', PString^);
               ParensMatch := false;
               parens := 0;
               brackets := 0;
               braces := 0;
               for i := start to finish do begin
                    case PString^ [i] of
                      '[': brackets := brackets + 1;
                      ']': begin if brackets = 0 then exit (ParensMatch); brackets := brackets - 1; end;
                      '(': parens := parens + 1;
                      ')': begin if parens = 0 then exit (ParensMatch); parens := parens - 1; end;
                      '{': braces := braces + 1;
                      '}': begin if braces = 0 then exit (ParensMatch); braces := braces - 1; end;
                    end;
               end;
               if (brackets = 0) then if (parens = 0) then if (braces = 0) then ParensMatch := true;
          end;
     procedure TestOdd;
          var  str: genStr;
               start, finish: integer;
          begin
               while true do begin
                    write ('string: ');
                    readln (str);
                    if str = '' then exit (TestOdd);
                    write ('start: ');
                    readln (start);
                    write ('finish: ');
                    readln (finish);
                    writeln ('result:  ', ParensMatch (@str, start, finish));
               end;
          end;
     procedure TestExit;
          var ch: char;
          begin
               if dotted then begin dotted := false; writeln; end;
               while true do begin
                    write ('Apple Period (Abort, Restart, Continue; Toggle Test, Hex test, Odd test): ');
                    read (ch);
                    writeln;
                    case ch of
                         'A', 'a': exit (replace);
                         'R', 'r': exit (main);
                         'C', 'c': exit (TestExit);
                         'T', 't': begin test := not test;
                                        write ('Testing ');
                                        if test then writeln ('on') else writeln ('off');
                                   end;
                         'H', 'h': TestHex;
                         'O', 'o': TestOdd;
                    end;
               end;
          end;
     function LastDigit (pLine: CompStrP; startPos, endPos: integer): integer;
          var j: integer;
          begin
               for j := startPos to endPos do
                if (pLine^ [j] < '0') or (pLine^ [j] > '9')
                 then begin
                    LastDigit := j - 1;
                    exit (LastDigit);
               end;
               LastDigit := endPos;
          end;
     function CasePos (PSubStr, PMainStr: CompStrP; subStart, mainStart: longint; len: integer;
                       compType: KindOfCompare; matchStyle: TMatchStyle)
                      : integer;
          var  i:   longint;
               j:   integer;
               done: boolean;
          begin
               (* if test then write ('casepos: ', substr, '; ', PMainStr^); *)
               if Psubstr^ <> '' then begin
                    for i := mainStart to length (PMainStr^) - len + 1 do begin
                         if CompChrIdentity (pointer (ord4 (PMainStr) + i),
                                             pointer (ord4 (PSubStr) + subStart),
                                             len,
                                             len,
                                             compType)
                         then begin
                              done := true;
                              if done then case matchStyle of
                                   parens:   done := ParensMatch (PMainStr, mainStart, i - 1);
                                   numbers:  if mainStart = i then done := false
                                             else if LastDigit (PMainStr, mainStart, i - 1) < i - 1
                                                then done := false;
                              end;
                              if done then begin
                                   CasePos := i;
                                   if test
                                    then writeln ('casepos: |', copy (PSubStr^, subStart, len), '|',
                                                  copy (PMainStr^, mainStart,
                                                        length (PMainStr^) + 1 - mainStart),
                                                  '|', ord (matchStyle), ',', i);
                                   exit (CasePos);
                              end;
                         end;
                    end;
               end;
               CasePos := 0;
               (* if test then writeln ('casepos: ', i); *)
          end;
     function RPos (ch1: char; str: genStr; limit: integer): integer;
          var i: integer;
               strChr: string [1];
          begin
               strChr := 'x';
               strChr [1] := ch1;
               i := pos (strChr, str);
               if i = 0 then i := length (str) + 1;
               if limit < i then i := limit;
               RPos := i;
          end;
     function RepStr1 (var subStr, repStr: genStr; var mainStr: fileStr; compType: KindOfCompare;
                       matchStyle: TMatchStyle; var nextPos, mainStart: integer)
                      : boolean;
          var  nextFixed, wildSub, wildRep:  integer;
               changeFlag, done:             boolean;
               tmpStr:           fileStr;
               secSub, secRep:     genStr;
          begin
               if test then writeln ('RepStr1>', substr, ',', repstr, ',', mainstr);
               repeat begin
                    done := true;
                    wildSub := RPos (wildcardChr, substr, 999);
                    WildSub := RPos (pWildcardChr, substr, wildSub);
                    WildSub := RPos (nWildcardChr, substr, wildSub);
                    nextFixed := CasePos (@subStr, @mainStr, 1, mainStart, wildSub - 1, compType, matchStyle);
                    if nextFixed = 0 then RepStr1 := false
                    else if wildSub > length (substr) then begin
                         RepStr1 := true;
                         mainStart := nextFixed + length (repStr);
                         delete (mainStr, nextFixed, length (substr));
                         insert (repStr, mainStr, nextFixed);
                    end
                    else begin
                         wildRep := RPos (wildcardChr, repstr, 999);
                         WildRep := RPos (hWildcardChr, repstr, wildRep);
                         secSub := copy (subStr, wildSub+1, length (subStr) - wildSub);
                         secRep := copy (repStr, wildRep+1, length (repStr) - wildRep);
                         mainStart := nextFixed + wildSub - 1;
                         matchStyle := none;
                         case subStr [wildSub] of
                              hWildCardChr:  matchStyle := parens;
                              nWildCardChr:  matchStyle := numbers;
                         end;
                         changeFlag := RepStr1 (secSub, secRep, mainStr, compType,
                                                matchStyle, nextPos, mainStart);
                         RepStr1 := changeFlag;
                         if changeFlag then begin
                              delete (mainStr, nextFixed, wildSub - 1);
                              insert (copy (repStr, 1, wildRep - 1), mainStr, nextFixed);
                              if repstr [wildRep] = hWildcardChr then begin
                                   tmpStr := copy (mainStr, nextFixed + wildRep - 1,
                                                     nextPos - wildSub - nextFixed + 1);
                                   delete (mainStr, nextFixed + wildRep - 1,
                                           nextPos - wildSub - nextFixed + 1);
                                   HexConvert (@tmpStr);
                                   insert (tmpStr, mainStr, nextFixed + wildRep - 1);
                              end;
                         end else begin
                              done := false;
                              mainStart := nextFixed + 1;
                         end;
                    end;
               end until done;
               nextPos := nextFixed;
               if test then writeln ('RepStr1< ', mainstr);
               if PAbortFlag then TestExit;
          end;
     function RepString (var subStr, repStr: genStr; var mainStr: fileStr; compType: KindOfCompare): boolean;
          var  changeFlag: boolean;
               nextPos, pos: integer;
          begin
               pos := 1;
               changeFlag := RepStr1 (subStr, repStr, mainStr, compType, parens, nextPos, pos);
               RepString := changeFlag;
               while changeFlag do changeFlag := RepStr1 (subStr, repStr, mainStr, compType, parens, nextPos, pos);
          end;
     function RepInLine (var line: fileStr): boolean;
          var  i: integer;
               newLine: fileStr;
               returnValue: boolean;
          begin
               returnValue := false;
               newline := line;
               insert (cr, newline, 1);
               insert (cr, newline, length (newline)+1);
               for i := 0 to maxReps do with rep [i] do begin
                    if RepString (find, replace, newLine, compWeak) then begin
                         if repeated in options then begin
                              while RepString (find, replace, newLine, compWeak) do; {  repeat until false }
                         end;
                         returnValue := true;
                    end;
               end;
               RepInLine := returnValue;
               if returnValue then begin
                    i := pos (cr, newline);
                    while i <> 0 do begin
                         delete (newline, i, 1);
                         i := pos (cr, newline);
                    end;
                    line := newline;
               end;
          end;
     procedure FixFileName (fileNameP: CompStrP);
          begin
               DownStrShift (fileNameP);
               if pos ('.text', fileNameP^) = 0 then begin
                    if fileNameP^ [1] = '-'
                      then if pos ('-', copy (fileNameP^, 2, length (fileNameP^) - 1)) <> 0
                        then exit (FixFileName);
                    insert ('.text', fileNameP^, length (fileNameP^) + 1);
               end;
          end;
     procedure PrintHelp;
          begin
               writeln ('This program replaces patterns in a source file, producing an object file');
               writeln ('Certain characters are handled specially:');
               writeln ('  On input:         !x   converts to control-x');
               writeln ('                    ~x   turns off special handling for x');
               writeln ('                    {É}  comments (across lines, too!)');
               writeln ('                    ?    prints this message');
               writeln ('  Replacing:        É    wildcard, matches any sequence of characters');
               writeln ('                    Å    wildcard, but (),[],{} must matchup inside');
               writeln ('                    ¼    wildcard, but only for digits');
               writeln ('  Replacing by:     É    matchcard, copy of match corresponding to É,Å');
               writeln ('                    »    matchcard, hex equivalent of É,Å in match');
               writeln ('     (N.B. each wildcard must have exactly one correspond replacement card)');
          end;
     function FixStr (strP: CompStrP): boolean;
          label 1;
          var  i, j: integer;
          begin {$R-}
               FixStr := true;
               j := 1;
               for i := 1 to length (strP^) do begin
                    case state of
                         comment:  begin if strP^ [i] = '}' then state := normal; goto 1; end;
                         control:  if strP^ [i] >= '@' then strP^ [j] := chr (ord (strP^ [i]) - 64)
                                   else strP^ [j] := chr (ord (strP^ [i]) + 64);
                         quote:    strP^ [j] := strP^ [i];
                         normal:   case strP^ [i] of
                                        '!': begin state := control; goto 1; end;
                                        '~': begin state := quote; goto 1; end;
                                        '{': begin state := comment; goto 1; end;
                                        otherwise strP^ [j] := strP^ [i];
                                   end;
                    end;
                    state := normal;
                    j := j + 1;
                    1:
               end;
               strP^ [0] := chr (j - 1);
          {$R+} end;
     procedure GetString (strOn: boolean; prompt: genStr; var inputStr: genStr);
          var  done: boolean;
               ch:  char;
               oldIoresult: integer;
               foo: genStr;
               quoteChar, nullString: str1;
          begin
               done := false;
               repeat begin
                    write (prompt, copy ('ÆÆÆÆÆÆ', 1, maxFile + 1), copy (' {!~', ord (state)+1, 1));
                    if strOn then if maxFile < 0 then readln (inputStr)
                    else begin
                         readln (fileList [maxFile], inputStr);
                         oldIoresult := ioresult;
                         writeln (inputStr);
                    end
                    else begin
                         if maxFile < 0 then read (ch)
                         else begin
                              read (fileList [maxFile], ch);
                              oldIoresult := ioresult;
                              write (ch);
                         end;
                         inputStr := 'x';
                         inputStr [1] := ch;
                    end;
                    if (maxFile >= 0) and ((oldIoresult > 0) or (eof (fileList [maxFile]))) then begin
                         close (fileList [maxFile]);
                         maxFile := maxFile - 1;
                    end
                    else if inputStr = '?' then PrintHelp
                    else if inputStr [1] <> '<' then done := true
                    else if maxFile <= 5 then begin
                         foo := copy (inputStr, 2, length (inputStr) - 1);
                         FixFileName (@foo);
                         reset (fileList [maxFile+1], foo);
                         if (ioresult <= 0)
                          then if not (eof (fileList [maxFile+1]))
                           then maxFile := maxFile + 1;
                    end;
                    if PAbortFlag then begin TestExit; if maxFile < 0 then done := false; end;
                    if done then done := FixStr (@inputStr);
               end until done;
          end;
     function GetConfirmation (prompt: genStr): boolean;
          var  str: genStr;
          begin
               repeat begin
                    GetString (false, concat (prompt, ' (Y, N)? '), str);
                    GetConfirmation := pos (str, 'Yy') <> 0;
               end until pos (str, 'YyNn') <> 0;
               writeln;
          end;
     procedure GetFile (fileType: TFileType; prompt: genStr; var filePtr: TFile);
          label     1;
          var  fileName: genStr;
               ioerror: integer;
               overWrite: boolean;
          begin
               while true do begin
                    GetString (true, prompt, fileName);
                    if fileName = '' then halt;
                    FixFileName (@fileName);
                    reset (filePtr, fileName);
                    ioerror := ioresult;
                    if fileType = outputFile then begin
                         overWrite := ioerror > 0;
                         close (filePtr);
                         if not overWrite then overWrite := GetConfirmation ('File exists.  Overwrite');
                         if overWrite then begin
                              rewrite (filePtr, fileName);
                              ioerror := ioresult;
                         end
                         else goto 1;
                    end;
                    if ioerror > 0 then writeln ('Unable to open "', fileName, '" - ', ioerror)
                    else exit (GetFile);
                    1:
               end;
          end;
     procedure GetInLine (var inLine: fileStr);
          var i, j: integer;
          begin
               inLine := nextLine;
               inEof := nextEof;
               while not nextEof do begin {get next line, adding continuation lines to inLine}
                    readln (inFile, nextLine);
                    nextEof := eof (inFile);
                    if nextLine = '' then begin
                         if not (dropBlanks in genOptions) then exit (GetInLine);
                    end
                    else if fortran in genOptions then begin
                         if test then writeln ('|', nextLine, '|');
                         if pos ('        ', nextLine) <> 1 then exit (GetInLine);
                         i := LastDigit (@nextLine, 9, length (nextLine));
                         if i < 9 then exit (GetInLine); {not a digit}
                         delete (nextLine, 1, i);
                         j := pos ('  ', nextLine);
                         while j <> 0 do begin         {kill mult-spaces}
                              delete (nextLine, j, 1);
                              j := pos ('  ', nextLine);
                         end;
                         if length (nextLine) + length (inLine) - 9 > 200 then exit (GetInLine); {doesn't fit}
                         insert (nextLine, inLine, length (inLine) + 1);   {join lines}
                         inEof := nextEof; {pop up eof}
                         if test then writeln ('|<D>|');
                    end
                    else exit (GetInLine);
               end;
          end;
     procedure GetOptions;
          var i: integer;
               done: boolean;
          begin
               repeat begin
                    GetString (true, 'General Options (Fortran, Drop Blanks):', inOptions);
                    done := true;
                    genOptions := [];
                    for i := 1 to length (inOptions) do begin
                         case inOptions [i] of
                              'f', 'F': genOptions := genOptions + [fortran];
                              'd', 'D': genOptions := genOptions + [dropBlanks];
                              otherwise done := false;
                         end;
                    end;
               end until done;
               maxReps := -1;
               repeat begin
                    GetString (true, 'Replace (É,Å):', inReplace);
                    if inReplace <> '' then begin
                         maxReps := maxReps+1;
                         with rep [maxReps] do begin
                              find := inReplace;
                              GetString (true, '           by:', replace);
                              repeat begin
                                   GetString (true, '      options:', inOptions);
                                   done := true;
                                   options := [];
                                   for i := 1 to length (inOptions) do begin
                                        case inOptions [i] of
                                             'r', 'R': options := options + [repeated];
                                             otherwise done := false;
                                        end;
                                   end;
                              end until done;
                         end;
                    end;
               end until (maxReps >= limReps) or (inReplace = '');
          end;
     begin     {main program}
          GetFile (inputFile, 'Source File [.text]:', inFile );
          GetFile (outputFile, 'Output File [.text]:', outFile );
          GetOptions;
          dotted := true;
          GetInLine (inLine); { toss away empty first buffer }
          while not inEof do begin
               GetInLine (inLine);
               if not inEof then begin
                    outLine := inLine;
                    if RepInLine (outLine) then begin
                         if dotted then begin dotted := false; writeln; end;
                         writeln ('## ', inLine);
                         writeln ('=> ', outLine);
                         writeln;
                    end
                    else begin
                         dotted := true;
                         write ('.');
                    end;
                    writeln (outFile, outLine);
               end;
               if PAbortFlag then TestExit;
          end;
          if dotted then begin dotted := false; writeln; end;
          close (inFile);
          close (outFile, lock);
     end;
procedure Init;
     begin
          state := normal;
          maxFile := -1;
          test := false;
          cr := 'x';
          cr [1] := chr (13);
          hexStr := '0123456789ABCDEF';
          inLine := '';
          inEof := false;
     end;
begin
     while true do begin
          Init;
          Main;
     end;
end.
ÿ