{Start of Keyboard program.
    This application should only be used as a tool; to make it useable with documents, you must
        o Have TKeyProcess.NewDocManager return a TKeyDocManager if NOT openedAsTool
        o Change TKeyWindow.AdornMenus to not disable Save & Continue and Revert to Previous Version
        o call TSelection.MarkChanged so that saving the document does something (assuming there is
                some data that you really want to save; right now there is only the appVolume)}

{$E ERRORS.TEXT}
{$E+}

UNIT UKeyboard;

INTERFACE

USES
    {$U UObject}            UObject,
    {$U QuickDraw}          QuickDraw,
    {$U UDraw}              UDraw,
    {$U UABC}               UABC,
    {$U -#BOOT-QD/HARDWARE} Hardware,
    {$U -#BOOT-Syscall}     Syscall;

CONST

    colorWhite = 1;
    colorBlack = 2;

    pickKind = 1;

    uVol0 = 1000;
    uVolMax = 1007;

TYPE

    TColor = colorWhite..colorBlack; {color of a box}

  {New Classes for this Application}

    TBox = SUBCLASS OF TObject

        {Variables}
        number:         INTEGER;
        bounds:         LRect;
        color:          TColor;
        waveLength:     Microseconds;
        overBox1:       TBox;
        overBox2:       TBox;

      {Creation/Destruction}
        FUNCTION  {TBox.}CREATE(object: TObject; itsHeap: THeap; itsNumber: INTEGER;
                                itsColor: TColor; itsWaveLength: Microseconds): TBox;

      {Display}
        PROCEDURE {TBox.}Draw;

        END;


  {Subclasses of Generic Classes}

    TKeyProcess = SUBCLASS OF TProcess

      {Creation/Destruction}
        FUNCTION  {TKeyProcess.}CREATE(object: TObject; itsHeap: THeap): TKeyProcess;
       {FUNCTION   TKeyProcess. Commence(phraseVersion: INTEGER);}
       {FUNCTION   TKeyProcess. NewDocManager(volumePrefix: TFilePath; openAsTool: BOOLEAN): TDocManager;}
        END;


    TKeyDocManager = SUBCLASS OF TDocManager

      {Creation/Destruction}
        FUNCTION  {TKeyDocManager.}CREATE(object: TObject; itsHeap: THeap; itsPathPrefix: TFilePath)
                                        : TKeyDocManager;
       {FUNCTION   TKeyDocManager. NewWindow(heap: THeap; wmgrID: TWindowID): TWindow;}

        END;


    TKeyView = SUBCLASS of TView

    {Variables}
      boxList: TList;

    {Creation/Destruction}

        FUNCTION  {TKeyView.}CREATE(object: TObject; itsHeap: THeap; itsPanel: TPanel; itsExtent: LRect;
                                itsBoxList: TList): TKeyView;

    {Display}
        FUNCTION  {TKeyView.}BoxWith(LPt: LPoint): TBox;
       {FUNCTION   TKeyView. CursorAt(mouseLPt: LPoint): TCursorNumber;}
       {PROCEDURE  TKeyView. Draw;}

    END;


    {NOTE: The panel will ALWAYS contain a TKeySelection}

    TKeySelection = SUBCLASS OF TSelection

      {Variables}
        currentBox:     TBox;           {Current box pressed}

      {Creation/Destruction}
        FUNCTION  {TKeySelection.}CREATE(object: TObject; itsHeap: THeap; itsView: TView; itsKind: INTEGER;
                                       itsAnchorLPt: LPoint): TKeySelection;

      {Drawing - per pad}
       {PROCEDURE  TKeySelection. Highlight(highTransit: THighTransit);}

      {Selection - per pad}
       {PROCEDURE  TKeySelection. MouseMove(mouseLPt: LPoint);}
       {PROCEDURE  TKeySelection. MousePress(mouseLPt: LPoint);}
       {PROCEDURE  TKeySelection. MouseRelease(mouseLPt: LPoint);}

      {Key Events}
       {PROCEDURE  TKeySelection. KeyChar(ch: CHAR);}

        END;


    TKeyWindow = SUBCLASS OF TWindow

      {Variables}
        initialVolume:  SpeakerVolume;  { volume outside of application }
        appVolume:      SpeakerVolume;  { volume inside application }
        hSize:          INTEGER;
        vSize:          INTEGER;

      {Creation/Destruction}
        FUNCTION  {TKeyWindow.}CREATE(object: TObject; itsHeap: THeap; itsWmgrID: TWindowID): TKeyWindow;

      {Document Creation}
       {PROCEDURE  TKeyWindow. BlankStationery;}

      {Activation/Deactivation}
       {PROCEDURE  TKeyWindow. Activate;}
       {PROCEDURE  TKeyWindow. Deactivate;}

      {Commands/Menus}
       {PROCEDURE  TKeyWindow. AdornMenus;}
       {FUNCTION   TKeyWindow. NewCommand(cmdNumber: TCmdNumber): TCommand;}

      {Sound Control}
        PROCEDURE {TKeyWindow.}Silence;
        PROCEDURE {TKeyWindow.}Sound(waveLength: Microseconds);
        END;



IMPLEMENTATION

  {$I UKeyboard2.text}

END.
ÿ