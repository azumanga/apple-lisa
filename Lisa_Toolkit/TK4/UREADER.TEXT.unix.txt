{$SETC forOS := TRUE}

    {LisaReader: reads UCSD text file}
    {Copyright 1983, 1984, Apple Computer Inc.}

UNIT UReader;

{$SETC TimeRead := FALSE} {If TRUE display the time needed to read a file.}

INTERFACE

USES
{$E ERRORS}
{$E+}
    {$U -#BOOT-SysCall}     SysCall,

    {$U UObject}            UObject,
    {$U QuickDraw}          QuickDraw,
    {$U UDraw}              UDraw,
    {$U UABC}               UABC,
    {$U UUnivText}          UTKUniversalText,
    {$U UText}              UText,
    {$U UDialog}            UDialog,
    {$U UIconRef}           UIconRef,
    {$U SuLib}              StdUnit;


CONST

    uReadFile   =   1000;
    uLisaWrite  =   2000;
    uReadIcons  =   2001;

    famStatus   =   famModern;
    sizeStatus  =   size12Point;

    famOffset   =   uModern - famModern;
    sizeOffset  =   u20Pitch - size20Pitch;

    vMargin     =   4;
    hMargin     =   6;

    phCtrReading    =   9;
    phReadingFile   =   1001;
    phCantOpen      =   1002;
    phReadError     =   1004;
    phDiffDate      =   1007;

    phCurFile       =   1500;
    phNoName        =   1501;
    phNoMsg         =   1502;

{$IFC TimeRead}
    phTimer         =   2000;
{$ENDC}

    txtUnit     =   $0400;  { 1024 = two disk blocks }
    readUnit    =   $4000;  { 16K = amount to read at one time }
    DLE         =   16;
    EOL         =   13;

    statusHeight = 20;

    inpID = 'Read File Named: [.TEXT]';

TYPE

    TFileBuffer =   PACKED ARRAY[1..readUnit] OF CHAR;

  {Subclasses of Generic Classes}

    TFileBlock = SUBCLASS OF TObject
      {Fields}
        numBytes:   INTEGER; {# bytes actually in the data}
        firstLine:  LONGINT;
        lineIndex:  TArray;
        data:       TFileBuffer;

      {Creation/Destruction}
        FUNCTION  TFileBlock.CREATE(object:TObject; heap: THeap; itsFirstLine: LONGINT): TFileBlock;
        PROCEDURE TFileBlock.Free; OVERRIDE;

      {Reading Files}
        PROCEDURE TFileBlock.ReadFrom(fs: TFileScanner; VAR blockMaxLen: INTEGER);
            {when done, fs.actual is # bytes read; blockMaxLen is maximum line length of block}

      {Accessing}
        FUNCTION  TFileBlock.LineAt(idx: INTEGER; VAR leadingSp, chStart, nChars: INTEGER): BOOLEAN;
            {returns TRUE if the line idx is located within the block;
                leadingSp is number of leading spaces;
                chStart is block index of first real character;
                nChars is number of real characters}
        END;

    TRdrProcess = SUBCLASS OF TProcess

      {Creation/Destruction}
        FUNCTION  TRdrProcess.CREATE: TRdrProcess;
        FUNCTION  TRdrProcess.NewDocManager(volumePrefix: TFilePath;
                                                openAsTool: BOOLEAN): TDocManager; OVERRIDE;
        PROCEDURE TRdrProcess.CopyExternalDoc(VAR error: INTEGER;
                            externalName, volumePrefix: TFilePath); OVERRIDE;
        END;

    TRdrDocManager = SUBCLASS OF TDocManager

      {Creation/Destruction}
        FUNCTION  TRdrDocManager.CREATE(object:TObject; heap: THeap; itsPathPrefix: TFilePath)
                                    : TRdrDocManager;
        FUNCTION  TRdrDocManager.NewWindow(heap: THeap; wmgrID: TWindowID): TWindow; OVERRIDE;
        END;

    TRdrWindow = SUBCLASS OF TWindow

      {Variables}
        filePanel:      TPanel;
        statusPanel:    TPanel;
        dialogWindow:   TDialogWindow;
        fileDialog:     TFileDialog;

      {Creation/Destruction}
        FUNCTION  TRdrWindow.CREATE(object:TObject; heap: THeap; itsWmgrID: TWindowID): TRdrWindow;

      {Document Creation, etc.}
        PROCEDURE TRdrWindow.Activate; OVERRIDE;
        PROCEDURE TRdrWindow.BlankStationery; OVERRIDE;

      {Menus}
        FUNCTION  TRdrWindow.CanDoCommand(cmdNumber: TCmdNumber; VAR checkIt: BOOLEAN): BOOLEAN; OVERRIDE;

      {Commands}
        FUNCTION  TRdrWindow.NewCommand(cmdNumber: TCmdNumber): TCommand; OVERRIDE;

        END;

    TRdrPrintManager = SUBCLASS OF TStdPrintManager
      {Variables}
        manBreaks:  TArray;  {4 bytes/element: line # at which manual breaks are set
                                        so that we can redo them when font changes}

      {Creation/Destruction}
        FUNCTION  TRdrPrintManager.CREATE(object:TObject; heap: THeap): TRdrPrintManager;
        PROCEDURE TRdrPrintManager.Free; OVERRIDE;

       {Page Breaks}
        PROCEDURE TRdrPrintManager.ClearPageBreaks(automatic: BOOLEAN); OVERRIDE;
        PROCEDURE TRdrPrintManager.RemakeManualBreaks;
        PROCEDURE TRdrPrintManager.SetBreak(vhs: VHSelect; where: LONGINT; isAutomatic: BOOLEAN); OVERRIDE;

      {Page Layout}
        PROCEDURE TRdrPrintManager.Init(itsMainView: TView; itsDfltMargins: LRect); OVERRIDE;
        PROCEDURE TRdrPrintManager.SetDfltHeadings; OVERRIDE;

        END;

    TRdrView = SUBCLASS OF TView

      {Variables}
        filePath:   S255;
        fileDate:   LONGINT;
        fBlockList: TList;      {of TFileBlock}
        maxLineLen: INTEGER;
        nLines:     LONGINT;
        typeStyle:  TTypeStyle;
        fntDescent: INTEGER;
        charSize:   Point;      {height and width; assumes fixed-width fonts ONLY}

      {Creation/Destruction}
        FUNCTION  TRdrView.CREATE(object:TObject; heap: THeap; itsPanel: TPanel): TRdrView;

      {Display}
        PROCEDURE TRdrView.Draw; OVERRIDE;
        PROCEDURE TRdrView.FontChanged; {called when the fntFamily or fntSize fields change}
        PROCEDURE TRdrView.SetExtent;

      {Display Metrics}
        FUNCTION  TRdrView.LocateLCd(lCd: LONGINT): LONGINT;
        FUNCTION  TRdrView.LocateLine(ln: LONGINT): LONGINT;

      {File Handling}
        FUNCTION  TRdrView.HasFile: BOOLEAN;
        PROCEDURE TRdrView.ReadFile(VAR filePath: TFilePath);

      {Mouse Tracking}
        PROCEDURE TRdrView.MousePress(mouseLPt: LPoint); OVERRIDE;

      {Page Breaks}
        FUNCTION  TRdrView.ForceBreakAt(vhs: VHSelect; precedingLocation: LONGINT;
                                            proposedLocation: LONGINT): LONGINT; OVERRIDE;
        END;


    TStatusView = SUBCLASS OF TView
      {Variables}

      {Creation/Destruction}
        FUNCTION  TStatusView.CREATE(object:TObject; heap: THeap; itsPanel: TPanel): TStatusView;

      {Display}
        PROCEDURE TStatusView.Draw; OVERRIDE;

        END;

    TFileDialog = SUBCLASS OF TDialog
      {Fields}
        rdrView:    TRdrView;
        inputFrame: TInputFrame;
        lastInput:  S255; {what to put back into input frame if user cancels dialog}

      {Creation/Destruction}
        FUNCTION  TFileDialog.CREATE(object:TObject; heap: THeap; itsDiView: TView;
                                        itsRdrView: TRdrView): TFileDialog;

      {Buttons}
        PROCEDURE TFileDialog.ButtonPushed(button: TButton); OVERRIDE;
        PROCEDURE TFileDialog.SetDefaultButton(button: TButton); OVERRIDE;

        END;


    TCopyToLisaWrite = SUBCLASS OF TCopyIconRefCommand

        FUNCTION  TCopyToLisaWrite.CREATE(object: TObject; heap: THeap; itsCmdNumber: TCmdNumber;
                                            itsRdrView: TRdrView): TCopyToLisaWrite;

        {Command Execution}
        PROCEDURE TCopyToLisaWrite.EachIconRef(PROCEDURE CopyIcon(iconKind: TIconKind;
                                                    toolNumber: LONGINT;
                                                    iconName: TIconName;
                                                    externalName: S255)); OVERRIDE
        END;


    TRdrPasteIcons = SUBCLASS OF TPasteIconRefCmd

        FUNCTION  TRdrPasteIcons.CREATE(object: TObject; heap: THeap; itsCmdNumber: TCmdNumber;
                                            itsRdrView: TRdrView): TRdrPasteIcons;

        {Command Execution}
        PROCEDURE TRdrPasteIcons.BeginPaste; OVERRIDE;
        PROCEDURE TRdrPasteIcons.PasteIcon(iconKind: TIconKind;
                                             toolNumber: LONGINT;
                                             VAR iconName: TIconName;
                                             VAR prefix: TFilePath;
                                             VAR password: TPassword); OVERRIDE;
        PROCEDURE TRdrPasteIcons.EndPaste(error: INTEGER); OVERRIDE;
        END;


IMPLEMENTATION

  {$I UReader2.text}

END.
ÿ